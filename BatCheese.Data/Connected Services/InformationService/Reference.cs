//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BatCheese.Data.InformationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ALogs", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ALogs : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatCheese.Data.InformationService.AuditLogs LogsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RecordCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatCheese.Data.InformationService.AuditLogs Logs {
            get {
                return this.LogsField;
            }
            set {
                if ((object.ReferenceEquals(this.LogsField, value) != true)) {
                    this.LogsField = value;
                    this.RaisePropertyChanged("Logs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RecordCount {
            get {
                return this.RecordCountField;
            }
            set {
                if ((this.RecordCountField.Equals(value) != true)) {
                    this.RecordCountField = value;
                    this.RaisePropertyChanged("RecordCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="AuditLogs", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="AuditLog")]
    [System.SerializableAttribute()]
    public class AuditLogs : System.Collections.Generic.List<BatCheese.Data.InformationService.AuditLog> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuditLog", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class AuditLog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AuditIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BatchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EntryTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatisticsInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserAccountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AuditID {
            get {
                return this.AuditIDField;
            }
            set {
                if ((this.AuditIDField.Equals(value) != true)) {
                    this.AuditIDField = value;
                    this.RaisePropertyChanged("AuditID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BatchName {
            get {
                return this.BatchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BatchNameField, value) != true)) {
                    this.BatchNameField = value;
                    this.RaisePropertyChanged("BatchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocID {
            get {
                return this.DocIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DocIDField, value) != true)) {
                    this.DocIDField = value;
                    this.RaisePropertyChanged("DocID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EntryTime {
            get {
                return this.EntryTimeField;
            }
            set {
                if ((this.EntryTimeField.Equals(value) != true)) {
                    this.EntryTimeField = value;
                    this.RaisePropertyChanged("EntryTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventName {
            get {
                return this.EventNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventNameField, value) != true)) {
                    this.EventNameField = value;
                    this.RaisePropertyChanged("EventName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostName {
            get {
                return this.HostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNameField, value) != true)) {
                    this.HostNameField = value;
                    this.RaisePropertyChanged("HostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceName {
            get {
                return this.SourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceNameField, value) != true)) {
                    this.SourceNameField = value;
                    this.RaisePropertyChanged("SourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatisticsInfo {
            get {
                return this.StatisticsInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticsInfoField, value) != true)) {
                    this.StatisticsInfoField = value;
                    this.RaisePropertyChanged("StatisticsInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserAccount {
            get {
                return this.UserAccountField;
            }
            set {
                if ((object.ReferenceEquals(this.UserAccountField, value) != true)) {
                    this.UserAccountField = value;
                    this.RaisePropertyChanged("UserAccount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="InformationService.IInformationService")]
    public interface IInformationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetAuditLogs", ReplyAction="http://tempuri.org/IInformationService/GetAuditLogsResponse")]
        BatCheese.Data.InformationService.ALogs GetAuditLogs(int pageindex, int pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetAuditLogs", ReplyAction="http://tempuri.org/IInformationService/GetAuditLogsResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.InformationService.ALogs> GetAuditLogsAsync(int pageindex, int pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetAuditLogsNonPaged", ReplyAction="http://tempuri.org/IInformationService/GetAuditLogsNonPagedResponse")]
        BatCheese.Data.InformationService.AuditLogs GetAuditLogsNonPaged();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetAuditLogsNonPaged", ReplyAction="http://tempuri.org/IInformationService/GetAuditLogsNonPagedResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.InformationService.AuditLogs> GetAuditLogsNonPagedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetAuditLogsFiltered", ReplyAction="http://tempuri.org/IInformationService/GetAuditLogsFilteredResponse")]
        BatCheese.Data.InformationService.ALogs GetAuditLogsFiltered(System.Collections.Generic.Dictionary<string, string> filter, bool isAnd, int pageindex, int pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetAuditLogsFiltered", ReplyAction="http://tempuri.org/IInformationService/GetAuditLogsFilteredResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.InformationService.ALogs> GetAuditLogsFilteredAsync(System.Collections.Generic.Dictionary<string, string> filter, bool isAnd, int pageindex, int pagesize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetAuditLogsFilteredNonPaged", ReplyAction="http://tempuri.org/IInformationService/GetAuditLogsFilteredNonPagedResponse")]
        BatCheese.Data.InformationService.AuditLogs GetAuditLogsFilteredNonPaged(System.Collections.Generic.Dictionary<string, string> filter, bool isAnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetAuditLogsFilteredNonPaged", ReplyAction="http://tempuri.org/IInformationService/GetAuditLogsFilteredNonPagedResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.InformationService.AuditLogs> GetAuditLogsFilteredNonPagedAsync(System.Collections.Generic.Dictionary<string, string> filter, bool isAnd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/DeleteAuditLogs", ReplyAction="http://tempuri.org/IInformationService/DeleteAuditLogsResponse")]
        bool DeleteAuditLogs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/DeleteAuditLogs", ReplyAction="http://tempuri.org/IInformationService/DeleteAuditLogsResponse")]
        System.Threading.Tasks.Task<bool> DeleteAuditLogsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInformationService/MoveAuditLogs")]
        void MoveAuditLogs(string newDatabase, string newTable);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInformationService/MoveAuditLogs")]
        System.Threading.Tasks.Task MoveAuditLogsAsync(string newDatabase, string newTable);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInformationService/WriteAuditLog")]
        void WriteAuditLog(BatCheese.Data.InformationService.AuditLog log);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IInformationService/WriteAuditLog")]
        System.Threading.Tasks.Task WriteAuditLogAsync(BatCheese.Data.InformationService.AuditLog log);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInformationServiceChannel : BatCheese.Data.InformationService.IInformationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InformationServiceClient : System.ServiceModel.ClientBase<BatCheese.Data.InformationService.IInformationService>, BatCheese.Data.InformationService.IInformationService {
        
        public InformationServiceClient() {
        }
        
        public InformationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InformationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InformationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InformationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BatCheese.Data.InformationService.ALogs GetAuditLogs(int pageindex, int pagesize) {
            return base.Channel.GetAuditLogs(pageindex, pagesize);
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.InformationService.ALogs> GetAuditLogsAsync(int pageindex, int pagesize) {
            return base.Channel.GetAuditLogsAsync(pageindex, pagesize);
        }
        
        public BatCheese.Data.InformationService.AuditLogs GetAuditLogsNonPaged() {
            return base.Channel.GetAuditLogsNonPaged();
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.InformationService.AuditLogs> GetAuditLogsNonPagedAsync() {
            return base.Channel.GetAuditLogsNonPagedAsync();
        }
        
        public BatCheese.Data.InformationService.ALogs GetAuditLogsFiltered(System.Collections.Generic.Dictionary<string, string> filter, bool isAnd, int pageindex, int pagesize) {
            return base.Channel.GetAuditLogsFiltered(filter, isAnd, pageindex, pagesize);
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.InformationService.ALogs> GetAuditLogsFilteredAsync(System.Collections.Generic.Dictionary<string, string> filter, bool isAnd, int pageindex, int pagesize) {
            return base.Channel.GetAuditLogsFilteredAsync(filter, isAnd, pageindex, pagesize);
        }
        
        public BatCheese.Data.InformationService.AuditLogs GetAuditLogsFilteredNonPaged(System.Collections.Generic.Dictionary<string, string> filter, bool isAnd) {
            return base.Channel.GetAuditLogsFilteredNonPaged(filter, isAnd);
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.InformationService.AuditLogs> GetAuditLogsFilteredNonPagedAsync(System.Collections.Generic.Dictionary<string, string> filter, bool isAnd) {
            return base.Channel.GetAuditLogsFilteredNonPagedAsync(filter, isAnd);
        }
        
        public bool DeleteAuditLogs() {
            return base.Channel.DeleteAuditLogs();
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAuditLogsAsync() {
            return base.Channel.DeleteAuditLogsAsync();
        }
        
        public void MoveAuditLogs(string newDatabase, string newTable) {
            base.Channel.MoveAuditLogs(newDatabase, newTable);
        }
        
        public System.Threading.Tasks.Task MoveAuditLogsAsync(string newDatabase, string newTable) {
            return base.Channel.MoveAuditLogsAsync(newDatabase, newTable);
        }
        
        public void WriteAuditLog(BatCheese.Data.InformationService.AuditLog log) {
            base.Channel.WriteAuditLog(log);
        }
        
        public System.Threading.Tasks.Task WriteAuditLogAsync(BatCheese.Data.InformationService.AuditLog log) {
            return base.Channel.WriteAuditLogAsync(log);
        }
    }
}
