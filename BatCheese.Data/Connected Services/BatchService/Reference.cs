//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BatCheese.Data.BatchService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueueCollection", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="TRQueue")]
    [System.SerializableAttribute()]
    public class QueueCollection : System.Collections.Generic.List<BatCheese.Data.BatchService.TRQueue> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TRQueue", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class TRQueue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BatchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CachePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Activity {
            get {
                return this.ActivityField;
            }
            set {
                if ((this.ActivityField.Equals(value) != true)) {
                    this.ActivityField = value;
                    this.RaisePropertyChanged("Activity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName {
            get {
                return this.ActivityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityNameField, value) != true)) {
                    this.ActivityNameField = value;
                    this.RaisePropertyChanged("ActivityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BatchName {
            get {
                return this.BatchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BatchNameField, value) != true)) {
                    this.BatchNameField = value;
                    this.RaisePropertyChanged("BatchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CachePath {
            get {
                return this.CachePathField;
            }
            set {
                if ((object.ReferenceEquals(this.CachePathField, value) != true)) {
                    this.CachePathField = value;
                    this.RaisePropertyChanged("CachePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchState", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class BatchState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatCheese.Data.BatchService.BatchReleaseState ReleaseStateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName {
            get {
                return this.ActivityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityNameField, value) != true)) {
                    this.ActivityNameField = value;
                    this.RaisePropertyChanged("ActivityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatCheese.Data.BatchService.BatchReleaseState ReleaseState {
            get {
                return this.ReleaseStateField;
            }
            set {
                if ((this.ReleaseStateField.Equals(value) != true)) {
                    this.ReleaseStateField = value;
                    this.RaisePropertyChanged("ReleaseState");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchReleaseState", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    public enum BatchReleaseState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotFound = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Received = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InProcess = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Released = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="LockedBatches", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="LockedBatch")]
    [System.SerializableAttribute()]
    public class LockedBatches : System.Collections.Generic.List<BatCheese.Data.BatchService.LockedBatch> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LockedBatch", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class LockedBatch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BatchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CachePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LockTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BatchName {
            get {
                return this.BatchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BatchNameField, value) != true)) {
                    this.BatchNameField = value;
                    this.RaisePropertyChanged("BatchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CachePath {
            get {
                return this.CachePathField;
            }
            set {
                if ((object.ReferenceEquals(this.CachePathField, value) != true)) {
                    this.CachePathField = value;
                    this.RaisePropertyChanged("CachePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LockTime {
            get {
                return this.LockTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.LockTimeField, value) != true)) {
                    this.LockTimeField = value;
                    this.RaisePropertyChanged("LockTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityDefinition", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BatCheese.Data.BatchService.ActivityToProcess))]
    public partial class ActivityDefinition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityLibraryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActivityManualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfigurationDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentClassContentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentClassLibraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentClassURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxRetryCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinRetryIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatCheese.Data.BatchService.KLCredential SiteCredentialsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SiteTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SiteUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityClass {
            get {
                return this.ActivityClassField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityClassField, value) != true)) {
                    this.ActivityClassField = value;
                    this.RaisePropertyChanged("ActivityClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityDescription {
            get {
                return this.ActivityDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityDescriptionField, value) != true)) {
                    this.ActivityDescriptionField = value;
                    this.RaisePropertyChanged("ActivityDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityLibrary {
            get {
                return this.ActivityLibraryField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityLibraryField, value) != true)) {
                    this.ActivityLibraryField = value;
                    this.RaisePropertyChanged("ActivityLibrary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ActivityManual {
            get {
                return this.ActivityManualField;
            }
            set {
                if ((this.ActivityManualField.Equals(value) != true)) {
                    this.ActivityManualField = value;
                    this.RaisePropertyChanged("ActivityManual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName {
            get {
                return this.ActivityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityNameField, value) != true)) {
                    this.ActivityNameField = value;
                    this.RaisePropertyChanged("ActivityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityNumber {
            get {
                return this.ActivityNumberField;
            }
            set {
                if ((this.ActivityNumberField.Equals(value) != true)) {
                    this.ActivityNumberField = value;
                    this.RaisePropertyChanged("ActivityNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfigurationData {
            get {
                return this.ConfigurationDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigurationDataField, value) != true)) {
                    this.ConfigurationDataField = value;
                    this.RaisePropertyChanged("ConfigurationData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentClass {
            get {
                return this.DocumentClassField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentClassField, value) != true)) {
                    this.DocumentClassField = value;
                    this.RaisePropertyChanged("DocumentClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentClassContentType {
            get {
                return this.DocumentClassContentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentClassContentTypeField, value) != true)) {
                    this.DocumentClassContentTypeField = value;
                    this.RaisePropertyChanged("DocumentClassContentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentClassLibraryName {
            get {
                return this.DocumentClassLibraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentClassLibraryNameField, value) != true)) {
                    this.DocumentClassLibraryNameField = value;
                    this.RaisePropertyChanged("DocumentClassLibraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentClassURL {
            get {
                return this.DocumentClassURLField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentClassURLField, value) != true)) {
                    this.DocumentClassURLField = value;
                    this.RaisePropertyChanged("DocumentClassURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxRetryCount {
            get {
                return this.MaxRetryCountField;
            }
            set {
                if ((this.MaxRetryCountField.Equals(value) != true)) {
                    this.MaxRetryCountField = value;
                    this.RaisePropertyChanged("MaxRetryCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinRetryInterval {
            get {
                return this.MinRetryIntervalField;
            }
            set {
                if ((this.MinRetryIntervalField.Equals(value) != true)) {
                    this.MinRetryIntervalField = value;
                    this.RaisePropertyChanged("MinRetryInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessName {
            get {
                return this.ProcessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessNameField, value) != true)) {
                    this.ProcessNameField = value;
                    this.RaisePropertyChanged("ProcessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatCheese.Data.BatchService.KLCredential SiteCredentials {
            get {
                return this.SiteCredentialsField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteCredentialsField, value) != true)) {
                    this.SiteCredentialsField = value;
                    this.RaisePropertyChanged("SiteCredentials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SiteType {
            get {
                return this.SiteTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteTypeField, value) != true)) {
                    this.SiteTypeField = value;
                    this.RaisePropertyChanged("SiteType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SiteUrl {
            get {
                return this.SiteUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteUrlField, value) != true)) {
                    this.SiteUrlField = value;
                    this.RaisePropertyChanged("SiteUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KLCredential", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class KLCredential : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string _domainField;
        
        private bool _isOffice365Field;
        
        private string _passwordField;
        
        private string _userNameField;
        
        private string AdfsUrlk__BackingFieldField;
        
        private BatCheese.Data.BatchService.CredentialType Typek__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _domain {
            get {
                return this._domainField;
            }
            set {
                if ((object.ReferenceEquals(this._domainField, value) != true)) {
                    this._domainField = value;
                    this.RaisePropertyChanged("_domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool _isOffice365 {
            get {
                return this._isOffice365Field;
            }
            set {
                if ((this._isOffice365Field.Equals(value) != true)) {
                    this._isOffice365Field = value;
                    this.RaisePropertyChanged("_isOffice365");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _password {
            get {
                return this._passwordField;
            }
            set {
                if ((object.ReferenceEquals(this._passwordField, value) != true)) {
                    this._passwordField = value;
                    this.RaisePropertyChanged("_password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _userName {
            get {
                return this._userNameField;
            }
            set {
                if ((object.ReferenceEquals(this._userNameField, value) != true)) {
                    this._userNameField = value;
                    this.RaisePropertyChanged("_userName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<AdfsUrl>k__BackingField", IsRequired=true)]
        public string AdfsUrlk__BackingField {
            get {
                return this.AdfsUrlk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.AdfsUrlk__BackingFieldField, value) != true)) {
                    this.AdfsUrlk__BackingFieldField = value;
                    this.RaisePropertyChanged("AdfsUrlk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Type>k__BackingField", IsRequired=true)]
        public BatCheese.Data.BatchService.CredentialType Typek__BackingField {
            get {
                return this.Typek__BackingFieldField;
            }
            set {
                if ((this.Typek__BackingFieldField.Equals(value) != true)) {
                    this.Typek__BackingFieldField = value;
                    this.RaisePropertyChanged("Typek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityToProcess", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ActivityToProcess : BatCheese.Data.BatchService.ActivityDefinition {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActivityCompleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActivityFinishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityLockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActivityStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ActivityToProcessIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BatchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CachePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FailCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastFailTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ActivityComplete {
            get {
                return this.ActivityCompleteField;
            }
            set {
                if ((this.ActivityCompleteField.Equals(value) != true)) {
                    this.ActivityCompleteField = value;
                    this.RaisePropertyChanged("ActivityComplete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityError {
            get {
                return this.ActivityErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityErrorField, value) != true)) {
                    this.ActivityErrorField = value;
                    this.RaisePropertyChanged("ActivityError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActivityFinish {
            get {
                return this.ActivityFinishField;
            }
            set {
                if ((this.ActivityFinishField.Equals(value) != true)) {
                    this.ActivityFinishField = value;
                    this.RaisePropertyChanged("ActivityFinish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityLock {
            get {
                return this.ActivityLockField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityLockField, value) != true)) {
                    this.ActivityLockField = value;
                    this.RaisePropertyChanged("ActivityLock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActivityStart {
            get {
                return this.ActivityStartField;
            }
            set {
                if ((this.ActivityStartField.Equals(value) != true)) {
                    this.ActivityStartField = value;
                    this.RaisePropertyChanged("ActivityStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ActivityToProcessID {
            get {
                return this.ActivityToProcessIDField;
            }
            set {
                if ((this.ActivityToProcessIDField.Equals(value) != true)) {
                    this.ActivityToProcessIDField = value;
                    this.RaisePropertyChanged("ActivityToProcessID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BatchName {
            get {
                return this.BatchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BatchNameField, value) != true)) {
                    this.BatchNameField = value;
                    this.RaisePropertyChanged("BatchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CachePath {
            get {
                return this.CachePathField;
            }
            set {
                if ((object.ReferenceEquals(this.CachePathField, value) != true)) {
                    this.CachePathField = value;
                    this.RaisePropertyChanged("CachePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FailCount {
            get {
                return this.FailCountField;
            }
            set {
                if ((this.FailCountField.Equals(value) != true)) {
                    this.FailCountField = value;
                    this.RaisePropertyChanged("FailCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastFailTime {
            get {
                return this.LastFailTimeField;
            }
            set {
                if ((this.LastFailTimeField.Equals(value) != true)) {
                    this.LastFailTimeField = value;
                    this.RaisePropertyChanged("LastFailTime");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CredentialType", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    public enum CredentialType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Windows = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Forms = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Claims = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ActivitiesToProcess", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ActivityToProcess")]
    [System.SerializableAttribute()]
    public class ActivitiesToProcess : System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityToProcess> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ActivityRegisters", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ActivityRegister")]
    [System.SerializableAttribute()]
    public class ActivityRegisters : System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityRegister> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityRegister", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ActivityRegister : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatCheese.Data.BatchService.ActivityMode TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityID {
            get {
                return this.ActivityIDField;
            }
            set {
                if ((this.ActivityIDField.Equals(value) != true)) {
                    this.ActivityIDField = value;
                    this.RaisePropertyChanged("ActivityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Class {
            get {
                return this.ClassField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassField, value) != true)) {
                    this.ClassField = value;
                    this.RaisePropertyChanged("Class");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Library {
            get {
                return this.LibraryField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryField, value) != true)) {
                    this.LibraryField = value;
                    this.RaisePropertyChanged("Library");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Machine {
            get {
                return this.MachineField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineField, value) != true)) {
                    this.MachineField = value;
                    this.RaisePropertyChanged("Machine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Server {
            get {
                return this.ServerField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerField, value) != true)) {
                    this.ServerField = value;
                    this.RaisePropertyChanged("Server");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatCheese.Data.BatchService.ActivityMode Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityMode", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    public enum ActivityMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Automatic = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ActivityHours", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ActivityHour")]
    [System.SerializableAttribute()]
    public class ActivityHours : System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityHour> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityHour", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ActivityHour : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityHourIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, bool> HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityHourID {
            get {
                return this.ActivityHourIDField;
            }
            set {
                if ((this.ActivityHourIDField.Equals(value) != true)) {
                    this.ActivityHourIDField = value;
                    this.RaisePropertyChanged("ActivityHourID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityID {
            get {
                return this.ActivityIDField;
            }
            set {
                if ((this.ActivityIDField.Equals(value) != true)) {
                    this.ActivityIDField = value;
                    this.RaisePropertyChanged("ActivityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName {
            get {
                return this.ActivityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityNameField, value) != true)) {
                    this.ActivityNameField = value;
                    this.RaisePropertyChanged("ActivityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, bool> Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((object.ReferenceEquals(this.HoursField, value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="RepositorySchemaDefinitions", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="RepositorySchemaDefinition")]
    [System.SerializableAttribute()]
    public class RepositorySchemaDefinitions : System.Collections.Generic.List<BatCheese.Data.BatchService.RepositorySchemaDefinition> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositorySchemaDefinition", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class RepositorySchemaDefinition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string adfsUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string domainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isOffice365Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime lastUpdatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int repositoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string serverNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string siteTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string siteUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatCheese.Data.BatchService.CredentialType typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string adfsUrl {
            get {
                return this.adfsUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.adfsUrlField, value) != true)) {
                    this.adfsUrlField = value;
                    this.RaisePropertyChanged("adfsUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string domain {
            get {
                return this.domainField;
            }
            set {
                if ((object.ReferenceEquals(this.domainField, value) != true)) {
                    this.domainField = value;
                    this.RaisePropertyChanged("domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isOffice365 {
            get {
                return this.isOffice365Field;
            }
            set {
                if ((this.isOffice365Field.Equals(value) != true)) {
                    this.isOffice365Field = value;
                    this.RaisePropertyChanged("isOffice365");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime lastUpdated {
            get {
                return this.lastUpdatedField;
            }
            set {
                if ((this.lastUpdatedField.Equals(value) != true)) {
                    this.lastUpdatedField = value;
                    this.RaisePropertyChanged("lastUpdated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int repositoryID {
            get {
                return this.repositoryIDField;
            }
            set {
                if ((this.repositoryIDField.Equals(value) != true)) {
                    this.repositoryIDField = value;
                    this.RaisePropertyChanged("repositoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string serverName {
            get {
                return this.serverNameField;
            }
            set {
                if ((object.ReferenceEquals(this.serverNameField, value) != true)) {
                    this.serverNameField = value;
                    this.RaisePropertyChanged("serverName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string siteType {
            get {
                return this.siteTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.siteTypeField, value) != true)) {
                    this.siteTypeField = value;
                    this.RaisePropertyChanged("siteType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string siteUrl {
            get {
                return this.siteUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.siteUrlField, value) != true)) {
                    this.siteUrlField = value;
                    this.RaisePropertyChanged("siteUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatCheese.Data.BatchService.CredentialType type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="RepositoryDefinitions", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="RepositoryDefinition")]
    [System.SerializableAttribute()]
    public class RepositoryDefinitions : System.Collections.Generic.List<BatCheese.Data.BatchService.RepositoryDefinition> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoryDefinition", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class RepositoryDefinition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int repositoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string siteCredentialsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string siteTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string siteUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int repositoryID {
            get {
                return this.repositoryIDField;
            }
            set {
                if ((this.repositoryIDField.Equals(value) != true)) {
                    this.repositoryIDField = value;
                    this.RaisePropertyChanged("repositoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string siteCredentials {
            get {
                return this.siteCredentialsField;
            }
            set {
                if ((object.ReferenceEquals(this.siteCredentialsField, value) != true)) {
                    this.siteCredentialsField = value;
                    this.RaisePropertyChanged("siteCredentials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string siteType {
            get {
                return this.siteTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.siteTypeField, value) != true)) {
                    this.siteTypeField = value;
                    this.RaisePropertyChanged("siteType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string siteUrl {
            get {
                return this.siteUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.siteUrlField, value) != true)) {
                    this.siteUrlField = value;
                    this.RaisePropertyChanged("siteUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ProcessDefinitions", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ProcessDefinition")]
    [System.SerializableAttribute()]
    public class ProcessDefinitions : System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessDefinition> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessDefinition", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BatCheese.Data.BatchService.ActivityDesigner))]
    public partial class ProcessDefinition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocClassContentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocClassLibraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocClassNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocClassURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatCheese.Data.BatchService.RepositoryDefinition RepositoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocClassContentType {
            get {
                return this.DocClassContentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DocClassContentTypeField, value) != true)) {
                    this.DocClassContentTypeField = value;
                    this.RaisePropertyChanged("DocClassContentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocClassLibraryName {
            get {
                return this.DocClassLibraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocClassLibraryNameField, value) != true)) {
                    this.DocClassLibraryNameField = value;
                    this.RaisePropertyChanged("DocClassLibraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocClassName {
            get {
                return this.DocClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocClassNameField, value) != true)) {
                    this.DocClassNameField = value;
                    this.RaisePropertyChanged("DocClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocClassURL {
            get {
                return this.DocClassURLField;
            }
            set {
                if ((object.ReferenceEquals(this.DocClassURLField, value) != true)) {
                    this.DocClassURLField = value;
                    this.RaisePropertyChanged("DocClassURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocTypeID {
            get {
                return this.DocTypeIDField;
            }
            set {
                if ((this.DocTypeIDField.Equals(value) != true)) {
                    this.DocTypeIDField = value;
                    this.RaisePropertyChanged("DocTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessName {
            get {
                return this.ProcessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessNameField, value) != true)) {
                    this.ProcessNameField = value;
                    this.RaisePropertyChanged("ProcessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatCheese.Data.BatchService.RepositoryDefinition Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityDesigner", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ActivityDesigner : BatCheese.Data.BatchService.ProcessDefinition {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatCheese.Data.BatchService.ActivityDesigns ActivityDesignsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatCheese.Data.BatchService.ActivityDesigns ActivityDesigns {
            get {
                return this.ActivityDesignsField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityDesignsField, value) != true)) {
                    this.ActivityDesignsField = value;
                    this.RaisePropertyChanged("ActivityDesigns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ActivityDesigns", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ActivityDesign")]
    [System.SerializableAttribute()]
    public class ActivityDesigns : System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityDesign> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityDesign", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ActivityDesign : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityProcessIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfigurationDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxRetryCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinRetryIntervalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityClass {
            get {
                return this.ActivityClassField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityClassField, value) != true)) {
                    this.ActivityClassField = value;
                    this.RaisePropertyChanged("ActivityClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName {
            get {
                return this.ActivityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityNameField, value) != true)) {
                    this.ActivityNameField = value;
                    this.RaisePropertyChanged("ActivityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityNumber {
            get {
                return this.ActivityNumberField;
            }
            set {
                if ((this.ActivityNumberField.Equals(value) != true)) {
                    this.ActivityNumberField = value;
                    this.RaisePropertyChanged("ActivityNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityProcessID {
            get {
                return this.ActivityProcessIDField;
            }
            set {
                if ((this.ActivityProcessIDField.Equals(value) != true)) {
                    this.ActivityProcessIDField = value;
                    this.RaisePropertyChanged("ActivityProcessID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfigurationData {
            get {
                return this.ConfigurationDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigurationDataField, value) != true)) {
                    this.ConfigurationDataField = value;
                    this.RaisePropertyChanged("ConfigurationData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocTypeID {
            get {
                return this.DocTypeIDField;
            }
            set {
                if ((this.DocTypeIDField.Equals(value) != true)) {
                    this.DocTypeIDField = value;
                    this.RaisePropertyChanged("DocTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxRetryCount {
            get {
                return this.MaxRetryCountField;
            }
            set {
                if ((this.MaxRetryCountField.Equals(value) != true)) {
                    this.MaxRetryCountField = value;
                    this.RaisePropertyChanged("MaxRetryCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinRetryInterval {
            get {
                return this.MinRetryIntervalField;
            }
            set {
                if ((this.MinRetryIntervalField.Equals(value) != true)) {
                    this.MinRetryIntervalField = value;
                    this.RaisePropertyChanged("MinRetryInterval");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ActivityDefinitions", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ActivityDefinition")]
    [System.SerializableAttribute()]
    public class ActivityDefinitions : System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityDefinition> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ActivityDesigners", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ActivityDesigner")]
    [System.SerializableAttribute()]
    public class ActivityDesigners : System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityDesigner> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessNameMapping", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ProcessNameMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int ActivityCountk__BackingFieldField;
        
        private string DocumentClassk__BackingFieldField;
        
        private string ProcessNamek__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ActivityCount>k__BackingField", IsRequired=true)]
        public int ActivityCountk__BackingField {
            get {
                return this.ActivityCountk__BackingFieldField;
            }
            set {
                if ((this.ActivityCountk__BackingFieldField.Equals(value) != true)) {
                    this.ActivityCountk__BackingFieldField = value;
                    this.RaisePropertyChanged("ActivityCountk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<DocumentClass>k__BackingField", IsRequired=true)]
        public string DocumentClassk__BackingField {
            get {
                return this.DocumentClassk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentClassk__BackingFieldField, value) != true)) {
                    this.DocumentClassk__BackingFieldField = value;
                    this.RaisePropertyChanged("DocumentClassk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ProcessName>k__BackingField", IsRequired=true)]
        public string ProcessNamek__BackingField {
            get {
                return this.ProcessNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessNamek__BackingFieldField, value) != true)) {
                    this.ProcessNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("ProcessNamek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BatchService.IBatchService")]
    public interface IBatchService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/AddQueue", ReplyAction="http://tempuri.org/IBatchService/AddQueueResponse")]
        void AddQueue(string batchname, string cachepath, int activity, string error);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/AddQueue", ReplyAction="http://tempuri.org/IBatchService/AddQueueResponse")]
        System.IAsyncResult BeginAddQueue(string batchname, string cachepath, int activity, string error, System.AsyncCallback callback, object asyncState);
        
        void EndAddQueue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/DynamicallyGenerateCachePath", ReplyAction="http://tempuri.org/IBatchService/DynamicallyGenerateCachePathResponse")]
        int DynamicallyGenerateCachePath();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/DynamicallyGenerateCachePath", ReplyAction="http://tempuri.org/IBatchService/DynamicallyGenerateCachePathResponse")]
        System.IAsyncResult BeginDynamicallyGenerateCachePath(System.AsyncCallback callback, object asyncState);
        
        int EndDynamicallyGenerateCachePath(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/ResetLocks", ReplyAction="http://tempuri.org/IBatchService/ResetLocksResponse")]
        void ResetLocks(string machineName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/ResetLocks", ReplyAction="http://tempuri.org/IBatchService/ResetLocksResponse")]
        System.IAsyncResult BeginResetLocks(string machineName, System.AsyncCallback callback, object asyncState);
        
        void EndResetLocks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/CheckLock", ReplyAction="http://tempuri.org/IBatchService/CheckLockResponse")]
        bool CheckLock(string batchName, string cachePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/CheckLock", ReplyAction="http://tempuri.org/IBatchService/CheckLockResponse")]
        System.IAsyncResult BeginCheckLock(string batchName, string cachePath, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckLock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetQueueCollection", ReplyAction="http://tempuri.org/IBatchService/GetQueueCollectionResponse")]
        BatCheese.Data.BatchService.QueueCollection GetQueueCollection();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetQueueCollection", ReplyAction="http://tempuri.org/IBatchService/GetQueueCollectionResponse")]
        System.IAsyncResult BeginGetQueueCollection(System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.QueueCollection EndGetQueueCollection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/IsProcessByDocument", ReplyAction="http://tempuri.org/IBatchService/IsProcessByDocumentResponse")]
        bool IsProcessByDocument();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/IsProcessByDocument", ReplyAction="http://tempuri.org/IBatchService/IsProcessByDocumentResponse")]
        System.IAsyncResult BeginIsProcessByDocument(System.AsyncCallback callback, object asyncState);
        
        bool EndIsProcessByDocument(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetConfigurationItem", ReplyAction="http://tempuri.org/IBatchService/GetConfigurationItemResponse")]
        string GetConfigurationItem(string itemKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetConfigurationItem", ReplyAction="http://tempuri.org/IBatchService/GetConfigurationItemResponse")]
        System.IAsyncResult BeginGetConfigurationItem(string itemKey, System.AsyncCallback callback, object asyncState);
        
        string EndGetConfigurationItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/SetConfigurationItem", ReplyAction="http://tempuri.org/IBatchService/SetConfigurationItemResponse")]
        void SetConfigurationItem(string itemKey, string itemValue);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/SetConfigurationItem", ReplyAction="http://tempuri.org/IBatchService/SetConfigurationItemResponse")]
        System.IAsyncResult BeginSetConfigurationItem(string itemKey, string itemValue, System.AsyncCallback callback, object asyncState);
        
        void EndSetConfigurationItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/InsertConfigurationItem", ReplyAction="http://tempuri.org/IBatchService/InsertConfigurationItemResponse")]
        void InsertConfigurationItem(string itemKey, string itemValue);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/InsertConfigurationItem", ReplyAction="http://tempuri.org/IBatchService/InsertConfigurationItemResponse")]
        System.IAsyncResult BeginInsertConfigurationItem(string itemKey, string itemValue, System.AsyncCallback callback, object asyncState);
        
        void EndInsertConfigurationItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetBatchState", ReplyAction="http://tempuri.org/IBatchService/GetBatchStateResponse")]
        BatCheese.Data.BatchService.BatchState GetBatchState(string batchname);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetBatchState", ReplyAction="http://tempuri.org/IBatchService/GetBatchStateResponse")]
        System.IAsyncResult BeginGetBatchState(string batchname, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.BatchState EndGetBatchState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/InsertBatchLock", ReplyAction="http://tempuri.org/IBatchService/InsertBatchLockResponse")]
        void InsertBatchLock(string batchname, string cachepath, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/InsertBatchLock", ReplyAction="http://tempuri.org/IBatchService/InsertBatchLockResponse")]
        System.IAsyncResult BeginInsertBatchLock(string batchname, string cachepath, string machineName, System.AsyncCallback callback, object asyncState);
        
        void EndInsertBatchLock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/InsertBatchLockByUserName", ReplyAction="http://tempuri.org/IBatchService/InsertBatchLockByUserNameResponse")]
        void InsertBatchLockByUserName(string batchname, string cachepath, string machineName, string username);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/InsertBatchLockByUserName", ReplyAction="http://tempuri.org/IBatchService/InsertBatchLockByUserNameResponse")]
        System.IAsyncResult BeginInsertBatchLockByUserName(string batchname, string cachepath, string machineName, string username, System.AsyncCallback callback, object asyncState);
        
        void EndInsertBatchLockByUserName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/QueryLockedBatchesByUser", ReplyAction="http://tempuri.org/IBatchService/QueryLockedBatchesByUserResponse")]
        BatCheese.Data.BatchService.LockedBatches QueryLockedBatchesByUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/QueryLockedBatchesByUser", ReplyAction="http://tempuri.org/IBatchService/QueryLockedBatchesByUserResponse")]
        System.IAsyncResult BeginQueryLockedBatchesByUser(string username, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.LockedBatches EndQueryLockedBatchesByUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/DeleteBatchLock", ReplyAction="http://tempuri.org/IBatchService/DeleteBatchLockResponse")]
        void DeleteBatchLock(string batchname, string cachepath, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/DeleteBatchLock", ReplyAction="http://tempuri.org/IBatchService/DeleteBatchLockResponse")]
        System.IAsyncResult BeginDeleteBatchLock(string batchname, string cachepath, string machineName, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteBatchLock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/DeleteQueue", ReplyAction="http://tempuri.org/IBatchService/DeleteQueueResponse")]
        void DeleteQueue(string batchname, string cachepath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/DeleteQueue", ReplyAction="http://tempuri.org/IBatchService/DeleteQueueResponse")]
        System.IAsyncResult BeginDeleteQueue(string batchname, string cachepath, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteQueue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/DeleteBatch", ReplyAction="http://tempuri.org/IBatchService/DeleteBatchResponse")]
        void DeleteBatch(string batchName, string cachePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/DeleteBatch", ReplyAction="http://tempuri.org/IBatchService/DeleteBatchResponse")]
        System.IAsyncResult BeginDeleteBatch(string batchName, string cachePath, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteBatch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateQueue", ReplyAction="http://tempuri.org/IBatchService/UpdateQueueResponse")]
        void UpdateQueue(int activitynumber, string activityname, string batchname, string cachepath, string error);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateQueue", ReplyAction="http://tempuri.org/IBatchService/UpdateQueueResponse")]
        System.IAsyncResult BeginUpdateQueue(int activitynumber, string activityname, string batchname, string cachepath, string error, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateQueue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateQueueCachePath", ReplyAction="http://tempuri.org/IBatchService/UpdateQueueCachePathResponse")]
        void UpdateQueueCachePath(string batchname, string cachepath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateQueueCachePath", ReplyAction="http://tempuri.org/IBatchService/UpdateQueueCachePathResponse")]
        System.IAsyncResult BeginUpdateQueueCachePath(string batchname, string cachepath, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateQueueCachePath(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/InsertProcess", ReplyAction="http://tempuri.org/IBatchService/InsertProcessResponse")]
        bool InsertProcess(string batchname, string cachePath, string processName, System.DateTime finishedTime);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/InsertProcess", ReplyAction="http://tempuri.org/IBatchService/InsertProcessResponse")]
        System.IAsyncResult BeginInsertProcess(string batchname, string cachePath, string processName, System.DateTime finishedTime, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/InsertActivityToProcess", ReplyAction="http://tempuri.org/IBatchService/InsertActivityToProcessResponse")]
        bool InsertActivityToProcess(string batchname, string cachepath, BatCheese.Data.BatchService.ActivityDefinition def);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/InsertActivityToProcess", ReplyAction="http://tempuri.org/IBatchService/InsertActivityToProcessResponse")]
        System.IAsyncResult BeginInsertActivityToProcess(string batchname, string cachepath, BatCheese.Data.BatchService.ActivityDefinition def, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertActivityToProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/DeleteActivitiesToProcess", ReplyAction="http://tempuri.org/IBatchService/DeleteActivitiesToProcessResponse")]
        void DeleteActivitiesToProcess(string batchname, string cachepath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/DeleteActivitiesToProcess", ReplyAction="http://tempuri.org/IBatchService/DeleteActivitiesToProcessResponse")]
        System.IAsyncResult BeginDeleteActivitiesToProcess(string batchname, string cachepath, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteActivitiesToProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateActivityToProcess", ReplyAction="http://tempuri.org/IBatchService/UpdateActivityToProcessResponse")]
        void UpdateActivityToProcess(string library, string batchname, string cachepath, bool activitycomplete);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateActivityToProcess", ReplyAction="http://tempuri.org/IBatchService/UpdateActivityToProcessResponse")]
        System.IAsyncResult BeginUpdateActivityToProcess(string library, string batchname, string cachepath, bool activitycomplete, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateActivityToProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateActivitiesToProcessError", ReplyAction="http://tempuri.org/IBatchService/UpdateActivitiesToProcessErrorResponse")]
        void UpdateActivitiesToProcessError(long activitytoprocessid, string error);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateActivitiesToProcessError", ReplyAction="http://tempuri.org/IBatchService/UpdateActivitiesToProcessErrorResponse")]
        System.IAsyncResult BeginUpdateActivitiesToProcessError(long activitytoprocessid, string error, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateActivitiesToProcessError(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateActivitiesToProcessErrorByBatch", ReplyAction="http://tempuri.org/IBatchService/UpdateActivitiesToProcessErrorByBatchResponse")]
        void UpdateActivitiesToProcessErrorByBatch(string batchName, string error);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateActivitiesToProcessErrorByBatch", ReplyAction="http://tempuri.org/IBatchService/UpdateActivitiesToProcessErrorByBatchResponse")]
        System.IAsyncResult BeginUpdateActivitiesToProcessErrorByBatch(string batchName, string error, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateActivitiesToProcessErrorByBatch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateBatchErrorStatus", ReplyAction="http://tempuri.org/IBatchService/UpdateBatchErrorStatusResponse")]
        void UpdateBatchErrorStatus(long activitytoprocessid, string error, string batchName, string cachePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateBatchErrorStatus", ReplyAction="http://tempuri.org/IBatchService/UpdateBatchErrorStatusResponse")]
        System.IAsyncResult BeginUpdateBatchErrorStatus(long activitytoprocessid, string error, string batchName, string cachePath, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateBatchErrorStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateActivitiesToProcessStart", ReplyAction="http://tempuri.org/IBatchService/UpdateActivitiesToProcessStartResponse")]
        bool UpdateActivitiesToProcessStart(long activitytoprocessid, System.DateTime start, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateActivitiesToProcessStart", ReplyAction="http://tempuri.org/IBatchService/UpdateActivitiesToProcessStartResponse")]
        System.IAsyncResult BeginUpdateActivitiesToProcessStart(long activitytoprocessid, System.DateTime start, string machineName, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateActivitiesToProcessStart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateLockedActivitiesToProcessMachineName", ReplyAction="http://tempuri.org/IBatchService/UpdateLockedActivitiesToProcessMachineNameRespon" +
            "se")]
        bool UpdateLockedActivitiesToProcessMachineName(long activitytoprocessid, System.DateTime start, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateLockedActivitiesToProcessMachineName", ReplyAction="http://tempuri.org/IBatchService/UpdateLockedActivitiesToProcessMachineNameRespon" +
            "se")]
        System.IAsyncResult BeginUpdateLockedActivitiesToProcessMachineName(long activitytoprocessid, System.DateTime start, string machineName, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateLockedActivitiesToProcessMachineName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateLockedActivitiesToProcessMachineNameByBatc" +
            "h", ReplyAction="http://tempuri.org/IBatchService/UpdateLockedActivitiesToProcessMachineNameByBatc" +
            "hResponse")]
        bool UpdateLockedActivitiesToProcessMachineNameByBatch(long activitytoprocessid, string lockName, string batchName, string cachePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateLockedActivitiesToProcessMachineNameByBatc" +
            "h", ReplyAction="http://tempuri.org/IBatchService/UpdateLockedActivitiesToProcessMachineNameByBatc" +
            "hResponse")]
        System.IAsyncResult BeginUpdateLockedActivitiesToProcessMachineNameByBatch(long activitytoprocessid, string lockName, string batchName, string cachePath, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateLockedActivitiesToProcessMachineNameByBatch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateActivitiesToProcessComplete", ReplyAction="http://tempuri.org/IBatchService/UpdateActivitiesToProcessCompleteResponse")]
        void UpdateActivitiesToProcessComplete(long activitytoprocessid, System.DateTime finish);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateActivitiesToProcessComplete", ReplyAction="http://tempuri.org/IBatchService/UpdateActivitiesToProcessCompleteResponse")]
        System.IAsyncResult BeginUpdateActivitiesToProcessComplete(long activitytoprocessid, System.DateTime finish, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateActivitiesToProcessComplete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateBatchCompleteStatus", ReplyAction="http://tempuri.org/IBatchService/UpdateBatchCompleteStatusResponse")]
        void UpdateBatchCompleteStatus(long activitytoprocessid, long duration, long openDuration, string batchName, string cachePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateBatchCompleteStatus", ReplyAction="http://tempuri.org/IBatchService/UpdateBatchCompleteStatusResponse")]
        System.IAsyncResult BeginUpdateBatchCompleteStatus(long activitytoprocessid, long duration, long openDuration, string batchName, string cachePath, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateBatchCompleteStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/ResetActivityToProcessLocks", ReplyAction="http://tempuri.org/IBatchService/ResetActivityToProcessLocksResponse")]
        void ResetActivityToProcessLocks(string machineName, System.Collections.Generic.List<string> activityClasses);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/ResetActivityToProcessLocks", ReplyAction="http://tempuri.org/IBatchService/ResetActivityToProcessLocksResponse")]
        System.IAsyncResult BeginResetActivityToProcessLocks(string machineName, System.Collections.Generic.List<string> activityClasses, System.AsyncCallback callback, object asyncState);
        
        void EndResetActivityToProcessLocks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UnlockActivityToProcess", ReplyAction="http://tempuri.org/IBatchService/UnlockActivityToProcessResponse")]
        void UnlockActivityToProcess(long activitytoprocessid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UnlockActivityToProcess", ReplyAction="http://tempuri.org/IBatchService/UnlockActivityToProcessResponse")]
        System.IAsyncResult BeginUnlockActivityToProcess(long activitytoprocessid, System.AsyncCallback callback, object asyncState);
        
        void EndUnlockActivityToProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UnlockActivityToProcessByBatch", ReplyAction="http://tempuri.org/IBatchService/UnlockActivityToProcessByBatchResponse")]
        void UnlockActivityToProcessByBatch(long activitytoprocessid, string batchName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UnlockActivityToProcessByBatch", ReplyAction="http://tempuri.org/IBatchService/UnlockActivityToProcessByBatchResponse")]
        System.IAsyncResult BeginUnlockActivityToProcessByBatch(long activitytoprocessid, string batchName, System.AsyncCallback callback, object asyncState);
        
        void EndUnlockActivityToProcessByBatch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UnlockActivityToProcessByBatchActivityNumber", ReplyAction="http://tempuri.org/IBatchService/UnlockActivityToProcessByBatchActivityNumberResp" +
            "onse")]
        void UnlockActivityToProcessByBatchActivityNumber(long activityToProcessActivityNumber, string batchName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UnlockActivityToProcessByBatchActivityNumber", ReplyAction="http://tempuri.org/IBatchService/UnlockActivityToProcessByBatchActivityNumberResp" +
            "onse")]
        System.IAsyncResult BeginUnlockActivityToProcessByBatchActivityNumber(long activityToProcessActivityNumber, string batchName, System.AsyncCallback callback, object asyncState);
        
        void EndUnlockActivityToProcessByBatchActivityNumber(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetAllActivities", ReplyAction="http://tempuri.org/IBatchService/GetAllActivitiesResponse")]
        BatCheese.Data.BatchService.ActivitiesToProcess GetAllActivities();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetAllActivities", ReplyAction="http://tempuri.org/IBatchService/GetAllActivitiesResponse")]
        System.IAsyncResult BeginGetAllActivities(System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivitiesToProcess EndGetAllActivities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetActivitiesToProcess", ReplyAction="http://tempuri.org/IBatchService/GetActivitiesToProcessResponse")]
        BatCheese.Data.BatchService.ActivitiesToProcess GetActivitiesToProcess();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetActivitiesToProcess", ReplyAction="http://tempuri.org/IBatchService/GetActivitiesToProcessResponse")]
        System.IAsyncResult BeginGetActivitiesToProcess(System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivitiesToProcess EndGetActivitiesToProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetActivityToProcess", ReplyAction="http://tempuri.org/IBatchService/GetActivityToProcessResponse")]
        BatCheese.Data.BatchService.ActivityToProcess GetActivityToProcess(System.Collections.Generic.List<string> activityClasses);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetActivityToProcess", ReplyAction="http://tempuri.org/IBatchService/GetActivityToProcessResponse")]
        System.IAsyncResult BeginGetActivityToProcess(System.Collections.Generic.List<string> activityClasses, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityToProcess EndGetActivityToProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetActivityToProcessWithLock", ReplyAction="http://tempuri.org/IBatchService/GetActivityToProcessWithLockResponse")]
        BatCheese.Data.BatchService.ActivityToProcess GetActivityToProcessWithLock(System.Collections.Generic.List<string> activityClasses, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetActivityToProcessWithLock", ReplyAction="http://tempuri.org/IBatchService/GetActivityToProcessWithLockResponse")]
        System.IAsyncResult BeginGetActivityToProcessWithLock(System.Collections.Generic.List<string> activityClasses, string machineName, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityToProcess EndGetActivityToProcessWithLock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetMultipleActivityToProcessWithLock", ReplyAction="http://tempuri.org/IBatchService/GetMultipleActivityToProcessWithLockResponse")]
        System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityToProcess> GetMultipleActivityToProcessWithLock(System.Collections.Generic.List<string> activityClasses, string machineName, int rowsToLock);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetMultipleActivityToProcessWithLock", ReplyAction="http://tempuri.org/IBatchService/GetMultipleActivityToProcessWithLockResponse")]
        System.IAsyncResult BeginGetMultipleActivityToProcessWithLock(System.Collections.Generic.List<string> activityClasses, string machineName, int rowsToLock, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityToProcess> EndGetMultipleActivityToProcessWithLock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetMultipleActivityToProcessWithLockByBatch", ReplyAction="http://tempuri.org/IBatchService/GetMultipleActivityToProcessWithLockByBatchRespo" +
            "nse")]
        System.Collections.Generic.List<BatCheese.Data.BatchService.ActivitiesToProcess> GetMultipleActivityToProcessWithLockByBatch(string serverType, string machineName, int rowsToLock);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetMultipleActivityToProcessWithLockByBatch", ReplyAction="http://tempuri.org/IBatchService/GetMultipleActivityToProcessWithLockByBatchRespo" +
            "nse")]
        System.IAsyncResult BeginGetMultipleActivityToProcessWithLockByBatch(string serverType, string machineName, int rowsToLock, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<BatCheese.Data.BatchService.ActivitiesToProcess> EndGetMultipleActivityToProcessWithLockByBatch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetManualActivitiesToProcess", ReplyAction="http://tempuri.org/IBatchService/GetManualActivitiesToProcessResponse")]
        BatCheese.Data.BatchService.ActivitiesToProcess GetManualActivitiesToProcess(System.Collections.Generic.List<string> cachepaths, string activityname);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetManualActivitiesToProcess", ReplyAction="http://tempuri.org/IBatchService/GetManualActivitiesToProcessResponse")]
        System.IAsyncResult BeginGetManualActivitiesToProcess(System.Collections.Generic.List<string> cachepaths, string activityname, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivitiesToProcess EndGetManualActivitiesToProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetManualActivitiesByProcess", ReplyAction="http://tempuri.org/IBatchService/GetManualActivitiesByProcessResponse")]
        BatCheese.Data.BatchService.ActivitiesToProcess GetManualActivitiesByProcess(System.Collections.Generic.List<string> cachepaths, string activityname, System.Collections.Generic.List<string> processnames);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetManualActivitiesByProcess", ReplyAction="http://tempuri.org/IBatchService/GetManualActivitiesByProcessResponse")]
        System.IAsyncResult BeginGetManualActivitiesByProcess(System.Collections.Generic.List<string> cachepaths, string activityname, System.Collections.Generic.List<string> processnames, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivitiesToProcess EndGetManualActivitiesByProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetManualActivityInProcess", ReplyAction="http://tempuri.org/IBatchService/GetManualActivityInProcessResponse")]
        BatCheese.Data.BatchService.ActivityToProcess GetManualActivityInProcess(string batchname, string cachepath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetManualActivityInProcess", ReplyAction="http://tempuri.org/IBatchService/GetManualActivityInProcessResponse")]
        System.IAsyncResult BeginGetManualActivityInProcess(string batchname, string cachepath, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityToProcess EndGetManualActivityInProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetActivitiesForBatch", ReplyAction="http://tempuri.org/IBatchService/GetActivitiesForBatchResponse")]
        BatCheese.Data.BatchService.ActivitiesToProcess GetActivitiesForBatch(string batchName, string cachePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetActivitiesForBatch", ReplyAction="http://tempuri.org/IBatchService/GetActivitiesForBatchResponse")]
        System.IAsyncResult BeginGetActivitiesForBatch(string batchName, string cachePath, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivitiesToProcess EndGetActivitiesForBatch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetCompletedBatches", ReplyAction="http://tempuri.org/IBatchService/GetCompletedBatchesResponse")]
        BatCheese.Data.BatchService.ActivitiesToProcess GetCompletedBatches();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetCompletedBatches", ReplyAction="http://tempuri.org/IBatchService/GetCompletedBatchesResponse")]
        System.IAsyncResult BeginGetCompletedBatches(System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivitiesToProcess EndGetCompletedBatches(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/BatchExists", ReplyAction="http://tempuri.org/IBatchService/BatchExistsResponse")]
        bool BatchExists(string batchname, string cachepath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/BatchExists", ReplyAction="http://tempuri.org/IBatchService/BatchExistsResponse")]
        System.IAsyncResult BeginBatchExists(string batchname, string cachepath, System.AsyncCallback callback, object asyncState);
        
        bool EndBatchExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/BatchInManualActivity", ReplyAction="http://tempuri.org/IBatchService/BatchInManualActivityResponse")]
        bool BatchInManualActivity(string batchname, string cachepath, string activityname);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/BatchInManualActivity", ReplyAction="http://tempuri.org/IBatchService/BatchInManualActivityResponse")]
        System.IAsyncResult BeginBatchInManualActivity(string batchname, string cachepath, string activityname, System.AsyncCallback callback, object asyncState);
        
        bool EndBatchInManualActivity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetActivities", ReplyAction="http://tempuri.org/IBatchService/GetActivitiesResponse")]
        BatCheese.Data.BatchService.ActivityRegisters GetActivities();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetActivities", ReplyAction="http://tempuri.org/IBatchService/GetActivitiesResponse")]
        System.IAsyncResult BeginGetActivities(System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityRegisters EndGetActivities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetLocActivities", ReplyAction="http://tempuri.org/IBatchService/GetLocActivitiesResponse")]
        BatCheese.Data.BatchService.ActivityRegisters GetLocActivities(string culture);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetLocActivities", ReplyAction="http://tempuri.org/IBatchService/GetLocActivitiesResponse")]
        System.IAsyncResult BeginGetLocActivities(string culture, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityRegisters EndGetLocActivities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetRegisteredActivities", ReplyAction="http://tempuri.org/IBatchService/GetRegisteredActivitiesResponse")]
        BatCheese.Data.BatchService.ActivityRegisters GetRegisteredActivities(string server, string machine);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetRegisteredActivities", ReplyAction="http://tempuri.org/IBatchService/GetRegisteredActivitiesResponse")]
        System.IAsyncResult BeginGetRegisteredActivities(string server, string machine, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityRegisters EndGetRegisteredActivities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetRegisteredActiveActivities", ReplyAction="http://tempuri.org/IBatchService/GetRegisteredActiveActivitiesResponse")]
        BatCheese.Data.BatchService.ActivityRegisters GetRegisteredActiveActivities(string server, string machine);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetRegisteredActiveActivities", ReplyAction="http://tempuri.org/IBatchService/GetRegisteredActiveActivitiesResponse")]
        System.IAsyncResult BeginGetRegisteredActiveActivities(string server, string machine, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityRegisters EndGetRegisteredActiveActivities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetActivityHours", ReplyAction="http://tempuri.org/IBatchService/GetActivityHoursResponse")]
        BatCheese.Data.BatchService.ActivityHours GetActivityHours(string machine);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetActivityHours", ReplyAction="http://tempuri.org/IBatchService/GetActivityHoursResponse")]
        System.IAsyncResult BeginGetActivityHours(string machine, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityHours EndGetActivityHours(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetRepositorySchemaDefinitions", ReplyAction="http://tempuri.org/IBatchService/GetRepositorySchemaDefinitionsResponse")]
        BatCheese.Data.BatchService.RepositorySchemaDefinitions GetRepositorySchemaDefinitions();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetRepositorySchemaDefinitions", ReplyAction="http://tempuri.org/IBatchService/GetRepositorySchemaDefinitionsResponse")]
        System.IAsyncResult BeginGetRepositorySchemaDefinitions(System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.RepositorySchemaDefinitions EndGetRepositorySchemaDefinitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/CheckRepositoryDefinition", ReplyAction="http://tempuri.org/IBatchService/CheckRepositoryDefinitionResponse")]
        bool CheckRepositoryDefinition(string docClassURL);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/CheckRepositoryDefinition", ReplyAction="http://tempuri.org/IBatchService/CheckRepositoryDefinitionResponse")]
        System.IAsyncResult BeginCheckRepositoryDefinition(string docClassURL, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckRepositoryDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetRepositoryDefinitions", ReplyAction="http://tempuri.org/IBatchService/GetRepositoryDefinitionsResponse")]
        BatCheese.Data.BatchService.RepositoryDefinitions GetRepositoryDefinitions();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetRepositoryDefinitions", ReplyAction="http://tempuri.org/IBatchService/GetRepositoryDefinitionsResponse")]
        System.IAsyncResult BeginGetRepositoryDefinitions(System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.RepositoryDefinitions EndGetRepositoryDefinitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetRepositoryDefinition", ReplyAction="http://tempuri.org/IBatchService/GetRepositoryDefinitionResponse")]
        BatCheese.Data.BatchService.RepositoryDefinition GetRepositoryDefinition(int repositoryId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetRepositoryDefinition", ReplyAction="http://tempuri.org/IBatchService/GetRepositoryDefinitionResponse")]
        System.IAsyncResult BeginGetRepositoryDefinition(int repositoryId, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.RepositoryDefinition EndGetRepositoryDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetRepositoryDefinitionByURL", ReplyAction="http://tempuri.org/IBatchService/GetRepositoryDefinitionByURLResponse")]
        BatCheese.Data.BatchService.RepositoryDefinition GetRepositoryDefinitionByURL(string siteURL);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetRepositoryDefinitionByURL", ReplyAction="http://tempuri.org/IBatchService/GetRepositoryDefinitionByURLResponse")]
        System.IAsyncResult BeginGetRepositoryDefinitionByURL(string siteURL, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.RepositoryDefinition EndGetRepositoryDefinitionByURL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/SaveRepositoryDefinition", ReplyAction="http://tempuri.org/IBatchService/SaveRepositoryDefinitionResponse")]
        void SaveRepositoryDefinition(BatCheese.Data.BatchService.RepositoryDefinition rd);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/SaveRepositoryDefinition", ReplyAction="http://tempuri.org/IBatchService/SaveRepositoryDefinitionResponse")]
        System.IAsyncResult BeginSaveRepositoryDefinition(BatCheese.Data.BatchService.RepositoryDefinition rd, System.AsyncCallback callback, object asyncState);
        
        void EndSaveRepositoryDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/DeleteRepositoryDefinition", ReplyAction="http://tempuri.org/IBatchService/DeleteRepositoryDefinitionResponse")]
        void DeleteRepositoryDefinition(int repositoryId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/DeleteRepositoryDefinition", ReplyAction="http://tempuri.org/IBatchService/DeleteRepositoryDefinitionResponse")]
        System.IAsyncResult BeginDeleteRepositoryDefinition(int repositoryId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteRepositoryDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/DeleteRepositoryDefinitionByURL", ReplyAction="http://tempuri.org/IBatchService/DeleteRepositoryDefinitionByURLResponse")]
        bool DeleteRepositoryDefinitionByURL(string siteURL);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/DeleteRepositoryDefinitionByURL", ReplyAction="http://tempuri.org/IBatchService/DeleteRepositoryDefinitionByURLResponse")]
        System.IAsyncResult BeginDeleteRepositoryDefinitionByURL(string siteURL, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteRepositoryDefinitionByURL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetProcessDefinitions", ReplyAction="http://tempuri.org/IBatchService/GetProcessDefinitionsResponse")]
        BatCheese.Data.BatchService.ProcessDefinitions GetProcessDefinitions();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetProcessDefinitions", ReplyAction="http://tempuri.org/IBatchService/GetProcessDefinitionsResponse")]
        System.IAsyncResult BeginGetProcessDefinitions(System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ProcessDefinitions EndGetProcessDefinitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetProcessDefinition", ReplyAction="http://tempuri.org/IBatchService/GetProcessDefinitionResponse")]
        BatCheese.Data.BatchService.ProcessDefinition GetProcessDefinition(string processName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetProcessDefinition", ReplyAction="http://tempuri.org/IBatchService/GetProcessDefinitionResponse")]
        System.IAsyncResult BeginGetProcessDefinition(string processName, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ProcessDefinition EndGetProcessDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetDefaultActivityDefinitions", ReplyAction="http://tempuri.org/IBatchService/GetDefaultActivityDefinitionsResponse")]
        BatCheese.Data.BatchService.ActivityDefinitions GetDefaultActivityDefinitions();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetDefaultActivityDefinitions", ReplyAction="http://tempuri.org/IBatchService/GetDefaultActivityDefinitionsResponse")]
        System.IAsyncResult BeginGetDefaultActivityDefinitions(System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityDefinitions EndGetDefaultActivityDefinitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetActivityDesigners", ReplyAction="http://tempuri.org/IBatchService/GetActivityDesignersResponse")]
        BatCheese.Data.BatchService.ActivityDesigners GetActivityDesigners();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetActivityDesigners", ReplyAction="http://tempuri.org/IBatchService/GetActivityDesignersResponse")]
        System.IAsyncResult BeginGetActivityDesigners(System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityDesigners EndGetActivityDesigners(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetLocActivityDesigners", ReplyAction="http://tempuri.org/IBatchService/GetLocActivityDesignersResponse")]
        BatCheese.Data.BatchService.ActivityDesigners GetLocActivityDesigners(string culture);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetLocActivityDesigners", ReplyAction="http://tempuri.org/IBatchService/GetLocActivityDesignersResponse")]
        System.IAsyncResult BeginGetLocActivityDesigners(string culture, System.AsyncCallback callback, object asyncState);
        
        BatCheese.Data.BatchService.ActivityDesigners EndGetLocActivityDesigners(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/SaveActivityDesigners", ReplyAction="http://tempuri.org/IBatchService/SaveActivityDesignersResponse")]
        void SaveActivityDesigners(BatCheese.Data.BatchService.ActivityDesigners designers);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/SaveActivityDesigners", ReplyAction="http://tempuri.org/IBatchService/SaveActivityDesignersResponse")]
        System.IAsyncResult BeginSaveActivityDesigners(BatCheese.Data.BatchService.ActivityDesigners designers, System.AsyncCallback callback, object asyncState);
        
        void EndSaveActivityDesigners(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/SaveActivity", ReplyAction="http://tempuri.org/IBatchService/SaveActivityResponse")]
        void SaveActivity(BatCheese.Data.BatchService.ActivityRegister activity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/SaveActivity", ReplyAction="http://tempuri.org/IBatchService/SaveActivityResponse")]
        System.IAsyncResult BeginSaveActivity(BatCheese.Data.BatchService.ActivityRegister activity, System.AsyncCallback callback, object asyncState);
        
        void EndSaveActivity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/DeleteActivityRegistration", ReplyAction="http://tempuri.org/IBatchService/DeleteActivityRegistrationResponse")]
        void DeleteActivityRegistration(int activityId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/DeleteActivityRegistration", ReplyAction="http://tempuri.org/IBatchService/DeleteActivityRegistrationResponse")]
        System.IAsyncResult BeginDeleteActivityRegistration(int activityId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteActivityRegistration(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GenerateUniqueBatchName", ReplyAction="http://tempuri.org/IBatchService/GenerateUniqueBatchNameResponse")]
        string GenerateUniqueBatchName(string scannerID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GenerateUniqueBatchName", ReplyAction="http://tempuri.org/IBatchService/GenerateUniqueBatchNameResponse")]
        System.IAsyncResult BeginGenerateUniqueBatchName(string scannerID, System.AsyncCallback callback, object asyncState);
        
        string EndGenerateUniqueBatchName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/IsBatchLockedOrErrored", ReplyAction="http://tempuri.org/IBatchService/IsBatchLockedOrErroredResponse")]
        bool IsBatchLockedOrErrored(string batchname, string cachepath, string activityToProcessId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/IsBatchLockedOrErrored", ReplyAction="http://tempuri.org/IBatchService/IsBatchLockedOrErroredResponse")]
        System.IAsyncResult BeginIsBatchLockedOrErrored(string batchname, string cachepath, string activityToProcessId, System.AsyncCallback callback, object asyncState);
        
        bool EndIsBatchLockedOrErrored(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/AddClientCache", ReplyAction="http://tempuri.org/IBatchService/AddClientCacheResponse")]
        void AddClientCache(string cachePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/AddClientCache", ReplyAction="http://tempuri.org/IBatchService/AddClientCacheResponse")]
        System.IAsyncResult BeginAddClientCache(string cachePath, System.AsyncCallback callback, object asyncState);
        
        void EndAddClientCache(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/RemoveClientCache", ReplyAction="http://tempuri.org/IBatchService/RemoveClientCacheResponse")]
        void RemoveClientCache(string cachePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/RemoveClientCache", ReplyAction="http://tempuri.org/IBatchService/RemoveClientCacheResponse")]
        System.IAsyncResult BeginRemoveClientCache(string cachePath, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveClientCache(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetClientCache", ReplyAction="http://tempuri.org/IBatchService/GetClientCacheResponse")]
        System.Collections.Generic.List<string> GetClientCache();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetClientCache", ReplyAction="http://tempuri.org/IBatchService/GetClientCacheResponse")]
        System.IAsyncResult BeginGetClientCache(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndGetClientCache(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateBatchPaths", ReplyAction="http://tempuri.org/IBatchService/UpdateBatchPathsResponse")]
        void UpdateBatchPaths(string batchName, string newCachePath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateBatchPaths", ReplyAction="http://tempuri.org/IBatchService/UpdateBatchPathsResponse")]
        System.IAsyncResult BeginUpdateBatchPaths(string batchName, string newCachePath, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateBatchPaths(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/IncrementRetry", ReplyAction="http://tempuri.org/IBatchService/IncrementRetryResponse")]
        bool IncrementRetry(long activityToProcessId, int currentRetryCount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/IncrementRetry", ReplyAction="http://tempuri.org/IBatchService/IncrementRetryResponse")]
        System.IAsyncResult BeginIncrementRetry(long activityToProcessId, int currentRetryCount, System.AsyncCallback callback, object asyncState);
        
        bool EndIncrementRetry(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/ClearRetries", ReplyAction="http://tempuri.org/IBatchService/ClearRetriesResponse")]
        bool ClearRetries(long activityToProcessId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/ClearRetries", ReplyAction="http://tempuri.org/IBatchService/ClearRetriesResponse")]
        System.IAsyncResult BeginClearRetries(long activityToProcessId, System.AsyncCallback callback, object asyncState);
        
        bool EndClearRetries(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/SynchronizeBatchPriorityWithDatabase", ReplyAction="http://tempuri.org/IBatchService/SynchronizeBatchPriorityWithDatabaseResponse")]
        void SynchronizeBatchPriorityWithDatabase(string batchname, string cachepath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/SynchronizeBatchPriorityWithDatabase", ReplyAction="http://tempuri.org/IBatchService/SynchronizeBatchPriorityWithDatabaseResponse")]
        System.IAsyncResult BeginSynchronizeBatchPriorityWithDatabase(string batchname, string cachepath, System.AsyncCallback callback, object asyncState);
        
        void EndSynchronizeBatchPriorityWithDatabase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateInProcessPriority", ReplyAction="http://tempuri.org/IBatchService/UpdateInProcessPriorityResponse")]
        int UpdateInProcessPriority(string processName, int priority);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateInProcessPriority", ReplyAction="http://tempuri.org/IBatchService/UpdateInProcessPriorityResponse")]
        System.IAsyncResult BeginUpdateInProcessPriority(string processName, int priority, System.AsyncCallback callback, object asyncState);
        
        int EndUpdateInProcessPriority(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/SetProcessPriority", ReplyAction="http://tempuri.org/IBatchService/SetProcessPriorityResponse")]
        bool SetProcessPriority(string processName, int priority);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/SetProcessPriority", ReplyAction="http://tempuri.org/IBatchService/SetProcessPriorityResponse")]
        System.IAsyncResult BeginSetProcessPriority(string processName, int priority, System.AsyncCallback callback, object asyncState);
        
        bool EndSetProcessPriority(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/UpdateBatchPriority", ReplyAction="http://tempuri.org/IBatchService/UpdateBatchPriorityResponse")]
        bool UpdateBatchPriority(string batchName, int priority);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/UpdateBatchPriority", ReplyAction="http://tempuri.org/IBatchService/UpdateBatchPriorityResponse")]
        System.IAsyncResult BeginUpdateBatchPriority(string batchName, int priority, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateBatchPriority(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/CreateActivitiesToProcess", ReplyAction="http://tempuri.org/IBatchService/CreateActivitiesToProcessResponse")]
        bool CreateActivitiesToProcess(string batchName, string cachePath, string processName, System.Nullable<int> priorityOverride);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/CreateActivitiesToProcess", ReplyAction="http://tempuri.org/IBatchService/CreateActivitiesToProcessResponse")]
        System.IAsyncResult BeginCreateActivitiesToProcess(string batchName, string cachePath, string processName, System.Nullable<int> priorityOverride, System.AsyncCallback callback, object asyncState);
        
        bool EndCreateActivitiesToProcess(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetAllProcessNameMappings", ReplyAction="http://tempuri.org/IBatchService/GetAllProcessNameMappingsResponse")]
        System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> GetAllProcessNameMappings();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetAllProcessNameMappings", ReplyAction="http://tempuri.org/IBatchService/GetAllProcessNameMappingsResponse")]
        System.IAsyncResult BeginGetAllProcessNameMappings(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> EndGetAllProcessNameMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBatchService/GetProcessNameMappings", ReplyAction="http://tempuri.org/IBatchService/GetProcessNameMappingsResponse")]
        System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> GetProcessNameMappings(System.Collections.Generic.List<string> documentClassNames);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBatchService/GetProcessNameMappings", ReplyAction="http://tempuri.org/IBatchService/GetProcessNameMappingsResponse")]
        System.IAsyncResult BeginGetProcessNameMappings(System.Collections.Generic.List<string> documentClassNames, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> EndGetProcessNameMappings(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBatchServiceChannel : BatCheese.Data.BatchService.IBatchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DynamicallyGenerateCachePathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DynamicallyGenerateCachePathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetQueueCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetQueueCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.QueueCollection Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.QueueCollection)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsProcessByDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsProcessByDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConfigurationItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfigurationItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBatchStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBatchStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.BatchState Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.BatchState)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueryLockedBatchesByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public QueryLockedBatchesByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.LockedBatches Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.LockedBatches)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertActivityToProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertActivityToProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateActivitiesToProcessStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateActivitiesToProcessStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateLockedActivitiesToProcessMachineNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateLockedActivitiesToProcessMachineNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateLockedActivitiesToProcessMachineNameByBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateLockedActivitiesToProcessMachineNameByBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivitiesToProcess)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActivitiesToProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActivitiesToProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivitiesToProcess)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActivityToProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActivityToProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityToProcess Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityToProcess)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActivityToProcessWithLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActivityToProcessWithLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityToProcess Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityToProcess)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMultipleActivityToProcessWithLockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMultipleActivityToProcessWithLockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityToProcess> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityToProcess>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMultipleActivityToProcessWithLockByBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMultipleActivityToProcessWithLockByBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ActivitiesToProcess> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<BatCheese.Data.BatchService.ActivitiesToProcess>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetManualActivitiesToProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetManualActivitiesToProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivitiesToProcess)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetManualActivitiesByProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetManualActivitiesByProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivitiesToProcess)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetManualActivityInProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetManualActivityInProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityToProcess Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityToProcess)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActivitiesForBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActivitiesForBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivitiesToProcess)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCompletedBatchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompletedBatchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivitiesToProcess)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BatchExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BatchExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BatchInManualActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BatchInManualActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityRegisters Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityRegisters)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityRegisters Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityRegisters)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRegisteredActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRegisteredActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityRegisters Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityRegisters)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRegisteredActiveActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRegisteredActiveActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityRegisters Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityRegisters)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActivityHoursCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActivityHoursCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityHours Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityHours)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRepositorySchemaDefinitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRepositorySchemaDefinitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.RepositorySchemaDefinitions Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.RepositorySchemaDefinitions)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckRepositoryDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckRepositoryDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRepositoryDefinitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRepositoryDefinitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.RepositoryDefinitions Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.RepositoryDefinitions)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRepositoryDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRepositoryDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.RepositoryDefinition Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.RepositoryDefinition)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRepositoryDefinitionByURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRepositoryDefinitionByURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.RepositoryDefinition Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.RepositoryDefinition)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteRepositoryDefinitionByURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteRepositoryDefinitionByURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProcessDefinitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProcessDefinitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ProcessDefinitions Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ProcessDefinitions)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProcessDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProcessDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ProcessDefinition Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ProcessDefinition)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDefaultActivityDefinitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDefaultActivityDefinitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityDefinitions Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityDefinitions)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetActivityDesignersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetActivityDesignersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityDesigners Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityDesigners)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLocActivityDesignersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLocActivityDesignersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BatCheese.Data.BatchService.ActivityDesigners Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BatCheese.Data.BatchService.ActivityDesigners)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenerateUniqueBatchNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenerateUniqueBatchNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsBatchLockedOrErroredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsBatchLockedOrErroredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IncrementRetryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IncrementRetryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClearRetriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClearRetriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateInProcessPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateInProcessPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetProcessPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetProcessPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateBatchPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateBatchPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateActivitiesToProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateActivitiesToProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllProcessNameMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllProcessNameMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProcessNameMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProcessNameMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BatchServiceClient : System.ServiceModel.ClientBase<BatCheese.Data.BatchService.IBatchService>, BatCheese.Data.BatchService.IBatchService {
        
        private BeginOperationDelegate onBeginAddQueueDelegate;
        
        private EndOperationDelegate onEndAddQueueDelegate;
        
        private System.Threading.SendOrPostCallback onAddQueueCompletedDelegate;
        
        private BeginOperationDelegate onBeginDynamicallyGenerateCachePathDelegate;
        
        private EndOperationDelegate onEndDynamicallyGenerateCachePathDelegate;
        
        private System.Threading.SendOrPostCallback onDynamicallyGenerateCachePathCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetLocksDelegate;
        
        private EndOperationDelegate onEndResetLocksDelegate;
        
        private System.Threading.SendOrPostCallback onResetLocksCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckLockDelegate;
        
        private EndOperationDelegate onEndCheckLockDelegate;
        
        private System.Threading.SendOrPostCallback onCheckLockCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetQueueCollectionDelegate;
        
        private EndOperationDelegate onEndGetQueueCollectionDelegate;
        
        private System.Threading.SendOrPostCallback onGetQueueCollectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsProcessByDocumentDelegate;
        
        private EndOperationDelegate onEndIsProcessByDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onIsProcessByDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConfigurationItemDelegate;
        
        private EndOperationDelegate onEndGetConfigurationItemDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfigurationItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetConfigurationItemDelegate;
        
        private EndOperationDelegate onEndSetConfigurationItemDelegate;
        
        private System.Threading.SendOrPostCallback onSetConfigurationItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertConfigurationItemDelegate;
        
        private EndOperationDelegate onEndInsertConfigurationItemDelegate;
        
        private System.Threading.SendOrPostCallback onInsertConfigurationItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBatchStateDelegate;
        
        private EndOperationDelegate onEndGetBatchStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetBatchStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertBatchLockDelegate;
        
        private EndOperationDelegate onEndInsertBatchLockDelegate;
        
        private System.Threading.SendOrPostCallback onInsertBatchLockCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertBatchLockByUserNameDelegate;
        
        private EndOperationDelegate onEndInsertBatchLockByUserNameDelegate;
        
        private System.Threading.SendOrPostCallback onInsertBatchLockByUserNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginQueryLockedBatchesByUserDelegate;
        
        private EndOperationDelegate onEndQueryLockedBatchesByUserDelegate;
        
        private System.Threading.SendOrPostCallback onQueryLockedBatchesByUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteBatchLockDelegate;
        
        private EndOperationDelegate onEndDeleteBatchLockDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteBatchLockCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteQueueDelegate;
        
        private EndOperationDelegate onEndDeleteQueueDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteQueueCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteBatchDelegate;
        
        private EndOperationDelegate onEndDeleteBatchDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteBatchCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateQueueDelegate;
        
        private EndOperationDelegate onEndUpdateQueueDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateQueueCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateQueueCachePathDelegate;
        
        private EndOperationDelegate onEndUpdateQueueCachePathDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateQueueCachePathCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertProcessDelegate;
        
        private EndOperationDelegate onEndInsertProcessDelegate;
        
        private System.Threading.SendOrPostCallback onInsertProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertActivityToProcessDelegate;
        
        private EndOperationDelegate onEndInsertActivityToProcessDelegate;
        
        private System.Threading.SendOrPostCallback onInsertActivityToProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteActivitiesToProcessDelegate;
        
        private EndOperationDelegate onEndDeleteActivitiesToProcessDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteActivitiesToProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateActivityToProcessDelegate;
        
        private EndOperationDelegate onEndUpdateActivityToProcessDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateActivityToProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateActivitiesToProcessErrorDelegate;
        
        private EndOperationDelegate onEndUpdateActivitiesToProcessErrorDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateActivitiesToProcessErrorCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateActivitiesToProcessErrorByBatchDelegate;
        
        private EndOperationDelegate onEndUpdateActivitiesToProcessErrorByBatchDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateActivitiesToProcessErrorByBatchCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateBatchErrorStatusDelegate;
        
        private EndOperationDelegate onEndUpdateBatchErrorStatusDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateBatchErrorStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateActivitiesToProcessStartDelegate;
        
        private EndOperationDelegate onEndUpdateActivitiesToProcessStartDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateActivitiesToProcessStartCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateLockedActivitiesToProcessMachineNameDelegate;
        
        private EndOperationDelegate onEndUpdateLockedActivitiesToProcessMachineNameDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateLockedActivitiesToProcessMachineNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateLockedActivitiesToProcessMachineNameByBatchDelegate;
        
        private EndOperationDelegate onEndUpdateLockedActivitiesToProcessMachineNameByBatchDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateLockedActivitiesToProcessMachineNameByBatchCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateActivitiesToProcessCompleteDelegate;
        
        private EndOperationDelegate onEndUpdateActivitiesToProcessCompleteDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateActivitiesToProcessCompleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateBatchCompleteStatusDelegate;
        
        private EndOperationDelegate onEndUpdateBatchCompleteStatusDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateBatchCompleteStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetActivityToProcessLocksDelegate;
        
        private EndOperationDelegate onEndResetActivityToProcessLocksDelegate;
        
        private System.Threading.SendOrPostCallback onResetActivityToProcessLocksCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnlockActivityToProcessDelegate;
        
        private EndOperationDelegate onEndUnlockActivityToProcessDelegate;
        
        private System.Threading.SendOrPostCallback onUnlockActivityToProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnlockActivityToProcessByBatchDelegate;
        
        private EndOperationDelegate onEndUnlockActivityToProcessByBatchDelegate;
        
        private System.Threading.SendOrPostCallback onUnlockActivityToProcessByBatchCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnlockActivityToProcessByBatchActivityNumberDelegate;
        
        private EndOperationDelegate onEndUnlockActivityToProcessByBatchActivityNumberDelegate;
        
        private System.Threading.SendOrPostCallback onUnlockActivityToProcessByBatchActivityNumberCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllActivitiesDelegate;
        
        private EndOperationDelegate onEndGetAllActivitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllActivitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetActivitiesToProcessDelegate;
        
        private EndOperationDelegate onEndGetActivitiesToProcessDelegate;
        
        private System.Threading.SendOrPostCallback onGetActivitiesToProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetActivityToProcessDelegate;
        
        private EndOperationDelegate onEndGetActivityToProcessDelegate;
        
        private System.Threading.SendOrPostCallback onGetActivityToProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetActivityToProcessWithLockDelegate;
        
        private EndOperationDelegate onEndGetActivityToProcessWithLockDelegate;
        
        private System.Threading.SendOrPostCallback onGetActivityToProcessWithLockCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMultipleActivityToProcessWithLockDelegate;
        
        private EndOperationDelegate onEndGetMultipleActivityToProcessWithLockDelegate;
        
        private System.Threading.SendOrPostCallback onGetMultipleActivityToProcessWithLockCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMultipleActivityToProcessWithLockByBatchDelegate;
        
        private EndOperationDelegate onEndGetMultipleActivityToProcessWithLockByBatchDelegate;
        
        private System.Threading.SendOrPostCallback onGetMultipleActivityToProcessWithLockByBatchCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetManualActivitiesToProcessDelegate;
        
        private EndOperationDelegate onEndGetManualActivitiesToProcessDelegate;
        
        private System.Threading.SendOrPostCallback onGetManualActivitiesToProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetManualActivitiesByProcessDelegate;
        
        private EndOperationDelegate onEndGetManualActivitiesByProcessDelegate;
        
        private System.Threading.SendOrPostCallback onGetManualActivitiesByProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetManualActivityInProcessDelegate;
        
        private EndOperationDelegate onEndGetManualActivityInProcessDelegate;
        
        private System.Threading.SendOrPostCallback onGetManualActivityInProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetActivitiesForBatchDelegate;
        
        private EndOperationDelegate onEndGetActivitiesForBatchDelegate;
        
        private System.Threading.SendOrPostCallback onGetActivitiesForBatchCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCompletedBatchesDelegate;
        
        private EndOperationDelegate onEndGetCompletedBatchesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompletedBatchesCompletedDelegate;
        
        private BeginOperationDelegate onBeginBatchExistsDelegate;
        
        private EndOperationDelegate onEndBatchExistsDelegate;
        
        private System.Threading.SendOrPostCallback onBatchExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginBatchInManualActivityDelegate;
        
        private EndOperationDelegate onEndBatchInManualActivityDelegate;
        
        private System.Threading.SendOrPostCallback onBatchInManualActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetActivitiesDelegate;
        
        private EndOperationDelegate onEndGetActivitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetActivitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocActivitiesDelegate;
        
        private EndOperationDelegate onEndGetLocActivitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocActivitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRegisteredActivitiesDelegate;
        
        private EndOperationDelegate onEndGetRegisteredActivitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetRegisteredActivitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRegisteredActiveActivitiesDelegate;
        
        private EndOperationDelegate onEndGetRegisteredActiveActivitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetRegisteredActiveActivitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetActivityHoursDelegate;
        
        private EndOperationDelegate onEndGetActivityHoursDelegate;
        
        private System.Threading.SendOrPostCallback onGetActivityHoursCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRepositorySchemaDefinitionsDelegate;
        
        private EndOperationDelegate onEndGetRepositorySchemaDefinitionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRepositorySchemaDefinitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckRepositoryDefinitionDelegate;
        
        private EndOperationDelegate onEndCheckRepositoryDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onCheckRepositoryDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRepositoryDefinitionsDelegate;
        
        private EndOperationDelegate onEndGetRepositoryDefinitionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRepositoryDefinitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRepositoryDefinitionDelegate;
        
        private EndOperationDelegate onEndGetRepositoryDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onGetRepositoryDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRepositoryDefinitionByURLDelegate;
        
        private EndOperationDelegate onEndGetRepositoryDefinitionByURLDelegate;
        
        private System.Threading.SendOrPostCallback onGetRepositoryDefinitionByURLCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveRepositoryDefinitionDelegate;
        
        private EndOperationDelegate onEndSaveRepositoryDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onSaveRepositoryDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRepositoryDefinitionDelegate;
        
        private EndOperationDelegate onEndDeleteRepositoryDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRepositoryDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRepositoryDefinitionByURLDelegate;
        
        private EndOperationDelegate onEndDeleteRepositoryDefinitionByURLDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRepositoryDefinitionByURLCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProcessDefinitionsDelegate;
        
        private EndOperationDelegate onEndGetProcessDefinitionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetProcessDefinitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProcessDefinitionDelegate;
        
        private EndOperationDelegate onEndGetProcessDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onGetProcessDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDefaultActivityDefinitionsDelegate;
        
        private EndOperationDelegate onEndGetDefaultActivityDefinitionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetDefaultActivityDefinitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetActivityDesignersDelegate;
        
        private EndOperationDelegate onEndGetActivityDesignersDelegate;
        
        private System.Threading.SendOrPostCallback onGetActivityDesignersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLocActivityDesignersDelegate;
        
        private EndOperationDelegate onEndGetLocActivityDesignersDelegate;
        
        private System.Threading.SendOrPostCallback onGetLocActivityDesignersCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveActivityDesignersDelegate;
        
        private EndOperationDelegate onEndSaveActivityDesignersDelegate;
        
        private System.Threading.SendOrPostCallback onSaveActivityDesignersCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveActivityDelegate;
        
        private EndOperationDelegate onEndSaveActivityDelegate;
        
        private System.Threading.SendOrPostCallback onSaveActivityCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteActivityRegistrationDelegate;
        
        private EndOperationDelegate onEndDeleteActivityRegistrationDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteActivityRegistrationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenerateUniqueBatchNameDelegate;
        
        private EndOperationDelegate onEndGenerateUniqueBatchNameDelegate;
        
        private System.Threading.SendOrPostCallback onGenerateUniqueBatchNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsBatchLockedOrErroredDelegate;
        
        private EndOperationDelegate onEndIsBatchLockedOrErroredDelegate;
        
        private System.Threading.SendOrPostCallback onIsBatchLockedOrErroredCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddClientCacheDelegate;
        
        private EndOperationDelegate onEndAddClientCacheDelegate;
        
        private System.Threading.SendOrPostCallback onAddClientCacheCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveClientCacheDelegate;
        
        private EndOperationDelegate onEndRemoveClientCacheDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveClientCacheCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetClientCacheDelegate;
        
        private EndOperationDelegate onEndGetClientCacheDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientCacheCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateBatchPathsDelegate;
        
        private EndOperationDelegate onEndUpdateBatchPathsDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateBatchPathsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncrementRetryDelegate;
        
        private EndOperationDelegate onEndIncrementRetryDelegate;
        
        private System.Threading.SendOrPostCallback onIncrementRetryCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearRetriesDelegate;
        
        private EndOperationDelegate onEndClearRetriesDelegate;
        
        private System.Threading.SendOrPostCallback onClearRetriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSynchronizeBatchPriorityWithDatabaseDelegate;
        
        private EndOperationDelegate onEndSynchronizeBatchPriorityWithDatabaseDelegate;
        
        private System.Threading.SendOrPostCallback onSynchronizeBatchPriorityWithDatabaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateInProcessPriorityDelegate;
        
        private EndOperationDelegate onEndUpdateInProcessPriorityDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateInProcessPriorityCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetProcessPriorityDelegate;
        
        private EndOperationDelegate onEndSetProcessPriorityDelegate;
        
        private System.Threading.SendOrPostCallback onSetProcessPriorityCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateBatchPriorityDelegate;
        
        private EndOperationDelegate onEndUpdateBatchPriorityDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateBatchPriorityCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateActivitiesToProcessDelegate;
        
        private EndOperationDelegate onEndCreateActivitiesToProcessDelegate;
        
        private System.Threading.SendOrPostCallback onCreateActivitiesToProcessCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllProcessNameMappingsDelegate;
        
        private EndOperationDelegate onEndGetAllProcessNameMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllProcessNameMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProcessNameMappingsDelegate;
        
        private EndOperationDelegate onEndGetProcessNameMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetProcessNameMappingsCompletedDelegate;
        
        public BatchServiceClient() {
        }
        
        public BatchServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BatchServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BatchServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BatchServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddQueueCompleted;
        
        public event System.EventHandler<DynamicallyGenerateCachePathCompletedEventArgs> DynamicallyGenerateCachePathCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResetLocksCompleted;
        
        public event System.EventHandler<CheckLockCompletedEventArgs> CheckLockCompleted;
        
        public event System.EventHandler<GetQueueCollectionCompletedEventArgs> GetQueueCollectionCompleted;
        
        public event System.EventHandler<IsProcessByDocumentCompletedEventArgs> IsProcessByDocumentCompleted;
        
        public event System.EventHandler<GetConfigurationItemCompletedEventArgs> GetConfigurationItemCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetConfigurationItemCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertConfigurationItemCompleted;
        
        public event System.EventHandler<GetBatchStateCompletedEventArgs> GetBatchStateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertBatchLockCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InsertBatchLockByUserNameCompleted;
        
        public event System.EventHandler<QueryLockedBatchesByUserCompletedEventArgs> QueryLockedBatchesByUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteBatchLockCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteQueueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteBatchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateQueueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateQueueCachePathCompleted;
        
        public event System.EventHandler<InsertProcessCompletedEventArgs> InsertProcessCompleted;
        
        public event System.EventHandler<InsertActivityToProcessCompletedEventArgs> InsertActivityToProcessCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteActivitiesToProcessCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateActivityToProcessCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateActivitiesToProcessErrorCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateActivitiesToProcessErrorByBatchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateBatchErrorStatusCompleted;
        
        public event System.EventHandler<UpdateActivitiesToProcessStartCompletedEventArgs> UpdateActivitiesToProcessStartCompleted;
        
        public event System.EventHandler<UpdateLockedActivitiesToProcessMachineNameCompletedEventArgs> UpdateLockedActivitiesToProcessMachineNameCompleted;
        
        public event System.EventHandler<UpdateLockedActivitiesToProcessMachineNameByBatchCompletedEventArgs> UpdateLockedActivitiesToProcessMachineNameByBatchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateActivitiesToProcessCompleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateBatchCompleteStatusCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ResetActivityToProcessLocksCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnlockActivityToProcessCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnlockActivityToProcessByBatchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnlockActivityToProcessByBatchActivityNumberCompleted;
        
        public event System.EventHandler<GetAllActivitiesCompletedEventArgs> GetAllActivitiesCompleted;
        
        public event System.EventHandler<GetActivitiesToProcessCompletedEventArgs> GetActivitiesToProcessCompleted;
        
        public event System.EventHandler<GetActivityToProcessCompletedEventArgs> GetActivityToProcessCompleted;
        
        public event System.EventHandler<GetActivityToProcessWithLockCompletedEventArgs> GetActivityToProcessWithLockCompleted;
        
        public event System.EventHandler<GetMultipleActivityToProcessWithLockCompletedEventArgs> GetMultipleActivityToProcessWithLockCompleted;
        
        public event System.EventHandler<GetMultipleActivityToProcessWithLockByBatchCompletedEventArgs> GetMultipleActivityToProcessWithLockByBatchCompleted;
        
        public event System.EventHandler<GetManualActivitiesToProcessCompletedEventArgs> GetManualActivitiesToProcessCompleted;
        
        public event System.EventHandler<GetManualActivitiesByProcessCompletedEventArgs> GetManualActivitiesByProcessCompleted;
        
        public event System.EventHandler<GetManualActivityInProcessCompletedEventArgs> GetManualActivityInProcessCompleted;
        
        public event System.EventHandler<GetActivitiesForBatchCompletedEventArgs> GetActivitiesForBatchCompleted;
        
        public event System.EventHandler<GetCompletedBatchesCompletedEventArgs> GetCompletedBatchesCompleted;
        
        public event System.EventHandler<BatchExistsCompletedEventArgs> BatchExistsCompleted;
        
        public event System.EventHandler<BatchInManualActivityCompletedEventArgs> BatchInManualActivityCompleted;
        
        public event System.EventHandler<GetActivitiesCompletedEventArgs> GetActivitiesCompleted;
        
        public event System.EventHandler<GetLocActivitiesCompletedEventArgs> GetLocActivitiesCompleted;
        
        public event System.EventHandler<GetRegisteredActivitiesCompletedEventArgs> GetRegisteredActivitiesCompleted;
        
        public event System.EventHandler<GetRegisteredActiveActivitiesCompletedEventArgs> GetRegisteredActiveActivitiesCompleted;
        
        public event System.EventHandler<GetActivityHoursCompletedEventArgs> GetActivityHoursCompleted;
        
        public event System.EventHandler<GetRepositorySchemaDefinitionsCompletedEventArgs> GetRepositorySchemaDefinitionsCompleted;
        
        public event System.EventHandler<CheckRepositoryDefinitionCompletedEventArgs> CheckRepositoryDefinitionCompleted;
        
        public event System.EventHandler<GetRepositoryDefinitionsCompletedEventArgs> GetRepositoryDefinitionsCompleted;
        
        public event System.EventHandler<GetRepositoryDefinitionCompletedEventArgs> GetRepositoryDefinitionCompleted;
        
        public event System.EventHandler<GetRepositoryDefinitionByURLCompletedEventArgs> GetRepositoryDefinitionByURLCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveRepositoryDefinitionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteRepositoryDefinitionCompleted;
        
        public event System.EventHandler<DeleteRepositoryDefinitionByURLCompletedEventArgs> DeleteRepositoryDefinitionByURLCompleted;
        
        public event System.EventHandler<GetProcessDefinitionsCompletedEventArgs> GetProcessDefinitionsCompleted;
        
        public event System.EventHandler<GetProcessDefinitionCompletedEventArgs> GetProcessDefinitionCompleted;
        
        public event System.EventHandler<GetDefaultActivityDefinitionsCompletedEventArgs> GetDefaultActivityDefinitionsCompleted;
        
        public event System.EventHandler<GetActivityDesignersCompletedEventArgs> GetActivityDesignersCompleted;
        
        public event System.EventHandler<GetLocActivityDesignersCompletedEventArgs> GetLocActivityDesignersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveActivityDesignersCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveActivityCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteActivityRegistrationCompleted;
        
        public event System.EventHandler<GenerateUniqueBatchNameCompletedEventArgs> GenerateUniqueBatchNameCompleted;
        
        public event System.EventHandler<IsBatchLockedOrErroredCompletedEventArgs> IsBatchLockedOrErroredCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddClientCacheCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveClientCacheCompleted;
        
        public event System.EventHandler<GetClientCacheCompletedEventArgs> GetClientCacheCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateBatchPathsCompleted;
        
        public event System.EventHandler<IncrementRetryCompletedEventArgs> IncrementRetryCompleted;
        
        public event System.EventHandler<ClearRetriesCompletedEventArgs> ClearRetriesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SynchronizeBatchPriorityWithDatabaseCompleted;
        
        public event System.EventHandler<UpdateInProcessPriorityCompletedEventArgs> UpdateInProcessPriorityCompleted;
        
        public event System.EventHandler<SetProcessPriorityCompletedEventArgs> SetProcessPriorityCompleted;
        
        public event System.EventHandler<UpdateBatchPriorityCompletedEventArgs> UpdateBatchPriorityCompleted;
        
        public event System.EventHandler<CreateActivitiesToProcessCompletedEventArgs> CreateActivitiesToProcessCompleted;
        
        public event System.EventHandler<GetAllProcessNameMappingsCompletedEventArgs> GetAllProcessNameMappingsCompleted;
        
        public event System.EventHandler<GetProcessNameMappingsCompletedEventArgs> GetProcessNameMappingsCompleted;
        
        public void AddQueue(string batchname, string cachepath, int activity, string error) {
            base.Channel.AddQueue(batchname, cachepath, activity, error);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddQueue(string batchname, string cachepath, int activity, string error, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddQueue(batchname, cachepath, activity, error, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddQueue(System.IAsyncResult result) {
            base.Channel.EndAddQueue(result);
        }
        
        private System.IAsyncResult OnBeginAddQueue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            int activity = ((int)(inValues[2]));
            string error = ((string)(inValues[3]));
            return this.BeginAddQueue(batchname, cachepath, activity, error, callback, asyncState);
        }
        
        private object[] OnEndAddQueue(System.IAsyncResult result) {
            this.EndAddQueue(result);
            return null;
        }
        
        private void OnAddQueueCompleted(object state) {
            if ((this.AddQueueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddQueueAsync(string batchname, string cachepath, int activity, string error) {
            this.AddQueueAsync(batchname, cachepath, activity, error, null);
        }
        
        public void AddQueueAsync(string batchname, string cachepath, int activity, string error, object userState) {
            if ((this.onBeginAddQueueDelegate == null)) {
                this.onBeginAddQueueDelegate = new BeginOperationDelegate(this.OnBeginAddQueue);
            }
            if ((this.onEndAddQueueDelegate == null)) {
                this.onEndAddQueueDelegate = new EndOperationDelegate(this.OnEndAddQueue);
            }
            if ((this.onAddQueueCompletedDelegate == null)) {
                this.onAddQueueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddQueueCompleted);
            }
            base.InvokeAsync(this.onBeginAddQueueDelegate, new object[] {
                        batchname,
                        cachepath,
                        activity,
                        error}, this.onEndAddQueueDelegate, this.onAddQueueCompletedDelegate, userState);
        }
        
        public int DynamicallyGenerateCachePath() {
            return base.Channel.DynamicallyGenerateCachePath();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDynamicallyGenerateCachePath(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDynamicallyGenerateCachePath(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndDynamicallyGenerateCachePath(System.IAsyncResult result) {
            return base.Channel.EndDynamicallyGenerateCachePath(result);
        }
        
        private System.IAsyncResult OnBeginDynamicallyGenerateCachePath(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDynamicallyGenerateCachePath(callback, asyncState);
        }
        
        private object[] OnEndDynamicallyGenerateCachePath(System.IAsyncResult result) {
            int retVal = this.EndDynamicallyGenerateCachePath(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDynamicallyGenerateCachePathCompleted(object state) {
            if ((this.DynamicallyGenerateCachePathCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DynamicallyGenerateCachePathCompleted(this, new DynamicallyGenerateCachePathCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DynamicallyGenerateCachePathAsync() {
            this.DynamicallyGenerateCachePathAsync(null);
        }
        
        public void DynamicallyGenerateCachePathAsync(object userState) {
            if ((this.onBeginDynamicallyGenerateCachePathDelegate == null)) {
                this.onBeginDynamicallyGenerateCachePathDelegate = new BeginOperationDelegate(this.OnBeginDynamicallyGenerateCachePath);
            }
            if ((this.onEndDynamicallyGenerateCachePathDelegate == null)) {
                this.onEndDynamicallyGenerateCachePathDelegate = new EndOperationDelegate(this.OnEndDynamicallyGenerateCachePath);
            }
            if ((this.onDynamicallyGenerateCachePathCompletedDelegate == null)) {
                this.onDynamicallyGenerateCachePathCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDynamicallyGenerateCachePathCompleted);
            }
            base.InvokeAsync(this.onBeginDynamicallyGenerateCachePathDelegate, null, this.onEndDynamicallyGenerateCachePathDelegate, this.onDynamicallyGenerateCachePathCompletedDelegate, userState);
        }
        
        public void ResetLocks(string machineName) {
            base.Channel.ResetLocks(machineName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetLocks(string machineName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetLocks(machineName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndResetLocks(System.IAsyncResult result) {
            base.Channel.EndResetLocks(result);
        }
        
        private System.IAsyncResult OnBeginResetLocks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string machineName = ((string)(inValues[0]));
            return this.BeginResetLocks(machineName, callback, asyncState);
        }
        
        private object[] OnEndResetLocks(System.IAsyncResult result) {
            this.EndResetLocks(result);
            return null;
        }
        
        private void OnResetLocksCompleted(object state) {
            if ((this.ResetLocksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetLocksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetLocksAsync(string machineName) {
            this.ResetLocksAsync(machineName, null);
        }
        
        public void ResetLocksAsync(string machineName, object userState) {
            if ((this.onBeginResetLocksDelegate == null)) {
                this.onBeginResetLocksDelegate = new BeginOperationDelegate(this.OnBeginResetLocks);
            }
            if ((this.onEndResetLocksDelegate == null)) {
                this.onEndResetLocksDelegate = new EndOperationDelegate(this.OnEndResetLocks);
            }
            if ((this.onResetLocksCompletedDelegate == null)) {
                this.onResetLocksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetLocksCompleted);
            }
            base.InvokeAsync(this.onBeginResetLocksDelegate, new object[] {
                        machineName}, this.onEndResetLocksDelegate, this.onResetLocksCompletedDelegate, userState);
        }
        
        public bool CheckLock(string batchName, string cachePath) {
            return base.Channel.CheckLock(batchName, cachePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckLock(string batchName, string cachePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckLock(batchName, cachePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckLock(System.IAsyncResult result) {
            return base.Channel.EndCheckLock(result);
        }
        
        private System.IAsyncResult OnBeginCheckLock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchName = ((string)(inValues[0]));
            string cachePath = ((string)(inValues[1]));
            return this.BeginCheckLock(batchName, cachePath, callback, asyncState);
        }
        
        private object[] OnEndCheckLock(System.IAsyncResult result) {
            bool retVal = this.EndCheckLock(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckLockCompleted(object state) {
            if ((this.CheckLockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckLockCompleted(this, new CheckLockCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckLockAsync(string batchName, string cachePath) {
            this.CheckLockAsync(batchName, cachePath, null);
        }
        
        public void CheckLockAsync(string batchName, string cachePath, object userState) {
            if ((this.onBeginCheckLockDelegate == null)) {
                this.onBeginCheckLockDelegate = new BeginOperationDelegate(this.OnBeginCheckLock);
            }
            if ((this.onEndCheckLockDelegate == null)) {
                this.onEndCheckLockDelegate = new EndOperationDelegate(this.OnEndCheckLock);
            }
            if ((this.onCheckLockCompletedDelegate == null)) {
                this.onCheckLockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckLockCompleted);
            }
            base.InvokeAsync(this.onBeginCheckLockDelegate, new object[] {
                        batchName,
                        cachePath}, this.onEndCheckLockDelegate, this.onCheckLockCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.QueueCollection GetQueueCollection() {
            return base.Channel.GetQueueCollection();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetQueueCollection(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetQueueCollection(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.QueueCollection EndGetQueueCollection(System.IAsyncResult result) {
            return base.Channel.EndGetQueueCollection(result);
        }
        
        private System.IAsyncResult OnBeginGetQueueCollection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetQueueCollection(callback, asyncState);
        }
        
        private object[] OnEndGetQueueCollection(System.IAsyncResult result) {
            BatCheese.Data.BatchService.QueueCollection retVal = this.EndGetQueueCollection(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetQueueCollectionCompleted(object state) {
            if ((this.GetQueueCollectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetQueueCollectionCompleted(this, new GetQueueCollectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetQueueCollectionAsync() {
            this.GetQueueCollectionAsync(null);
        }
        
        public void GetQueueCollectionAsync(object userState) {
            if ((this.onBeginGetQueueCollectionDelegate == null)) {
                this.onBeginGetQueueCollectionDelegate = new BeginOperationDelegate(this.OnBeginGetQueueCollection);
            }
            if ((this.onEndGetQueueCollectionDelegate == null)) {
                this.onEndGetQueueCollectionDelegate = new EndOperationDelegate(this.OnEndGetQueueCollection);
            }
            if ((this.onGetQueueCollectionCompletedDelegate == null)) {
                this.onGetQueueCollectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetQueueCollectionCompleted);
            }
            base.InvokeAsync(this.onBeginGetQueueCollectionDelegate, null, this.onEndGetQueueCollectionDelegate, this.onGetQueueCollectionCompletedDelegate, userState);
        }
        
        public bool IsProcessByDocument() {
            return base.Channel.IsProcessByDocument();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsProcessByDocument(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsProcessByDocument(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsProcessByDocument(System.IAsyncResult result) {
            return base.Channel.EndIsProcessByDocument(result);
        }
        
        private System.IAsyncResult OnBeginIsProcessByDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIsProcessByDocument(callback, asyncState);
        }
        
        private object[] OnEndIsProcessByDocument(System.IAsyncResult result) {
            bool retVal = this.EndIsProcessByDocument(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsProcessByDocumentCompleted(object state) {
            if ((this.IsProcessByDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsProcessByDocumentCompleted(this, new IsProcessByDocumentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsProcessByDocumentAsync() {
            this.IsProcessByDocumentAsync(null);
        }
        
        public void IsProcessByDocumentAsync(object userState) {
            if ((this.onBeginIsProcessByDocumentDelegate == null)) {
                this.onBeginIsProcessByDocumentDelegate = new BeginOperationDelegate(this.OnBeginIsProcessByDocument);
            }
            if ((this.onEndIsProcessByDocumentDelegate == null)) {
                this.onEndIsProcessByDocumentDelegate = new EndOperationDelegate(this.OnEndIsProcessByDocument);
            }
            if ((this.onIsProcessByDocumentCompletedDelegate == null)) {
                this.onIsProcessByDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsProcessByDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginIsProcessByDocumentDelegate, null, this.onEndIsProcessByDocumentDelegate, this.onIsProcessByDocumentCompletedDelegate, userState);
        }
        
        public string GetConfigurationItem(string itemKey) {
            return base.Channel.GetConfigurationItem(itemKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConfigurationItem(string itemKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfigurationItem(itemKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetConfigurationItem(System.IAsyncResult result) {
            return base.Channel.EndGetConfigurationItem(result);
        }
        
        private System.IAsyncResult OnBeginGetConfigurationItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string itemKey = ((string)(inValues[0]));
            return this.BeginGetConfigurationItem(itemKey, callback, asyncState);
        }
        
        private object[] OnEndGetConfigurationItem(System.IAsyncResult result) {
            string retVal = this.EndGetConfigurationItem(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfigurationItemCompleted(object state) {
            if ((this.GetConfigurationItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfigurationItemCompleted(this, new GetConfigurationItemCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfigurationItemAsync(string itemKey) {
            this.GetConfigurationItemAsync(itemKey, null);
        }
        
        public void GetConfigurationItemAsync(string itemKey, object userState) {
            if ((this.onBeginGetConfigurationItemDelegate == null)) {
                this.onBeginGetConfigurationItemDelegate = new BeginOperationDelegate(this.OnBeginGetConfigurationItem);
            }
            if ((this.onEndGetConfigurationItemDelegate == null)) {
                this.onEndGetConfigurationItemDelegate = new EndOperationDelegate(this.OnEndGetConfigurationItem);
            }
            if ((this.onGetConfigurationItemCompletedDelegate == null)) {
                this.onGetConfigurationItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigurationItemCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigurationItemDelegate, new object[] {
                        itemKey}, this.onEndGetConfigurationItemDelegate, this.onGetConfigurationItemCompletedDelegate, userState);
        }
        
        public void SetConfigurationItem(string itemKey, string itemValue) {
            base.Channel.SetConfigurationItem(itemKey, itemValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetConfigurationItem(string itemKey, string itemValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetConfigurationItem(itemKey, itemValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetConfigurationItem(System.IAsyncResult result) {
            base.Channel.EndSetConfigurationItem(result);
        }
        
        private System.IAsyncResult OnBeginSetConfigurationItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string itemKey = ((string)(inValues[0]));
            string itemValue = ((string)(inValues[1]));
            return this.BeginSetConfigurationItem(itemKey, itemValue, callback, asyncState);
        }
        
        private object[] OnEndSetConfigurationItem(System.IAsyncResult result) {
            this.EndSetConfigurationItem(result);
            return null;
        }
        
        private void OnSetConfigurationItemCompleted(object state) {
            if ((this.SetConfigurationItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetConfigurationItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetConfigurationItemAsync(string itemKey, string itemValue) {
            this.SetConfigurationItemAsync(itemKey, itemValue, null);
        }
        
        public void SetConfigurationItemAsync(string itemKey, string itemValue, object userState) {
            if ((this.onBeginSetConfigurationItemDelegate == null)) {
                this.onBeginSetConfigurationItemDelegate = new BeginOperationDelegate(this.OnBeginSetConfigurationItem);
            }
            if ((this.onEndSetConfigurationItemDelegate == null)) {
                this.onEndSetConfigurationItemDelegate = new EndOperationDelegate(this.OnEndSetConfigurationItem);
            }
            if ((this.onSetConfigurationItemCompletedDelegate == null)) {
                this.onSetConfigurationItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetConfigurationItemCompleted);
            }
            base.InvokeAsync(this.onBeginSetConfigurationItemDelegate, new object[] {
                        itemKey,
                        itemValue}, this.onEndSetConfigurationItemDelegate, this.onSetConfigurationItemCompletedDelegate, userState);
        }
        
        public void InsertConfigurationItem(string itemKey, string itemValue) {
            base.Channel.InsertConfigurationItem(itemKey, itemValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertConfigurationItem(string itemKey, string itemValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertConfigurationItem(itemKey, itemValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertConfigurationItem(System.IAsyncResult result) {
            base.Channel.EndInsertConfigurationItem(result);
        }
        
        private System.IAsyncResult OnBeginInsertConfigurationItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string itemKey = ((string)(inValues[0]));
            string itemValue = ((string)(inValues[1]));
            return this.BeginInsertConfigurationItem(itemKey, itemValue, callback, asyncState);
        }
        
        private object[] OnEndInsertConfigurationItem(System.IAsyncResult result) {
            this.EndInsertConfigurationItem(result);
            return null;
        }
        
        private void OnInsertConfigurationItemCompleted(object state) {
            if ((this.InsertConfigurationItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertConfigurationItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertConfigurationItemAsync(string itemKey, string itemValue) {
            this.InsertConfigurationItemAsync(itemKey, itemValue, null);
        }
        
        public void InsertConfigurationItemAsync(string itemKey, string itemValue, object userState) {
            if ((this.onBeginInsertConfigurationItemDelegate == null)) {
                this.onBeginInsertConfigurationItemDelegate = new BeginOperationDelegate(this.OnBeginInsertConfigurationItem);
            }
            if ((this.onEndInsertConfigurationItemDelegate == null)) {
                this.onEndInsertConfigurationItemDelegate = new EndOperationDelegate(this.OnEndInsertConfigurationItem);
            }
            if ((this.onInsertConfigurationItemCompletedDelegate == null)) {
                this.onInsertConfigurationItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertConfigurationItemCompleted);
            }
            base.InvokeAsync(this.onBeginInsertConfigurationItemDelegate, new object[] {
                        itemKey,
                        itemValue}, this.onEndInsertConfigurationItemDelegate, this.onInsertConfigurationItemCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.BatchState GetBatchState(string batchname) {
            return base.Channel.GetBatchState(batchname);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetBatchState(string batchname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBatchState(batchname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.BatchState EndGetBatchState(System.IAsyncResult result) {
            return base.Channel.EndGetBatchState(result);
        }
        
        private System.IAsyncResult OnBeginGetBatchState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            return this.BeginGetBatchState(batchname, callback, asyncState);
        }
        
        private object[] OnEndGetBatchState(System.IAsyncResult result) {
            BatCheese.Data.BatchService.BatchState retVal = this.EndGetBatchState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBatchStateCompleted(object state) {
            if ((this.GetBatchStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBatchStateCompleted(this, new GetBatchStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBatchStateAsync(string batchname) {
            this.GetBatchStateAsync(batchname, null);
        }
        
        public void GetBatchStateAsync(string batchname, object userState) {
            if ((this.onBeginGetBatchStateDelegate == null)) {
                this.onBeginGetBatchStateDelegate = new BeginOperationDelegate(this.OnBeginGetBatchState);
            }
            if ((this.onEndGetBatchStateDelegate == null)) {
                this.onEndGetBatchStateDelegate = new EndOperationDelegate(this.OnEndGetBatchState);
            }
            if ((this.onGetBatchStateCompletedDelegate == null)) {
                this.onGetBatchStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBatchStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetBatchStateDelegate, new object[] {
                        batchname}, this.onEndGetBatchStateDelegate, this.onGetBatchStateCompletedDelegate, userState);
        }
        
        public void InsertBatchLock(string batchname, string cachepath, string machineName) {
            base.Channel.InsertBatchLock(batchname, cachepath, machineName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertBatchLock(string batchname, string cachepath, string machineName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertBatchLock(batchname, cachepath, machineName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertBatchLock(System.IAsyncResult result) {
            base.Channel.EndInsertBatchLock(result);
        }
        
        private System.IAsyncResult OnBeginInsertBatchLock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            string machineName = ((string)(inValues[2]));
            return this.BeginInsertBatchLock(batchname, cachepath, machineName, callback, asyncState);
        }
        
        private object[] OnEndInsertBatchLock(System.IAsyncResult result) {
            this.EndInsertBatchLock(result);
            return null;
        }
        
        private void OnInsertBatchLockCompleted(object state) {
            if ((this.InsertBatchLockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertBatchLockCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertBatchLockAsync(string batchname, string cachepath, string machineName) {
            this.InsertBatchLockAsync(batchname, cachepath, machineName, null);
        }
        
        public void InsertBatchLockAsync(string batchname, string cachepath, string machineName, object userState) {
            if ((this.onBeginInsertBatchLockDelegate == null)) {
                this.onBeginInsertBatchLockDelegate = new BeginOperationDelegate(this.OnBeginInsertBatchLock);
            }
            if ((this.onEndInsertBatchLockDelegate == null)) {
                this.onEndInsertBatchLockDelegate = new EndOperationDelegate(this.OnEndInsertBatchLock);
            }
            if ((this.onInsertBatchLockCompletedDelegate == null)) {
                this.onInsertBatchLockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertBatchLockCompleted);
            }
            base.InvokeAsync(this.onBeginInsertBatchLockDelegate, new object[] {
                        batchname,
                        cachepath,
                        machineName}, this.onEndInsertBatchLockDelegate, this.onInsertBatchLockCompletedDelegate, userState);
        }
        
        public void InsertBatchLockByUserName(string batchname, string cachepath, string machineName, string username) {
            base.Channel.InsertBatchLockByUserName(batchname, cachepath, machineName, username);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertBatchLockByUserName(string batchname, string cachepath, string machineName, string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertBatchLockByUserName(batchname, cachepath, machineName, username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInsertBatchLockByUserName(System.IAsyncResult result) {
            base.Channel.EndInsertBatchLockByUserName(result);
        }
        
        private System.IAsyncResult OnBeginInsertBatchLockByUserName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            string machineName = ((string)(inValues[2]));
            string username = ((string)(inValues[3]));
            return this.BeginInsertBatchLockByUserName(batchname, cachepath, machineName, username, callback, asyncState);
        }
        
        private object[] OnEndInsertBatchLockByUserName(System.IAsyncResult result) {
            this.EndInsertBatchLockByUserName(result);
            return null;
        }
        
        private void OnInsertBatchLockByUserNameCompleted(object state) {
            if ((this.InsertBatchLockByUserNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertBatchLockByUserNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertBatchLockByUserNameAsync(string batchname, string cachepath, string machineName, string username) {
            this.InsertBatchLockByUserNameAsync(batchname, cachepath, machineName, username, null);
        }
        
        public void InsertBatchLockByUserNameAsync(string batchname, string cachepath, string machineName, string username, object userState) {
            if ((this.onBeginInsertBatchLockByUserNameDelegate == null)) {
                this.onBeginInsertBatchLockByUserNameDelegate = new BeginOperationDelegate(this.OnBeginInsertBatchLockByUserName);
            }
            if ((this.onEndInsertBatchLockByUserNameDelegate == null)) {
                this.onEndInsertBatchLockByUserNameDelegate = new EndOperationDelegate(this.OnEndInsertBatchLockByUserName);
            }
            if ((this.onInsertBatchLockByUserNameCompletedDelegate == null)) {
                this.onInsertBatchLockByUserNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertBatchLockByUserNameCompleted);
            }
            base.InvokeAsync(this.onBeginInsertBatchLockByUserNameDelegate, new object[] {
                        batchname,
                        cachepath,
                        machineName,
                        username}, this.onEndInsertBatchLockByUserNameDelegate, this.onInsertBatchLockByUserNameCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.LockedBatches QueryLockedBatchesByUser(string username) {
            return base.Channel.QueryLockedBatchesByUser(username);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginQueryLockedBatchesByUser(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginQueryLockedBatchesByUser(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.LockedBatches EndQueryLockedBatchesByUser(System.IAsyncResult result) {
            return base.Channel.EndQueryLockedBatchesByUser(result);
        }
        
        private System.IAsyncResult OnBeginQueryLockedBatchesByUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return this.BeginQueryLockedBatchesByUser(username, callback, asyncState);
        }
        
        private object[] OnEndQueryLockedBatchesByUser(System.IAsyncResult result) {
            BatCheese.Data.BatchService.LockedBatches retVal = this.EndQueryLockedBatchesByUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnQueryLockedBatchesByUserCompleted(object state) {
            if ((this.QueryLockedBatchesByUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.QueryLockedBatchesByUserCompleted(this, new QueryLockedBatchesByUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void QueryLockedBatchesByUserAsync(string username) {
            this.QueryLockedBatchesByUserAsync(username, null);
        }
        
        public void QueryLockedBatchesByUserAsync(string username, object userState) {
            if ((this.onBeginQueryLockedBatchesByUserDelegate == null)) {
                this.onBeginQueryLockedBatchesByUserDelegate = new BeginOperationDelegate(this.OnBeginQueryLockedBatchesByUser);
            }
            if ((this.onEndQueryLockedBatchesByUserDelegate == null)) {
                this.onEndQueryLockedBatchesByUserDelegate = new EndOperationDelegate(this.OnEndQueryLockedBatchesByUser);
            }
            if ((this.onQueryLockedBatchesByUserCompletedDelegate == null)) {
                this.onQueryLockedBatchesByUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueryLockedBatchesByUserCompleted);
            }
            base.InvokeAsync(this.onBeginQueryLockedBatchesByUserDelegate, new object[] {
                        username}, this.onEndQueryLockedBatchesByUserDelegate, this.onQueryLockedBatchesByUserCompletedDelegate, userState);
        }
        
        public void DeleteBatchLock(string batchname, string cachepath, string machineName) {
            base.Channel.DeleteBatchLock(batchname, cachepath, machineName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteBatchLock(string batchname, string cachepath, string machineName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteBatchLock(batchname, cachepath, machineName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteBatchLock(System.IAsyncResult result) {
            base.Channel.EndDeleteBatchLock(result);
        }
        
        private System.IAsyncResult OnBeginDeleteBatchLock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            string machineName = ((string)(inValues[2]));
            return this.BeginDeleteBatchLock(batchname, cachepath, machineName, callback, asyncState);
        }
        
        private object[] OnEndDeleteBatchLock(System.IAsyncResult result) {
            this.EndDeleteBatchLock(result);
            return null;
        }
        
        private void OnDeleteBatchLockCompleted(object state) {
            if ((this.DeleteBatchLockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteBatchLockCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteBatchLockAsync(string batchname, string cachepath, string machineName) {
            this.DeleteBatchLockAsync(batchname, cachepath, machineName, null);
        }
        
        public void DeleteBatchLockAsync(string batchname, string cachepath, string machineName, object userState) {
            if ((this.onBeginDeleteBatchLockDelegate == null)) {
                this.onBeginDeleteBatchLockDelegate = new BeginOperationDelegate(this.OnBeginDeleteBatchLock);
            }
            if ((this.onEndDeleteBatchLockDelegate == null)) {
                this.onEndDeleteBatchLockDelegate = new EndOperationDelegate(this.OnEndDeleteBatchLock);
            }
            if ((this.onDeleteBatchLockCompletedDelegate == null)) {
                this.onDeleteBatchLockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteBatchLockCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteBatchLockDelegate, new object[] {
                        batchname,
                        cachepath,
                        machineName}, this.onEndDeleteBatchLockDelegate, this.onDeleteBatchLockCompletedDelegate, userState);
        }
        
        public void DeleteQueue(string batchname, string cachepath) {
            base.Channel.DeleteQueue(batchname, cachepath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteQueue(string batchname, string cachepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteQueue(batchname, cachepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteQueue(System.IAsyncResult result) {
            base.Channel.EndDeleteQueue(result);
        }
        
        private System.IAsyncResult OnBeginDeleteQueue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            return this.BeginDeleteQueue(batchname, cachepath, callback, asyncState);
        }
        
        private object[] OnEndDeleteQueue(System.IAsyncResult result) {
            this.EndDeleteQueue(result);
            return null;
        }
        
        private void OnDeleteQueueCompleted(object state) {
            if ((this.DeleteQueueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteQueueAsync(string batchname, string cachepath) {
            this.DeleteQueueAsync(batchname, cachepath, null);
        }
        
        public void DeleteQueueAsync(string batchname, string cachepath, object userState) {
            if ((this.onBeginDeleteQueueDelegate == null)) {
                this.onBeginDeleteQueueDelegate = new BeginOperationDelegate(this.OnBeginDeleteQueue);
            }
            if ((this.onEndDeleteQueueDelegate == null)) {
                this.onEndDeleteQueueDelegate = new EndOperationDelegate(this.OnEndDeleteQueue);
            }
            if ((this.onDeleteQueueCompletedDelegate == null)) {
                this.onDeleteQueueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteQueueCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteQueueDelegate, new object[] {
                        batchname,
                        cachepath}, this.onEndDeleteQueueDelegate, this.onDeleteQueueCompletedDelegate, userState);
        }
        
        public void DeleteBatch(string batchName, string cachePath) {
            base.Channel.DeleteBatch(batchName, cachePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteBatch(string batchName, string cachePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteBatch(batchName, cachePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteBatch(System.IAsyncResult result) {
            base.Channel.EndDeleteBatch(result);
        }
        
        private System.IAsyncResult OnBeginDeleteBatch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchName = ((string)(inValues[0]));
            string cachePath = ((string)(inValues[1]));
            return this.BeginDeleteBatch(batchName, cachePath, callback, asyncState);
        }
        
        private object[] OnEndDeleteBatch(System.IAsyncResult result) {
            this.EndDeleteBatch(result);
            return null;
        }
        
        private void OnDeleteBatchCompleted(object state) {
            if ((this.DeleteBatchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteBatchCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteBatchAsync(string batchName, string cachePath) {
            this.DeleteBatchAsync(batchName, cachePath, null);
        }
        
        public void DeleteBatchAsync(string batchName, string cachePath, object userState) {
            if ((this.onBeginDeleteBatchDelegate == null)) {
                this.onBeginDeleteBatchDelegate = new BeginOperationDelegate(this.OnBeginDeleteBatch);
            }
            if ((this.onEndDeleteBatchDelegate == null)) {
                this.onEndDeleteBatchDelegate = new EndOperationDelegate(this.OnEndDeleteBatch);
            }
            if ((this.onDeleteBatchCompletedDelegate == null)) {
                this.onDeleteBatchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteBatchCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteBatchDelegate, new object[] {
                        batchName,
                        cachePath}, this.onEndDeleteBatchDelegate, this.onDeleteBatchCompletedDelegate, userState);
        }
        
        public void UpdateQueue(int activitynumber, string activityname, string batchname, string cachepath, string error) {
            base.Channel.UpdateQueue(activitynumber, activityname, batchname, cachepath, error);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateQueue(int activitynumber, string activityname, string batchname, string cachepath, string error, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateQueue(activitynumber, activityname, batchname, cachepath, error, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateQueue(System.IAsyncResult result) {
            base.Channel.EndUpdateQueue(result);
        }
        
        private System.IAsyncResult OnBeginUpdateQueue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int activitynumber = ((int)(inValues[0]));
            string activityname = ((string)(inValues[1]));
            string batchname = ((string)(inValues[2]));
            string cachepath = ((string)(inValues[3]));
            string error = ((string)(inValues[4]));
            return this.BeginUpdateQueue(activitynumber, activityname, batchname, cachepath, error, callback, asyncState);
        }
        
        private object[] OnEndUpdateQueue(System.IAsyncResult result) {
            this.EndUpdateQueue(result);
            return null;
        }
        
        private void OnUpdateQueueCompleted(object state) {
            if ((this.UpdateQueueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateQueueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateQueueAsync(int activitynumber, string activityname, string batchname, string cachepath, string error) {
            this.UpdateQueueAsync(activitynumber, activityname, batchname, cachepath, error, null);
        }
        
        public void UpdateQueueAsync(int activitynumber, string activityname, string batchname, string cachepath, string error, object userState) {
            if ((this.onBeginUpdateQueueDelegate == null)) {
                this.onBeginUpdateQueueDelegate = new BeginOperationDelegate(this.OnBeginUpdateQueue);
            }
            if ((this.onEndUpdateQueueDelegate == null)) {
                this.onEndUpdateQueueDelegate = new EndOperationDelegate(this.OnEndUpdateQueue);
            }
            if ((this.onUpdateQueueCompletedDelegate == null)) {
                this.onUpdateQueueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateQueueCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateQueueDelegate, new object[] {
                        activitynumber,
                        activityname,
                        batchname,
                        cachepath,
                        error}, this.onEndUpdateQueueDelegate, this.onUpdateQueueCompletedDelegate, userState);
        }
        
        public void UpdateQueueCachePath(string batchname, string cachepath) {
            base.Channel.UpdateQueueCachePath(batchname, cachepath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateQueueCachePath(string batchname, string cachepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateQueueCachePath(batchname, cachepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateQueueCachePath(System.IAsyncResult result) {
            base.Channel.EndUpdateQueueCachePath(result);
        }
        
        private System.IAsyncResult OnBeginUpdateQueueCachePath(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            return this.BeginUpdateQueueCachePath(batchname, cachepath, callback, asyncState);
        }
        
        private object[] OnEndUpdateQueueCachePath(System.IAsyncResult result) {
            this.EndUpdateQueueCachePath(result);
            return null;
        }
        
        private void OnUpdateQueueCachePathCompleted(object state) {
            if ((this.UpdateQueueCachePathCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateQueueCachePathCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateQueueCachePathAsync(string batchname, string cachepath) {
            this.UpdateQueueCachePathAsync(batchname, cachepath, null);
        }
        
        public void UpdateQueueCachePathAsync(string batchname, string cachepath, object userState) {
            if ((this.onBeginUpdateQueueCachePathDelegate == null)) {
                this.onBeginUpdateQueueCachePathDelegate = new BeginOperationDelegate(this.OnBeginUpdateQueueCachePath);
            }
            if ((this.onEndUpdateQueueCachePathDelegate == null)) {
                this.onEndUpdateQueueCachePathDelegate = new EndOperationDelegate(this.OnEndUpdateQueueCachePath);
            }
            if ((this.onUpdateQueueCachePathCompletedDelegate == null)) {
                this.onUpdateQueueCachePathCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateQueueCachePathCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateQueueCachePathDelegate, new object[] {
                        batchname,
                        cachepath}, this.onEndUpdateQueueCachePathDelegate, this.onUpdateQueueCachePathCompletedDelegate, userState);
        }
        
        public bool InsertProcess(string batchname, string cachePath, string processName, System.DateTime finishedTime) {
            return base.Channel.InsertProcess(batchname, cachePath, processName, finishedTime);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertProcess(string batchname, string cachePath, string processName, System.DateTime finishedTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertProcess(batchname, cachePath, processName, finishedTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndInsertProcess(System.IAsyncResult result) {
            return base.Channel.EndInsertProcess(result);
        }
        
        private System.IAsyncResult OnBeginInsertProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachePath = ((string)(inValues[1]));
            string processName = ((string)(inValues[2]));
            System.DateTime finishedTime = ((System.DateTime)(inValues[3]));
            return this.BeginInsertProcess(batchname, cachePath, processName, finishedTime, callback, asyncState);
        }
        
        private object[] OnEndInsertProcess(System.IAsyncResult result) {
            bool retVal = this.EndInsertProcess(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertProcessCompleted(object state) {
            if ((this.InsertProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertProcessCompleted(this, new InsertProcessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertProcessAsync(string batchname, string cachePath, string processName, System.DateTime finishedTime) {
            this.InsertProcessAsync(batchname, cachePath, processName, finishedTime, null);
        }
        
        public void InsertProcessAsync(string batchname, string cachePath, string processName, System.DateTime finishedTime, object userState) {
            if ((this.onBeginInsertProcessDelegate == null)) {
                this.onBeginInsertProcessDelegate = new BeginOperationDelegate(this.OnBeginInsertProcess);
            }
            if ((this.onEndInsertProcessDelegate == null)) {
                this.onEndInsertProcessDelegate = new EndOperationDelegate(this.OnEndInsertProcess);
            }
            if ((this.onInsertProcessCompletedDelegate == null)) {
                this.onInsertProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertProcessCompleted);
            }
            base.InvokeAsync(this.onBeginInsertProcessDelegate, new object[] {
                        batchname,
                        cachePath,
                        processName,
                        finishedTime}, this.onEndInsertProcessDelegate, this.onInsertProcessCompletedDelegate, userState);
        }
        
        public bool InsertActivityToProcess(string batchname, string cachepath, BatCheese.Data.BatchService.ActivityDefinition def) {
            return base.Channel.InsertActivityToProcess(batchname, cachepath, def);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertActivityToProcess(string batchname, string cachepath, BatCheese.Data.BatchService.ActivityDefinition def, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertActivityToProcess(batchname, cachepath, def, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndInsertActivityToProcess(System.IAsyncResult result) {
            return base.Channel.EndInsertActivityToProcess(result);
        }
        
        private System.IAsyncResult OnBeginInsertActivityToProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            BatCheese.Data.BatchService.ActivityDefinition def = ((BatCheese.Data.BatchService.ActivityDefinition)(inValues[2]));
            return this.BeginInsertActivityToProcess(batchname, cachepath, def, callback, asyncState);
        }
        
        private object[] OnEndInsertActivityToProcess(System.IAsyncResult result) {
            bool retVal = this.EndInsertActivityToProcess(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertActivityToProcessCompleted(object state) {
            if ((this.InsertActivityToProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertActivityToProcessCompleted(this, new InsertActivityToProcessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertActivityToProcessAsync(string batchname, string cachepath, BatCheese.Data.BatchService.ActivityDefinition def) {
            this.InsertActivityToProcessAsync(batchname, cachepath, def, null);
        }
        
        public void InsertActivityToProcessAsync(string batchname, string cachepath, BatCheese.Data.BatchService.ActivityDefinition def, object userState) {
            if ((this.onBeginInsertActivityToProcessDelegate == null)) {
                this.onBeginInsertActivityToProcessDelegate = new BeginOperationDelegate(this.OnBeginInsertActivityToProcess);
            }
            if ((this.onEndInsertActivityToProcessDelegate == null)) {
                this.onEndInsertActivityToProcessDelegate = new EndOperationDelegate(this.OnEndInsertActivityToProcess);
            }
            if ((this.onInsertActivityToProcessCompletedDelegate == null)) {
                this.onInsertActivityToProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertActivityToProcessCompleted);
            }
            base.InvokeAsync(this.onBeginInsertActivityToProcessDelegate, new object[] {
                        batchname,
                        cachepath,
                        def}, this.onEndInsertActivityToProcessDelegate, this.onInsertActivityToProcessCompletedDelegate, userState);
        }
        
        public void DeleteActivitiesToProcess(string batchname, string cachepath) {
            base.Channel.DeleteActivitiesToProcess(batchname, cachepath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteActivitiesToProcess(string batchname, string cachepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteActivitiesToProcess(batchname, cachepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteActivitiesToProcess(System.IAsyncResult result) {
            base.Channel.EndDeleteActivitiesToProcess(result);
        }
        
        private System.IAsyncResult OnBeginDeleteActivitiesToProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            return this.BeginDeleteActivitiesToProcess(batchname, cachepath, callback, asyncState);
        }
        
        private object[] OnEndDeleteActivitiesToProcess(System.IAsyncResult result) {
            this.EndDeleteActivitiesToProcess(result);
            return null;
        }
        
        private void OnDeleteActivitiesToProcessCompleted(object state) {
            if ((this.DeleteActivitiesToProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteActivitiesToProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteActivitiesToProcessAsync(string batchname, string cachepath) {
            this.DeleteActivitiesToProcessAsync(batchname, cachepath, null);
        }
        
        public void DeleteActivitiesToProcessAsync(string batchname, string cachepath, object userState) {
            if ((this.onBeginDeleteActivitiesToProcessDelegate == null)) {
                this.onBeginDeleteActivitiesToProcessDelegate = new BeginOperationDelegate(this.OnBeginDeleteActivitiesToProcess);
            }
            if ((this.onEndDeleteActivitiesToProcessDelegate == null)) {
                this.onEndDeleteActivitiesToProcessDelegate = new EndOperationDelegate(this.OnEndDeleteActivitiesToProcess);
            }
            if ((this.onDeleteActivitiesToProcessCompletedDelegate == null)) {
                this.onDeleteActivitiesToProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteActivitiesToProcessCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteActivitiesToProcessDelegate, new object[] {
                        batchname,
                        cachepath}, this.onEndDeleteActivitiesToProcessDelegate, this.onDeleteActivitiesToProcessCompletedDelegate, userState);
        }
        
        public void UpdateActivityToProcess(string library, string batchname, string cachepath, bool activitycomplete) {
            base.Channel.UpdateActivityToProcess(library, batchname, cachepath, activitycomplete);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateActivityToProcess(string library, string batchname, string cachepath, bool activitycomplete, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateActivityToProcess(library, batchname, cachepath, activitycomplete, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateActivityToProcess(System.IAsyncResult result) {
            base.Channel.EndUpdateActivityToProcess(result);
        }
        
        private System.IAsyncResult OnBeginUpdateActivityToProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string library = ((string)(inValues[0]));
            string batchname = ((string)(inValues[1]));
            string cachepath = ((string)(inValues[2]));
            bool activitycomplete = ((bool)(inValues[3]));
            return this.BeginUpdateActivityToProcess(library, batchname, cachepath, activitycomplete, callback, asyncState);
        }
        
        private object[] OnEndUpdateActivityToProcess(System.IAsyncResult result) {
            this.EndUpdateActivityToProcess(result);
            return null;
        }
        
        private void OnUpdateActivityToProcessCompleted(object state) {
            if ((this.UpdateActivityToProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateActivityToProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateActivityToProcessAsync(string library, string batchname, string cachepath, bool activitycomplete) {
            this.UpdateActivityToProcessAsync(library, batchname, cachepath, activitycomplete, null);
        }
        
        public void UpdateActivityToProcessAsync(string library, string batchname, string cachepath, bool activitycomplete, object userState) {
            if ((this.onBeginUpdateActivityToProcessDelegate == null)) {
                this.onBeginUpdateActivityToProcessDelegate = new BeginOperationDelegate(this.OnBeginUpdateActivityToProcess);
            }
            if ((this.onEndUpdateActivityToProcessDelegate == null)) {
                this.onEndUpdateActivityToProcessDelegate = new EndOperationDelegate(this.OnEndUpdateActivityToProcess);
            }
            if ((this.onUpdateActivityToProcessCompletedDelegate == null)) {
                this.onUpdateActivityToProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateActivityToProcessCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateActivityToProcessDelegate, new object[] {
                        library,
                        batchname,
                        cachepath,
                        activitycomplete}, this.onEndUpdateActivityToProcessDelegate, this.onUpdateActivityToProcessCompletedDelegate, userState);
        }
        
        public void UpdateActivitiesToProcessError(long activitytoprocessid, string error) {
            base.Channel.UpdateActivitiesToProcessError(activitytoprocessid, error);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateActivitiesToProcessError(long activitytoprocessid, string error, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateActivitiesToProcessError(activitytoprocessid, error, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateActivitiesToProcessError(System.IAsyncResult result) {
            base.Channel.EndUpdateActivitiesToProcessError(result);
        }
        
        private System.IAsyncResult OnBeginUpdateActivitiesToProcessError(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activitytoprocessid = ((long)(inValues[0]));
            string error = ((string)(inValues[1]));
            return this.BeginUpdateActivitiesToProcessError(activitytoprocessid, error, callback, asyncState);
        }
        
        private object[] OnEndUpdateActivitiesToProcessError(System.IAsyncResult result) {
            this.EndUpdateActivitiesToProcessError(result);
            return null;
        }
        
        private void OnUpdateActivitiesToProcessErrorCompleted(object state) {
            if ((this.UpdateActivitiesToProcessErrorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateActivitiesToProcessErrorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateActivitiesToProcessErrorAsync(long activitytoprocessid, string error) {
            this.UpdateActivitiesToProcessErrorAsync(activitytoprocessid, error, null);
        }
        
        public void UpdateActivitiesToProcessErrorAsync(long activitytoprocessid, string error, object userState) {
            if ((this.onBeginUpdateActivitiesToProcessErrorDelegate == null)) {
                this.onBeginUpdateActivitiesToProcessErrorDelegate = new BeginOperationDelegate(this.OnBeginUpdateActivitiesToProcessError);
            }
            if ((this.onEndUpdateActivitiesToProcessErrorDelegate == null)) {
                this.onEndUpdateActivitiesToProcessErrorDelegate = new EndOperationDelegate(this.OnEndUpdateActivitiesToProcessError);
            }
            if ((this.onUpdateActivitiesToProcessErrorCompletedDelegate == null)) {
                this.onUpdateActivitiesToProcessErrorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateActivitiesToProcessErrorCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateActivitiesToProcessErrorDelegate, new object[] {
                        activitytoprocessid,
                        error}, this.onEndUpdateActivitiesToProcessErrorDelegate, this.onUpdateActivitiesToProcessErrorCompletedDelegate, userState);
        }
        
        public void UpdateActivitiesToProcessErrorByBatch(string batchName, string error) {
            base.Channel.UpdateActivitiesToProcessErrorByBatch(batchName, error);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateActivitiesToProcessErrorByBatch(string batchName, string error, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateActivitiesToProcessErrorByBatch(batchName, error, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateActivitiesToProcessErrorByBatch(System.IAsyncResult result) {
            base.Channel.EndUpdateActivitiesToProcessErrorByBatch(result);
        }
        
        private System.IAsyncResult OnBeginUpdateActivitiesToProcessErrorByBatch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchName = ((string)(inValues[0]));
            string error = ((string)(inValues[1]));
            return this.BeginUpdateActivitiesToProcessErrorByBatch(batchName, error, callback, asyncState);
        }
        
        private object[] OnEndUpdateActivitiesToProcessErrorByBatch(System.IAsyncResult result) {
            this.EndUpdateActivitiesToProcessErrorByBatch(result);
            return null;
        }
        
        private void OnUpdateActivitiesToProcessErrorByBatchCompleted(object state) {
            if ((this.UpdateActivitiesToProcessErrorByBatchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateActivitiesToProcessErrorByBatchCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateActivitiesToProcessErrorByBatchAsync(string batchName, string error) {
            this.UpdateActivitiesToProcessErrorByBatchAsync(batchName, error, null);
        }
        
        public void UpdateActivitiesToProcessErrorByBatchAsync(string batchName, string error, object userState) {
            if ((this.onBeginUpdateActivitiesToProcessErrorByBatchDelegate == null)) {
                this.onBeginUpdateActivitiesToProcessErrorByBatchDelegate = new BeginOperationDelegate(this.OnBeginUpdateActivitiesToProcessErrorByBatch);
            }
            if ((this.onEndUpdateActivitiesToProcessErrorByBatchDelegate == null)) {
                this.onEndUpdateActivitiesToProcessErrorByBatchDelegate = new EndOperationDelegate(this.OnEndUpdateActivitiesToProcessErrorByBatch);
            }
            if ((this.onUpdateActivitiesToProcessErrorByBatchCompletedDelegate == null)) {
                this.onUpdateActivitiesToProcessErrorByBatchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateActivitiesToProcessErrorByBatchCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateActivitiesToProcessErrorByBatchDelegate, new object[] {
                        batchName,
                        error}, this.onEndUpdateActivitiesToProcessErrorByBatchDelegate, this.onUpdateActivitiesToProcessErrorByBatchCompletedDelegate, userState);
        }
        
        public void UpdateBatchErrorStatus(long activitytoprocessid, string error, string batchName, string cachePath) {
            base.Channel.UpdateBatchErrorStatus(activitytoprocessid, error, batchName, cachePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateBatchErrorStatus(long activitytoprocessid, string error, string batchName, string cachePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateBatchErrorStatus(activitytoprocessid, error, batchName, cachePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateBatchErrorStatus(System.IAsyncResult result) {
            base.Channel.EndUpdateBatchErrorStatus(result);
        }
        
        private System.IAsyncResult OnBeginUpdateBatchErrorStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activitytoprocessid = ((long)(inValues[0]));
            string error = ((string)(inValues[1]));
            string batchName = ((string)(inValues[2]));
            string cachePath = ((string)(inValues[3]));
            return this.BeginUpdateBatchErrorStatus(activitytoprocessid, error, batchName, cachePath, callback, asyncState);
        }
        
        private object[] OnEndUpdateBatchErrorStatus(System.IAsyncResult result) {
            this.EndUpdateBatchErrorStatus(result);
            return null;
        }
        
        private void OnUpdateBatchErrorStatusCompleted(object state) {
            if ((this.UpdateBatchErrorStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateBatchErrorStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateBatchErrorStatusAsync(long activitytoprocessid, string error, string batchName, string cachePath) {
            this.UpdateBatchErrorStatusAsync(activitytoprocessid, error, batchName, cachePath, null);
        }
        
        public void UpdateBatchErrorStatusAsync(long activitytoprocessid, string error, string batchName, string cachePath, object userState) {
            if ((this.onBeginUpdateBatchErrorStatusDelegate == null)) {
                this.onBeginUpdateBatchErrorStatusDelegate = new BeginOperationDelegate(this.OnBeginUpdateBatchErrorStatus);
            }
            if ((this.onEndUpdateBatchErrorStatusDelegate == null)) {
                this.onEndUpdateBatchErrorStatusDelegate = new EndOperationDelegate(this.OnEndUpdateBatchErrorStatus);
            }
            if ((this.onUpdateBatchErrorStatusCompletedDelegate == null)) {
                this.onUpdateBatchErrorStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateBatchErrorStatusCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateBatchErrorStatusDelegate, new object[] {
                        activitytoprocessid,
                        error,
                        batchName,
                        cachePath}, this.onEndUpdateBatchErrorStatusDelegate, this.onUpdateBatchErrorStatusCompletedDelegate, userState);
        }
        
        public bool UpdateActivitiesToProcessStart(long activitytoprocessid, System.DateTime start, string machineName) {
            return base.Channel.UpdateActivitiesToProcessStart(activitytoprocessid, start, machineName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateActivitiesToProcessStart(long activitytoprocessid, System.DateTime start, string machineName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateActivitiesToProcessStart(activitytoprocessid, start, machineName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateActivitiesToProcessStart(System.IAsyncResult result) {
            return base.Channel.EndUpdateActivitiesToProcessStart(result);
        }
        
        private System.IAsyncResult OnBeginUpdateActivitiesToProcessStart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activitytoprocessid = ((long)(inValues[0]));
            System.DateTime start = ((System.DateTime)(inValues[1]));
            string machineName = ((string)(inValues[2]));
            return this.BeginUpdateActivitiesToProcessStart(activitytoprocessid, start, machineName, callback, asyncState);
        }
        
        private object[] OnEndUpdateActivitiesToProcessStart(System.IAsyncResult result) {
            bool retVal = this.EndUpdateActivitiesToProcessStart(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateActivitiesToProcessStartCompleted(object state) {
            if ((this.UpdateActivitiesToProcessStartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateActivitiesToProcessStartCompleted(this, new UpdateActivitiesToProcessStartCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateActivitiesToProcessStartAsync(long activitytoprocessid, System.DateTime start, string machineName) {
            this.UpdateActivitiesToProcessStartAsync(activitytoprocessid, start, machineName, null);
        }
        
        public void UpdateActivitiesToProcessStartAsync(long activitytoprocessid, System.DateTime start, string machineName, object userState) {
            if ((this.onBeginUpdateActivitiesToProcessStartDelegate == null)) {
                this.onBeginUpdateActivitiesToProcessStartDelegate = new BeginOperationDelegate(this.OnBeginUpdateActivitiesToProcessStart);
            }
            if ((this.onEndUpdateActivitiesToProcessStartDelegate == null)) {
                this.onEndUpdateActivitiesToProcessStartDelegate = new EndOperationDelegate(this.OnEndUpdateActivitiesToProcessStart);
            }
            if ((this.onUpdateActivitiesToProcessStartCompletedDelegate == null)) {
                this.onUpdateActivitiesToProcessStartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateActivitiesToProcessStartCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateActivitiesToProcessStartDelegate, new object[] {
                        activitytoprocessid,
                        start,
                        machineName}, this.onEndUpdateActivitiesToProcessStartDelegate, this.onUpdateActivitiesToProcessStartCompletedDelegate, userState);
        }
        
        public bool UpdateLockedActivitiesToProcessMachineName(long activitytoprocessid, System.DateTime start, string machineName) {
            return base.Channel.UpdateLockedActivitiesToProcessMachineName(activitytoprocessid, start, machineName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateLockedActivitiesToProcessMachineName(long activitytoprocessid, System.DateTime start, string machineName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateLockedActivitiesToProcessMachineName(activitytoprocessid, start, machineName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateLockedActivitiesToProcessMachineName(System.IAsyncResult result) {
            return base.Channel.EndUpdateLockedActivitiesToProcessMachineName(result);
        }
        
        private System.IAsyncResult OnBeginUpdateLockedActivitiesToProcessMachineName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activitytoprocessid = ((long)(inValues[0]));
            System.DateTime start = ((System.DateTime)(inValues[1]));
            string machineName = ((string)(inValues[2]));
            return this.BeginUpdateLockedActivitiesToProcessMachineName(activitytoprocessid, start, machineName, callback, asyncState);
        }
        
        private object[] OnEndUpdateLockedActivitiesToProcessMachineName(System.IAsyncResult result) {
            bool retVal = this.EndUpdateLockedActivitiesToProcessMachineName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateLockedActivitiesToProcessMachineNameCompleted(object state) {
            if ((this.UpdateLockedActivitiesToProcessMachineNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateLockedActivitiesToProcessMachineNameCompleted(this, new UpdateLockedActivitiesToProcessMachineNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateLockedActivitiesToProcessMachineNameAsync(long activitytoprocessid, System.DateTime start, string machineName) {
            this.UpdateLockedActivitiesToProcessMachineNameAsync(activitytoprocessid, start, machineName, null);
        }
        
        public void UpdateLockedActivitiesToProcessMachineNameAsync(long activitytoprocessid, System.DateTime start, string machineName, object userState) {
            if ((this.onBeginUpdateLockedActivitiesToProcessMachineNameDelegate == null)) {
                this.onBeginUpdateLockedActivitiesToProcessMachineNameDelegate = new BeginOperationDelegate(this.OnBeginUpdateLockedActivitiesToProcessMachineName);
            }
            if ((this.onEndUpdateLockedActivitiesToProcessMachineNameDelegate == null)) {
                this.onEndUpdateLockedActivitiesToProcessMachineNameDelegate = new EndOperationDelegate(this.OnEndUpdateLockedActivitiesToProcessMachineName);
            }
            if ((this.onUpdateLockedActivitiesToProcessMachineNameCompletedDelegate == null)) {
                this.onUpdateLockedActivitiesToProcessMachineNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateLockedActivitiesToProcessMachineNameCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateLockedActivitiesToProcessMachineNameDelegate, new object[] {
                        activitytoprocessid,
                        start,
                        machineName}, this.onEndUpdateLockedActivitiesToProcessMachineNameDelegate, this.onUpdateLockedActivitiesToProcessMachineNameCompletedDelegate, userState);
        }
        
        public bool UpdateLockedActivitiesToProcessMachineNameByBatch(long activitytoprocessid, string lockName, string batchName, string cachePath) {
            return base.Channel.UpdateLockedActivitiesToProcessMachineNameByBatch(activitytoprocessid, lockName, batchName, cachePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateLockedActivitiesToProcessMachineNameByBatch(long activitytoprocessid, string lockName, string batchName, string cachePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateLockedActivitiesToProcessMachineNameByBatch(activitytoprocessid, lockName, batchName, cachePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateLockedActivitiesToProcessMachineNameByBatch(System.IAsyncResult result) {
            return base.Channel.EndUpdateLockedActivitiesToProcessMachineNameByBatch(result);
        }
        
        private System.IAsyncResult OnBeginUpdateLockedActivitiesToProcessMachineNameByBatch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activitytoprocessid = ((long)(inValues[0]));
            string lockName = ((string)(inValues[1]));
            string batchName = ((string)(inValues[2]));
            string cachePath = ((string)(inValues[3]));
            return this.BeginUpdateLockedActivitiesToProcessMachineNameByBatch(activitytoprocessid, lockName, batchName, cachePath, callback, asyncState);
        }
        
        private object[] OnEndUpdateLockedActivitiesToProcessMachineNameByBatch(System.IAsyncResult result) {
            bool retVal = this.EndUpdateLockedActivitiesToProcessMachineNameByBatch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateLockedActivitiesToProcessMachineNameByBatchCompleted(object state) {
            if ((this.UpdateLockedActivitiesToProcessMachineNameByBatchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateLockedActivitiesToProcessMachineNameByBatchCompleted(this, new UpdateLockedActivitiesToProcessMachineNameByBatchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateLockedActivitiesToProcessMachineNameByBatchAsync(long activitytoprocessid, string lockName, string batchName, string cachePath) {
            this.UpdateLockedActivitiesToProcessMachineNameByBatchAsync(activitytoprocessid, lockName, batchName, cachePath, null);
        }
        
        public void UpdateLockedActivitiesToProcessMachineNameByBatchAsync(long activitytoprocessid, string lockName, string batchName, string cachePath, object userState) {
            if ((this.onBeginUpdateLockedActivitiesToProcessMachineNameByBatchDelegate == null)) {
                this.onBeginUpdateLockedActivitiesToProcessMachineNameByBatchDelegate = new BeginOperationDelegate(this.OnBeginUpdateLockedActivitiesToProcessMachineNameByBatch);
            }
            if ((this.onEndUpdateLockedActivitiesToProcessMachineNameByBatchDelegate == null)) {
                this.onEndUpdateLockedActivitiesToProcessMachineNameByBatchDelegate = new EndOperationDelegate(this.OnEndUpdateLockedActivitiesToProcessMachineNameByBatch);
            }
            if ((this.onUpdateLockedActivitiesToProcessMachineNameByBatchCompletedDelegate == null)) {
                this.onUpdateLockedActivitiesToProcessMachineNameByBatchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateLockedActivitiesToProcessMachineNameByBatchCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateLockedActivitiesToProcessMachineNameByBatchDelegate, new object[] {
                        activitytoprocessid,
                        lockName,
                        batchName,
                        cachePath}, this.onEndUpdateLockedActivitiesToProcessMachineNameByBatchDelegate, this.onUpdateLockedActivitiesToProcessMachineNameByBatchCompletedDelegate, userState);
        }
        
        public void UpdateActivitiesToProcessComplete(long activitytoprocessid, System.DateTime finish) {
            base.Channel.UpdateActivitiesToProcessComplete(activitytoprocessid, finish);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateActivitiesToProcessComplete(long activitytoprocessid, System.DateTime finish, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateActivitiesToProcessComplete(activitytoprocessid, finish, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateActivitiesToProcessComplete(System.IAsyncResult result) {
            base.Channel.EndUpdateActivitiesToProcessComplete(result);
        }
        
        private System.IAsyncResult OnBeginUpdateActivitiesToProcessComplete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activitytoprocessid = ((long)(inValues[0]));
            System.DateTime finish = ((System.DateTime)(inValues[1]));
            return this.BeginUpdateActivitiesToProcessComplete(activitytoprocessid, finish, callback, asyncState);
        }
        
        private object[] OnEndUpdateActivitiesToProcessComplete(System.IAsyncResult result) {
            this.EndUpdateActivitiesToProcessComplete(result);
            return null;
        }
        
        private void OnUpdateActivitiesToProcessCompleteCompleted(object state) {
            if ((this.UpdateActivitiesToProcessCompleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateActivitiesToProcessCompleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateActivitiesToProcessCompleteAsync(long activitytoprocessid, System.DateTime finish) {
            this.UpdateActivitiesToProcessCompleteAsync(activitytoprocessid, finish, null);
        }
        
        public void UpdateActivitiesToProcessCompleteAsync(long activitytoprocessid, System.DateTime finish, object userState) {
            if ((this.onBeginUpdateActivitiesToProcessCompleteDelegate == null)) {
                this.onBeginUpdateActivitiesToProcessCompleteDelegate = new BeginOperationDelegate(this.OnBeginUpdateActivitiesToProcessComplete);
            }
            if ((this.onEndUpdateActivitiesToProcessCompleteDelegate == null)) {
                this.onEndUpdateActivitiesToProcessCompleteDelegate = new EndOperationDelegate(this.OnEndUpdateActivitiesToProcessComplete);
            }
            if ((this.onUpdateActivitiesToProcessCompleteCompletedDelegate == null)) {
                this.onUpdateActivitiesToProcessCompleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateActivitiesToProcessCompleteCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateActivitiesToProcessCompleteDelegate, new object[] {
                        activitytoprocessid,
                        finish}, this.onEndUpdateActivitiesToProcessCompleteDelegate, this.onUpdateActivitiesToProcessCompleteCompletedDelegate, userState);
        }
        
        public void UpdateBatchCompleteStatus(long activitytoprocessid, long duration, long openDuration, string batchName, string cachePath) {
            base.Channel.UpdateBatchCompleteStatus(activitytoprocessid, duration, openDuration, batchName, cachePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateBatchCompleteStatus(long activitytoprocessid, long duration, long openDuration, string batchName, string cachePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateBatchCompleteStatus(activitytoprocessid, duration, openDuration, batchName, cachePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateBatchCompleteStatus(System.IAsyncResult result) {
            base.Channel.EndUpdateBatchCompleteStatus(result);
        }
        
        private System.IAsyncResult OnBeginUpdateBatchCompleteStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activitytoprocessid = ((long)(inValues[0]));
            long duration = ((long)(inValues[1]));
            long openDuration = ((long)(inValues[2]));
            string batchName = ((string)(inValues[3]));
            string cachePath = ((string)(inValues[4]));
            return this.BeginUpdateBatchCompleteStatus(activitytoprocessid, duration, openDuration, batchName, cachePath, callback, asyncState);
        }
        
        private object[] OnEndUpdateBatchCompleteStatus(System.IAsyncResult result) {
            this.EndUpdateBatchCompleteStatus(result);
            return null;
        }
        
        private void OnUpdateBatchCompleteStatusCompleted(object state) {
            if ((this.UpdateBatchCompleteStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateBatchCompleteStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateBatchCompleteStatusAsync(long activitytoprocessid, long duration, long openDuration, string batchName, string cachePath) {
            this.UpdateBatchCompleteStatusAsync(activitytoprocessid, duration, openDuration, batchName, cachePath, null);
        }
        
        public void UpdateBatchCompleteStatusAsync(long activitytoprocessid, long duration, long openDuration, string batchName, string cachePath, object userState) {
            if ((this.onBeginUpdateBatchCompleteStatusDelegate == null)) {
                this.onBeginUpdateBatchCompleteStatusDelegate = new BeginOperationDelegate(this.OnBeginUpdateBatchCompleteStatus);
            }
            if ((this.onEndUpdateBatchCompleteStatusDelegate == null)) {
                this.onEndUpdateBatchCompleteStatusDelegate = new EndOperationDelegate(this.OnEndUpdateBatchCompleteStatus);
            }
            if ((this.onUpdateBatchCompleteStatusCompletedDelegate == null)) {
                this.onUpdateBatchCompleteStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateBatchCompleteStatusCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateBatchCompleteStatusDelegate, new object[] {
                        activitytoprocessid,
                        duration,
                        openDuration,
                        batchName,
                        cachePath}, this.onEndUpdateBatchCompleteStatusDelegate, this.onUpdateBatchCompleteStatusCompletedDelegate, userState);
        }
        
        public void ResetActivityToProcessLocks(string machineName, System.Collections.Generic.List<string> activityClasses) {
            base.Channel.ResetActivityToProcessLocks(machineName, activityClasses);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetActivityToProcessLocks(string machineName, System.Collections.Generic.List<string> activityClasses, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetActivityToProcessLocks(machineName, activityClasses, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndResetActivityToProcessLocks(System.IAsyncResult result) {
            base.Channel.EndResetActivityToProcessLocks(result);
        }
        
        private System.IAsyncResult OnBeginResetActivityToProcessLocks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string machineName = ((string)(inValues[0]));
            System.Collections.Generic.List<string> activityClasses = ((System.Collections.Generic.List<string>)(inValues[1]));
            return this.BeginResetActivityToProcessLocks(machineName, activityClasses, callback, asyncState);
        }
        
        private object[] OnEndResetActivityToProcessLocks(System.IAsyncResult result) {
            this.EndResetActivityToProcessLocks(result);
            return null;
        }
        
        private void OnResetActivityToProcessLocksCompleted(object state) {
            if ((this.ResetActivityToProcessLocksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetActivityToProcessLocksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetActivityToProcessLocksAsync(string machineName, System.Collections.Generic.List<string> activityClasses) {
            this.ResetActivityToProcessLocksAsync(machineName, activityClasses, null);
        }
        
        public void ResetActivityToProcessLocksAsync(string machineName, System.Collections.Generic.List<string> activityClasses, object userState) {
            if ((this.onBeginResetActivityToProcessLocksDelegate == null)) {
                this.onBeginResetActivityToProcessLocksDelegate = new BeginOperationDelegate(this.OnBeginResetActivityToProcessLocks);
            }
            if ((this.onEndResetActivityToProcessLocksDelegate == null)) {
                this.onEndResetActivityToProcessLocksDelegate = new EndOperationDelegate(this.OnEndResetActivityToProcessLocks);
            }
            if ((this.onResetActivityToProcessLocksCompletedDelegate == null)) {
                this.onResetActivityToProcessLocksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetActivityToProcessLocksCompleted);
            }
            base.InvokeAsync(this.onBeginResetActivityToProcessLocksDelegate, new object[] {
                        machineName,
                        activityClasses}, this.onEndResetActivityToProcessLocksDelegate, this.onResetActivityToProcessLocksCompletedDelegate, userState);
        }
        
        public void UnlockActivityToProcess(long activitytoprocessid) {
            base.Channel.UnlockActivityToProcess(activitytoprocessid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnlockActivityToProcess(long activitytoprocessid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnlockActivityToProcess(activitytoprocessid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUnlockActivityToProcess(System.IAsyncResult result) {
            base.Channel.EndUnlockActivityToProcess(result);
        }
        
        private System.IAsyncResult OnBeginUnlockActivityToProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activitytoprocessid = ((long)(inValues[0]));
            return this.BeginUnlockActivityToProcess(activitytoprocessid, callback, asyncState);
        }
        
        private object[] OnEndUnlockActivityToProcess(System.IAsyncResult result) {
            this.EndUnlockActivityToProcess(result);
            return null;
        }
        
        private void OnUnlockActivityToProcessCompleted(object state) {
            if ((this.UnlockActivityToProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnlockActivityToProcessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnlockActivityToProcessAsync(long activitytoprocessid) {
            this.UnlockActivityToProcessAsync(activitytoprocessid, null);
        }
        
        public void UnlockActivityToProcessAsync(long activitytoprocessid, object userState) {
            if ((this.onBeginUnlockActivityToProcessDelegate == null)) {
                this.onBeginUnlockActivityToProcessDelegate = new BeginOperationDelegate(this.OnBeginUnlockActivityToProcess);
            }
            if ((this.onEndUnlockActivityToProcessDelegate == null)) {
                this.onEndUnlockActivityToProcessDelegate = new EndOperationDelegate(this.OnEndUnlockActivityToProcess);
            }
            if ((this.onUnlockActivityToProcessCompletedDelegate == null)) {
                this.onUnlockActivityToProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnlockActivityToProcessCompleted);
            }
            base.InvokeAsync(this.onBeginUnlockActivityToProcessDelegate, new object[] {
                        activitytoprocessid}, this.onEndUnlockActivityToProcessDelegate, this.onUnlockActivityToProcessCompletedDelegate, userState);
        }
        
        public void UnlockActivityToProcessByBatch(long activitytoprocessid, string batchName) {
            base.Channel.UnlockActivityToProcessByBatch(activitytoprocessid, batchName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnlockActivityToProcessByBatch(long activitytoprocessid, string batchName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnlockActivityToProcessByBatch(activitytoprocessid, batchName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUnlockActivityToProcessByBatch(System.IAsyncResult result) {
            base.Channel.EndUnlockActivityToProcessByBatch(result);
        }
        
        private System.IAsyncResult OnBeginUnlockActivityToProcessByBatch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activitytoprocessid = ((long)(inValues[0]));
            string batchName = ((string)(inValues[1]));
            return this.BeginUnlockActivityToProcessByBatch(activitytoprocessid, batchName, callback, asyncState);
        }
        
        private object[] OnEndUnlockActivityToProcessByBatch(System.IAsyncResult result) {
            this.EndUnlockActivityToProcessByBatch(result);
            return null;
        }
        
        private void OnUnlockActivityToProcessByBatchCompleted(object state) {
            if ((this.UnlockActivityToProcessByBatchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnlockActivityToProcessByBatchCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnlockActivityToProcessByBatchAsync(long activitytoprocessid, string batchName) {
            this.UnlockActivityToProcessByBatchAsync(activitytoprocessid, batchName, null);
        }
        
        public void UnlockActivityToProcessByBatchAsync(long activitytoprocessid, string batchName, object userState) {
            if ((this.onBeginUnlockActivityToProcessByBatchDelegate == null)) {
                this.onBeginUnlockActivityToProcessByBatchDelegate = new BeginOperationDelegate(this.OnBeginUnlockActivityToProcessByBatch);
            }
            if ((this.onEndUnlockActivityToProcessByBatchDelegate == null)) {
                this.onEndUnlockActivityToProcessByBatchDelegate = new EndOperationDelegate(this.OnEndUnlockActivityToProcessByBatch);
            }
            if ((this.onUnlockActivityToProcessByBatchCompletedDelegate == null)) {
                this.onUnlockActivityToProcessByBatchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnlockActivityToProcessByBatchCompleted);
            }
            base.InvokeAsync(this.onBeginUnlockActivityToProcessByBatchDelegate, new object[] {
                        activitytoprocessid,
                        batchName}, this.onEndUnlockActivityToProcessByBatchDelegate, this.onUnlockActivityToProcessByBatchCompletedDelegate, userState);
        }
        
        public void UnlockActivityToProcessByBatchActivityNumber(long activityToProcessActivityNumber, string batchName) {
            base.Channel.UnlockActivityToProcessByBatchActivityNumber(activityToProcessActivityNumber, batchName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUnlockActivityToProcessByBatchActivityNumber(long activityToProcessActivityNumber, string batchName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnlockActivityToProcessByBatchActivityNumber(activityToProcessActivityNumber, batchName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUnlockActivityToProcessByBatchActivityNumber(System.IAsyncResult result) {
            base.Channel.EndUnlockActivityToProcessByBatchActivityNumber(result);
        }
        
        private System.IAsyncResult OnBeginUnlockActivityToProcessByBatchActivityNumber(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activityToProcessActivityNumber = ((long)(inValues[0]));
            string batchName = ((string)(inValues[1]));
            return this.BeginUnlockActivityToProcessByBatchActivityNumber(activityToProcessActivityNumber, batchName, callback, asyncState);
        }
        
        private object[] OnEndUnlockActivityToProcessByBatchActivityNumber(System.IAsyncResult result) {
            this.EndUnlockActivityToProcessByBatchActivityNumber(result);
            return null;
        }
        
        private void OnUnlockActivityToProcessByBatchActivityNumberCompleted(object state) {
            if ((this.UnlockActivityToProcessByBatchActivityNumberCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnlockActivityToProcessByBatchActivityNumberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnlockActivityToProcessByBatchActivityNumberAsync(long activityToProcessActivityNumber, string batchName) {
            this.UnlockActivityToProcessByBatchActivityNumberAsync(activityToProcessActivityNumber, batchName, null);
        }
        
        public void UnlockActivityToProcessByBatchActivityNumberAsync(long activityToProcessActivityNumber, string batchName, object userState) {
            if ((this.onBeginUnlockActivityToProcessByBatchActivityNumberDelegate == null)) {
                this.onBeginUnlockActivityToProcessByBatchActivityNumberDelegate = new BeginOperationDelegate(this.OnBeginUnlockActivityToProcessByBatchActivityNumber);
            }
            if ((this.onEndUnlockActivityToProcessByBatchActivityNumberDelegate == null)) {
                this.onEndUnlockActivityToProcessByBatchActivityNumberDelegate = new EndOperationDelegate(this.OnEndUnlockActivityToProcessByBatchActivityNumber);
            }
            if ((this.onUnlockActivityToProcessByBatchActivityNumberCompletedDelegate == null)) {
                this.onUnlockActivityToProcessByBatchActivityNumberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnlockActivityToProcessByBatchActivityNumberCompleted);
            }
            base.InvokeAsync(this.onBeginUnlockActivityToProcessByBatchActivityNumberDelegate, new object[] {
                        activityToProcessActivityNumber,
                        batchName}, this.onEndUnlockActivityToProcessByBatchActivityNumberDelegate, this.onUnlockActivityToProcessByBatchActivityNumberCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess GetAllActivities() {
            return base.Channel.GetAllActivities();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllActivities(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllActivities(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivitiesToProcess EndGetAllActivities(System.IAsyncResult result) {
            return base.Channel.EndGetAllActivities(result);
        }
        
        private System.IAsyncResult OnBeginGetAllActivities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllActivities(callback, asyncState);
        }
        
        private object[] OnEndGetAllActivities(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivitiesToProcess retVal = this.EndGetAllActivities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllActivitiesCompleted(object state) {
            if ((this.GetAllActivitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllActivitiesCompleted(this, new GetAllActivitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllActivitiesAsync() {
            this.GetAllActivitiesAsync(null);
        }
        
        public void GetAllActivitiesAsync(object userState) {
            if ((this.onBeginGetAllActivitiesDelegate == null)) {
                this.onBeginGetAllActivitiesDelegate = new BeginOperationDelegate(this.OnBeginGetAllActivities);
            }
            if ((this.onEndGetAllActivitiesDelegate == null)) {
                this.onEndGetAllActivitiesDelegate = new EndOperationDelegate(this.OnEndGetAllActivities);
            }
            if ((this.onGetAllActivitiesCompletedDelegate == null)) {
                this.onGetAllActivitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllActivitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllActivitiesDelegate, null, this.onEndGetAllActivitiesDelegate, this.onGetAllActivitiesCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess GetActivitiesToProcess() {
            return base.Channel.GetActivitiesToProcess();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetActivitiesToProcess(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActivitiesToProcess(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivitiesToProcess EndGetActivitiesToProcess(System.IAsyncResult result) {
            return base.Channel.EndGetActivitiesToProcess(result);
        }
        
        private System.IAsyncResult OnBeginGetActivitiesToProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetActivitiesToProcess(callback, asyncState);
        }
        
        private object[] OnEndGetActivitiesToProcess(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivitiesToProcess retVal = this.EndGetActivitiesToProcess(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActivitiesToProcessCompleted(object state) {
            if ((this.GetActivitiesToProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActivitiesToProcessCompleted(this, new GetActivitiesToProcessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActivitiesToProcessAsync() {
            this.GetActivitiesToProcessAsync(null);
        }
        
        public void GetActivitiesToProcessAsync(object userState) {
            if ((this.onBeginGetActivitiesToProcessDelegate == null)) {
                this.onBeginGetActivitiesToProcessDelegate = new BeginOperationDelegate(this.OnBeginGetActivitiesToProcess);
            }
            if ((this.onEndGetActivitiesToProcessDelegate == null)) {
                this.onEndGetActivitiesToProcessDelegate = new EndOperationDelegate(this.OnEndGetActivitiesToProcess);
            }
            if ((this.onGetActivitiesToProcessCompletedDelegate == null)) {
                this.onGetActivitiesToProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActivitiesToProcessCompleted);
            }
            base.InvokeAsync(this.onBeginGetActivitiesToProcessDelegate, null, this.onEndGetActivitiesToProcessDelegate, this.onGetActivitiesToProcessCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityToProcess GetActivityToProcess(System.Collections.Generic.List<string> activityClasses) {
            return base.Channel.GetActivityToProcess(activityClasses);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetActivityToProcess(System.Collections.Generic.List<string> activityClasses, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActivityToProcess(activityClasses, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityToProcess EndGetActivityToProcess(System.IAsyncResult result) {
            return base.Channel.EndGetActivityToProcess(result);
        }
        
        private System.IAsyncResult OnBeginGetActivityToProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> activityClasses = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginGetActivityToProcess(activityClasses, callback, asyncState);
        }
        
        private object[] OnEndGetActivityToProcess(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityToProcess retVal = this.EndGetActivityToProcess(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActivityToProcessCompleted(object state) {
            if ((this.GetActivityToProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActivityToProcessCompleted(this, new GetActivityToProcessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActivityToProcessAsync(System.Collections.Generic.List<string> activityClasses) {
            this.GetActivityToProcessAsync(activityClasses, null);
        }
        
        public void GetActivityToProcessAsync(System.Collections.Generic.List<string> activityClasses, object userState) {
            if ((this.onBeginGetActivityToProcessDelegate == null)) {
                this.onBeginGetActivityToProcessDelegate = new BeginOperationDelegate(this.OnBeginGetActivityToProcess);
            }
            if ((this.onEndGetActivityToProcessDelegate == null)) {
                this.onEndGetActivityToProcessDelegate = new EndOperationDelegate(this.OnEndGetActivityToProcess);
            }
            if ((this.onGetActivityToProcessCompletedDelegate == null)) {
                this.onGetActivityToProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActivityToProcessCompleted);
            }
            base.InvokeAsync(this.onBeginGetActivityToProcessDelegate, new object[] {
                        activityClasses}, this.onEndGetActivityToProcessDelegate, this.onGetActivityToProcessCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityToProcess GetActivityToProcessWithLock(System.Collections.Generic.List<string> activityClasses, string machineName) {
            return base.Channel.GetActivityToProcessWithLock(activityClasses, machineName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetActivityToProcessWithLock(System.Collections.Generic.List<string> activityClasses, string machineName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActivityToProcessWithLock(activityClasses, machineName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityToProcess EndGetActivityToProcessWithLock(System.IAsyncResult result) {
            return base.Channel.EndGetActivityToProcessWithLock(result);
        }
        
        private System.IAsyncResult OnBeginGetActivityToProcessWithLock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> activityClasses = ((System.Collections.Generic.List<string>)(inValues[0]));
            string machineName = ((string)(inValues[1]));
            return this.BeginGetActivityToProcessWithLock(activityClasses, machineName, callback, asyncState);
        }
        
        private object[] OnEndGetActivityToProcessWithLock(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityToProcess retVal = this.EndGetActivityToProcessWithLock(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActivityToProcessWithLockCompleted(object state) {
            if ((this.GetActivityToProcessWithLockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActivityToProcessWithLockCompleted(this, new GetActivityToProcessWithLockCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActivityToProcessWithLockAsync(System.Collections.Generic.List<string> activityClasses, string machineName) {
            this.GetActivityToProcessWithLockAsync(activityClasses, machineName, null);
        }
        
        public void GetActivityToProcessWithLockAsync(System.Collections.Generic.List<string> activityClasses, string machineName, object userState) {
            if ((this.onBeginGetActivityToProcessWithLockDelegate == null)) {
                this.onBeginGetActivityToProcessWithLockDelegate = new BeginOperationDelegate(this.OnBeginGetActivityToProcessWithLock);
            }
            if ((this.onEndGetActivityToProcessWithLockDelegate == null)) {
                this.onEndGetActivityToProcessWithLockDelegate = new EndOperationDelegate(this.OnEndGetActivityToProcessWithLock);
            }
            if ((this.onGetActivityToProcessWithLockCompletedDelegate == null)) {
                this.onGetActivityToProcessWithLockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActivityToProcessWithLockCompleted);
            }
            base.InvokeAsync(this.onBeginGetActivityToProcessWithLockDelegate, new object[] {
                        activityClasses,
                        machineName}, this.onEndGetActivityToProcessWithLockDelegate, this.onGetActivityToProcessWithLockCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityToProcess> GetMultipleActivityToProcessWithLock(System.Collections.Generic.List<string> activityClasses, string machineName, int rowsToLock) {
            return base.Channel.GetMultipleActivityToProcessWithLock(activityClasses, machineName, rowsToLock);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMultipleActivityToProcessWithLock(System.Collections.Generic.List<string> activityClasses, string machineName, int rowsToLock, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMultipleActivityToProcessWithLock(activityClasses, machineName, rowsToLock, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityToProcess> EndGetMultipleActivityToProcessWithLock(System.IAsyncResult result) {
            return base.Channel.EndGetMultipleActivityToProcessWithLock(result);
        }
        
        private System.IAsyncResult OnBeginGetMultipleActivityToProcessWithLock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> activityClasses = ((System.Collections.Generic.List<string>)(inValues[0]));
            string machineName = ((string)(inValues[1]));
            int rowsToLock = ((int)(inValues[2]));
            return this.BeginGetMultipleActivityToProcessWithLock(activityClasses, machineName, rowsToLock, callback, asyncState);
        }
        
        private object[] OnEndGetMultipleActivityToProcessWithLock(System.IAsyncResult result) {
            System.Collections.Generic.List<BatCheese.Data.BatchService.ActivityToProcess> retVal = this.EndGetMultipleActivityToProcessWithLock(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMultipleActivityToProcessWithLockCompleted(object state) {
            if ((this.GetMultipleActivityToProcessWithLockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMultipleActivityToProcessWithLockCompleted(this, new GetMultipleActivityToProcessWithLockCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMultipleActivityToProcessWithLockAsync(System.Collections.Generic.List<string> activityClasses, string machineName, int rowsToLock) {
            this.GetMultipleActivityToProcessWithLockAsync(activityClasses, machineName, rowsToLock, null);
        }
        
        public void GetMultipleActivityToProcessWithLockAsync(System.Collections.Generic.List<string> activityClasses, string machineName, int rowsToLock, object userState) {
            if ((this.onBeginGetMultipleActivityToProcessWithLockDelegate == null)) {
                this.onBeginGetMultipleActivityToProcessWithLockDelegate = new BeginOperationDelegate(this.OnBeginGetMultipleActivityToProcessWithLock);
            }
            if ((this.onEndGetMultipleActivityToProcessWithLockDelegate == null)) {
                this.onEndGetMultipleActivityToProcessWithLockDelegate = new EndOperationDelegate(this.OnEndGetMultipleActivityToProcessWithLock);
            }
            if ((this.onGetMultipleActivityToProcessWithLockCompletedDelegate == null)) {
                this.onGetMultipleActivityToProcessWithLockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMultipleActivityToProcessWithLockCompleted);
            }
            base.InvokeAsync(this.onBeginGetMultipleActivityToProcessWithLockDelegate, new object[] {
                        activityClasses,
                        machineName,
                        rowsToLock}, this.onEndGetMultipleActivityToProcessWithLockDelegate, this.onGetMultipleActivityToProcessWithLockCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ActivitiesToProcess> GetMultipleActivityToProcessWithLockByBatch(string serverType, string machineName, int rowsToLock) {
            return base.Channel.GetMultipleActivityToProcessWithLockByBatch(serverType, machineName, rowsToLock);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMultipleActivityToProcessWithLockByBatch(string serverType, string machineName, int rowsToLock, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMultipleActivityToProcessWithLockByBatch(serverType, machineName, rowsToLock, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ActivitiesToProcess> EndGetMultipleActivityToProcessWithLockByBatch(System.IAsyncResult result) {
            return base.Channel.EndGetMultipleActivityToProcessWithLockByBatch(result);
        }
        
        private System.IAsyncResult OnBeginGetMultipleActivityToProcessWithLockByBatch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string serverType = ((string)(inValues[0]));
            string machineName = ((string)(inValues[1]));
            int rowsToLock = ((int)(inValues[2]));
            return this.BeginGetMultipleActivityToProcessWithLockByBatch(serverType, machineName, rowsToLock, callback, asyncState);
        }
        
        private object[] OnEndGetMultipleActivityToProcessWithLockByBatch(System.IAsyncResult result) {
            System.Collections.Generic.List<BatCheese.Data.BatchService.ActivitiesToProcess> retVal = this.EndGetMultipleActivityToProcessWithLockByBatch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMultipleActivityToProcessWithLockByBatchCompleted(object state) {
            if ((this.GetMultipleActivityToProcessWithLockByBatchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMultipleActivityToProcessWithLockByBatchCompleted(this, new GetMultipleActivityToProcessWithLockByBatchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMultipleActivityToProcessWithLockByBatchAsync(string serverType, string machineName, int rowsToLock) {
            this.GetMultipleActivityToProcessWithLockByBatchAsync(serverType, machineName, rowsToLock, null);
        }
        
        public void GetMultipleActivityToProcessWithLockByBatchAsync(string serverType, string machineName, int rowsToLock, object userState) {
            if ((this.onBeginGetMultipleActivityToProcessWithLockByBatchDelegate == null)) {
                this.onBeginGetMultipleActivityToProcessWithLockByBatchDelegate = new BeginOperationDelegate(this.OnBeginGetMultipleActivityToProcessWithLockByBatch);
            }
            if ((this.onEndGetMultipleActivityToProcessWithLockByBatchDelegate == null)) {
                this.onEndGetMultipleActivityToProcessWithLockByBatchDelegate = new EndOperationDelegate(this.OnEndGetMultipleActivityToProcessWithLockByBatch);
            }
            if ((this.onGetMultipleActivityToProcessWithLockByBatchCompletedDelegate == null)) {
                this.onGetMultipleActivityToProcessWithLockByBatchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMultipleActivityToProcessWithLockByBatchCompleted);
            }
            base.InvokeAsync(this.onBeginGetMultipleActivityToProcessWithLockByBatchDelegate, new object[] {
                        serverType,
                        machineName,
                        rowsToLock}, this.onEndGetMultipleActivityToProcessWithLockByBatchDelegate, this.onGetMultipleActivityToProcessWithLockByBatchCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess GetManualActivitiesToProcess(System.Collections.Generic.List<string> cachepaths, string activityname) {
            return base.Channel.GetManualActivitiesToProcess(cachepaths, activityname);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetManualActivitiesToProcess(System.Collections.Generic.List<string> cachepaths, string activityname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetManualActivitiesToProcess(cachepaths, activityname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivitiesToProcess EndGetManualActivitiesToProcess(System.IAsyncResult result) {
            return base.Channel.EndGetManualActivitiesToProcess(result);
        }
        
        private System.IAsyncResult OnBeginGetManualActivitiesToProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> cachepaths = ((System.Collections.Generic.List<string>)(inValues[0]));
            string activityname = ((string)(inValues[1]));
            return this.BeginGetManualActivitiesToProcess(cachepaths, activityname, callback, asyncState);
        }
        
        private object[] OnEndGetManualActivitiesToProcess(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivitiesToProcess retVal = this.EndGetManualActivitiesToProcess(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetManualActivitiesToProcessCompleted(object state) {
            if ((this.GetManualActivitiesToProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetManualActivitiesToProcessCompleted(this, new GetManualActivitiesToProcessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetManualActivitiesToProcessAsync(System.Collections.Generic.List<string> cachepaths, string activityname) {
            this.GetManualActivitiesToProcessAsync(cachepaths, activityname, null);
        }
        
        public void GetManualActivitiesToProcessAsync(System.Collections.Generic.List<string> cachepaths, string activityname, object userState) {
            if ((this.onBeginGetManualActivitiesToProcessDelegate == null)) {
                this.onBeginGetManualActivitiesToProcessDelegate = new BeginOperationDelegate(this.OnBeginGetManualActivitiesToProcess);
            }
            if ((this.onEndGetManualActivitiesToProcessDelegate == null)) {
                this.onEndGetManualActivitiesToProcessDelegate = new EndOperationDelegate(this.OnEndGetManualActivitiesToProcess);
            }
            if ((this.onGetManualActivitiesToProcessCompletedDelegate == null)) {
                this.onGetManualActivitiesToProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetManualActivitiesToProcessCompleted);
            }
            base.InvokeAsync(this.onBeginGetManualActivitiesToProcessDelegate, new object[] {
                        cachepaths,
                        activityname}, this.onEndGetManualActivitiesToProcessDelegate, this.onGetManualActivitiesToProcessCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess GetManualActivitiesByProcess(System.Collections.Generic.List<string> cachepaths, string activityname, System.Collections.Generic.List<string> processnames) {
            return base.Channel.GetManualActivitiesByProcess(cachepaths, activityname, processnames);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetManualActivitiesByProcess(System.Collections.Generic.List<string> cachepaths, string activityname, System.Collections.Generic.List<string> processnames, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetManualActivitiesByProcess(cachepaths, activityname, processnames, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivitiesToProcess EndGetManualActivitiesByProcess(System.IAsyncResult result) {
            return base.Channel.EndGetManualActivitiesByProcess(result);
        }
        
        private System.IAsyncResult OnBeginGetManualActivitiesByProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> cachepaths = ((System.Collections.Generic.List<string>)(inValues[0]));
            string activityname = ((string)(inValues[1]));
            System.Collections.Generic.List<string> processnames = ((System.Collections.Generic.List<string>)(inValues[2]));
            return this.BeginGetManualActivitiesByProcess(cachepaths, activityname, processnames, callback, asyncState);
        }
        
        private object[] OnEndGetManualActivitiesByProcess(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivitiesToProcess retVal = this.EndGetManualActivitiesByProcess(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetManualActivitiesByProcessCompleted(object state) {
            if ((this.GetManualActivitiesByProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetManualActivitiesByProcessCompleted(this, new GetManualActivitiesByProcessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetManualActivitiesByProcessAsync(System.Collections.Generic.List<string> cachepaths, string activityname, System.Collections.Generic.List<string> processnames) {
            this.GetManualActivitiesByProcessAsync(cachepaths, activityname, processnames, null);
        }
        
        public void GetManualActivitiesByProcessAsync(System.Collections.Generic.List<string> cachepaths, string activityname, System.Collections.Generic.List<string> processnames, object userState) {
            if ((this.onBeginGetManualActivitiesByProcessDelegate == null)) {
                this.onBeginGetManualActivitiesByProcessDelegate = new BeginOperationDelegate(this.OnBeginGetManualActivitiesByProcess);
            }
            if ((this.onEndGetManualActivitiesByProcessDelegate == null)) {
                this.onEndGetManualActivitiesByProcessDelegate = new EndOperationDelegate(this.OnEndGetManualActivitiesByProcess);
            }
            if ((this.onGetManualActivitiesByProcessCompletedDelegate == null)) {
                this.onGetManualActivitiesByProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetManualActivitiesByProcessCompleted);
            }
            base.InvokeAsync(this.onBeginGetManualActivitiesByProcessDelegate, new object[] {
                        cachepaths,
                        activityname,
                        processnames}, this.onEndGetManualActivitiesByProcessDelegate, this.onGetManualActivitiesByProcessCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityToProcess GetManualActivityInProcess(string batchname, string cachepath) {
            return base.Channel.GetManualActivityInProcess(batchname, cachepath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetManualActivityInProcess(string batchname, string cachepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetManualActivityInProcess(batchname, cachepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityToProcess EndGetManualActivityInProcess(System.IAsyncResult result) {
            return base.Channel.EndGetManualActivityInProcess(result);
        }
        
        private System.IAsyncResult OnBeginGetManualActivityInProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            return this.BeginGetManualActivityInProcess(batchname, cachepath, callback, asyncState);
        }
        
        private object[] OnEndGetManualActivityInProcess(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityToProcess retVal = this.EndGetManualActivityInProcess(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetManualActivityInProcessCompleted(object state) {
            if ((this.GetManualActivityInProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetManualActivityInProcessCompleted(this, new GetManualActivityInProcessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetManualActivityInProcessAsync(string batchname, string cachepath) {
            this.GetManualActivityInProcessAsync(batchname, cachepath, null);
        }
        
        public void GetManualActivityInProcessAsync(string batchname, string cachepath, object userState) {
            if ((this.onBeginGetManualActivityInProcessDelegate == null)) {
                this.onBeginGetManualActivityInProcessDelegate = new BeginOperationDelegate(this.OnBeginGetManualActivityInProcess);
            }
            if ((this.onEndGetManualActivityInProcessDelegate == null)) {
                this.onEndGetManualActivityInProcessDelegate = new EndOperationDelegate(this.OnEndGetManualActivityInProcess);
            }
            if ((this.onGetManualActivityInProcessCompletedDelegate == null)) {
                this.onGetManualActivityInProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetManualActivityInProcessCompleted);
            }
            base.InvokeAsync(this.onBeginGetManualActivityInProcessDelegate, new object[] {
                        batchname,
                        cachepath}, this.onEndGetManualActivityInProcessDelegate, this.onGetManualActivityInProcessCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess GetActivitiesForBatch(string batchName, string cachePath) {
            return base.Channel.GetActivitiesForBatch(batchName, cachePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetActivitiesForBatch(string batchName, string cachePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActivitiesForBatch(batchName, cachePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivitiesToProcess EndGetActivitiesForBatch(System.IAsyncResult result) {
            return base.Channel.EndGetActivitiesForBatch(result);
        }
        
        private System.IAsyncResult OnBeginGetActivitiesForBatch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchName = ((string)(inValues[0]));
            string cachePath = ((string)(inValues[1]));
            return this.BeginGetActivitiesForBatch(batchName, cachePath, callback, asyncState);
        }
        
        private object[] OnEndGetActivitiesForBatch(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivitiesToProcess retVal = this.EndGetActivitiesForBatch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActivitiesForBatchCompleted(object state) {
            if ((this.GetActivitiesForBatchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActivitiesForBatchCompleted(this, new GetActivitiesForBatchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActivitiesForBatchAsync(string batchName, string cachePath) {
            this.GetActivitiesForBatchAsync(batchName, cachePath, null);
        }
        
        public void GetActivitiesForBatchAsync(string batchName, string cachePath, object userState) {
            if ((this.onBeginGetActivitiesForBatchDelegate == null)) {
                this.onBeginGetActivitiesForBatchDelegate = new BeginOperationDelegate(this.OnBeginGetActivitiesForBatch);
            }
            if ((this.onEndGetActivitiesForBatchDelegate == null)) {
                this.onEndGetActivitiesForBatchDelegate = new EndOperationDelegate(this.OnEndGetActivitiesForBatch);
            }
            if ((this.onGetActivitiesForBatchCompletedDelegate == null)) {
                this.onGetActivitiesForBatchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActivitiesForBatchCompleted);
            }
            base.InvokeAsync(this.onBeginGetActivitiesForBatchDelegate, new object[] {
                        batchName,
                        cachePath}, this.onEndGetActivitiesForBatchDelegate, this.onGetActivitiesForBatchCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivitiesToProcess GetCompletedBatches() {
            return base.Channel.GetCompletedBatches();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCompletedBatches(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompletedBatches(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivitiesToProcess EndGetCompletedBatches(System.IAsyncResult result) {
            return base.Channel.EndGetCompletedBatches(result);
        }
        
        private System.IAsyncResult OnBeginGetCompletedBatches(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetCompletedBatches(callback, asyncState);
        }
        
        private object[] OnEndGetCompletedBatches(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivitiesToProcess retVal = this.EndGetCompletedBatches(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompletedBatchesCompleted(object state) {
            if ((this.GetCompletedBatchesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompletedBatchesCompleted(this, new GetCompletedBatchesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompletedBatchesAsync() {
            this.GetCompletedBatchesAsync(null);
        }
        
        public void GetCompletedBatchesAsync(object userState) {
            if ((this.onBeginGetCompletedBatchesDelegate == null)) {
                this.onBeginGetCompletedBatchesDelegate = new BeginOperationDelegate(this.OnBeginGetCompletedBatches);
            }
            if ((this.onEndGetCompletedBatchesDelegate == null)) {
                this.onEndGetCompletedBatchesDelegate = new EndOperationDelegate(this.OnEndGetCompletedBatches);
            }
            if ((this.onGetCompletedBatchesCompletedDelegate == null)) {
                this.onGetCompletedBatchesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompletedBatchesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompletedBatchesDelegate, null, this.onEndGetCompletedBatchesDelegate, this.onGetCompletedBatchesCompletedDelegate, userState);
        }
        
        public bool BatchExists(string batchname, string cachepath) {
            return base.Channel.BatchExists(batchname, cachepath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBatchExists(string batchname, string cachepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBatchExists(batchname, cachepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndBatchExists(System.IAsyncResult result) {
            return base.Channel.EndBatchExists(result);
        }
        
        private System.IAsyncResult OnBeginBatchExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            return this.BeginBatchExists(batchname, cachepath, callback, asyncState);
        }
        
        private object[] OnEndBatchExists(System.IAsyncResult result) {
            bool retVal = this.EndBatchExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBatchExistsCompleted(object state) {
            if ((this.BatchExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BatchExistsCompleted(this, new BatchExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BatchExistsAsync(string batchname, string cachepath) {
            this.BatchExistsAsync(batchname, cachepath, null);
        }
        
        public void BatchExistsAsync(string batchname, string cachepath, object userState) {
            if ((this.onBeginBatchExistsDelegate == null)) {
                this.onBeginBatchExistsDelegate = new BeginOperationDelegate(this.OnBeginBatchExists);
            }
            if ((this.onEndBatchExistsDelegate == null)) {
                this.onEndBatchExistsDelegate = new EndOperationDelegate(this.OnEndBatchExists);
            }
            if ((this.onBatchExistsCompletedDelegate == null)) {
                this.onBatchExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBatchExistsCompleted);
            }
            base.InvokeAsync(this.onBeginBatchExistsDelegate, new object[] {
                        batchname,
                        cachepath}, this.onEndBatchExistsDelegate, this.onBatchExistsCompletedDelegate, userState);
        }
        
        public bool BatchInManualActivity(string batchname, string cachepath, string activityname) {
            return base.Channel.BatchInManualActivity(batchname, cachepath, activityname);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBatchInManualActivity(string batchname, string cachepath, string activityname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBatchInManualActivity(batchname, cachepath, activityname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndBatchInManualActivity(System.IAsyncResult result) {
            return base.Channel.EndBatchInManualActivity(result);
        }
        
        private System.IAsyncResult OnBeginBatchInManualActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            string activityname = ((string)(inValues[2]));
            return this.BeginBatchInManualActivity(batchname, cachepath, activityname, callback, asyncState);
        }
        
        private object[] OnEndBatchInManualActivity(System.IAsyncResult result) {
            bool retVal = this.EndBatchInManualActivity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBatchInManualActivityCompleted(object state) {
            if ((this.BatchInManualActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BatchInManualActivityCompleted(this, new BatchInManualActivityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BatchInManualActivityAsync(string batchname, string cachepath, string activityname) {
            this.BatchInManualActivityAsync(batchname, cachepath, activityname, null);
        }
        
        public void BatchInManualActivityAsync(string batchname, string cachepath, string activityname, object userState) {
            if ((this.onBeginBatchInManualActivityDelegate == null)) {
                this.onBeginBatchInManualActivityDelegate = new BeginOperationDelegate(this.OnBeginBatchInManualActivity);
            }
            if ((this.onEndBatchInManualActivityDelegate == null)) {
                this.onEndBatchInManualActivityDelegate = new EndOperationDelegate(this.OnEndBatchInManualActivity);
            }
            if ((this.onBatchInManualActivityCompletedDelegate == null)) {
                this.onBatchInManualActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBatchInManualActivityCompleted);
            }
            base.InvokeAsync(this.onBeginBatchInManualActivityDelegate, new object[] {
                        batchname,
                        cachepath,
                        activityname}, this.onEndBatchInManualActivityDelegate, this.onBatchInManualActivityCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityRegisters GetActivities() {
            return base.Channel.GetActivities();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetActivities(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActivities(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityRegisters EndGetActivities(System.IAsyncResult result) {
            return base.Channel.EndGetActivities(result);
        }
        
        private System.IAsyncResult OnBeginGetActivities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetActivities(callback, asyncState);
        }
        
        private object[] OnEndGetActivities(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityRegisters retVal = this.EndGetActivities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActivitiesCompleted(object state) {
            if ((this.GetActivitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActivitiesCompleted(this, new GetActivitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActivitiesAsync() {
            this.GetActivitiesAsync(null);
        }
        
        public void GetActivitiesAsync(object userState) {
            if ((this.onBeginGetActivitiesDelegate == null)) {
                this.onBeginGetActivitiesDelegate = new BeginOperationDelegate(this.OnBeginGetActivities);
            }
            if ((this.onEndGetActivitiesDelegate == null)) {
                this.onEndGetActivitiesDelegate = new EndOperationDelegate(this.OnEndGetActivities);
            }
            if ((this.onGetActivitiesCompletedDelegate == null)) {
                this.onGetActivitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActivitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetActivitiesDelegate, null, this.onEndGetActivitiesDelegate, this.onGetActivitiesCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityRegisters GetLocActivities(string culture) {
            return base.Channel.GetLocActivities(culture);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocActivities(string culture, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocActivities(culture, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityRegisters EndGetLocActivities(System.IAsyncResult result) {
            return base.Channel.EndGetLocActivities(result);
        }
        
        private System.IAsyncResult OnBeginGetLocActivities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string culture = ((string)(inValues[0]));
            return this.BeginGetLocActivities(culture, callback, asyncState);
        }
        
        private object[] OnEndGetLocActivities(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityRegisters retVal = this.EndGetLocActivities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocActivitiesCompleted(object state) {
            if ((this.GetLocActivitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocActivitiesCompleted(this, new GetLocActivitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocActivitiesAsync(string culture) {
            this.GetLocActivitiesAsync(culture, null);
        }
        
        public void GetLocActivitiesAsync(string culture, object userState) {
            if ((this.onBeginGetLocActivitiesDelegate == null)) {
                this.onBeginGetLocActivitiesDelegate = new BeginOperationDelegate(this.OnBeginGetLocActivities);
            }
            if ((this.onEndGetLocActivitiesDelegate == null)) {
                this.onEndGetLocActivitiesDelegate = new EndOperationDelegate(this.OnEndGetLocActivities);
            }
            if ((this.onGetLocActivitiesCompletedDelegate == null)) {
                this.onGetLocActivitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocActivitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocActivitiesDelegate, new object[] {
                        culture}, this.onEndGetLocActivitiesDelegate, this.onGetLocActivitiesCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityRegisters GetRegisteredActivities(string server, string machine) {
            return base.Channel.GetRegisteredActivities(server, machine);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRegisteredActivities(string server, string machine, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRegisteredActivities(server, machine, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityRegisters EndGetRegisteredActivities(System.IAsyncResult result) {
            return base.Channel.EndGetRegisteredActivities(result);
        }
        
        private System.IAsyncResult OnBeginGetRegisteredActivities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string server = ((string)(inValues[0]));
            string machine = ((string)(inValues[1]));
            return this.BeginGetRegisteredActivities(server, machine, callback, asyncState);
        }
        
        private object[] OnEndGetRegisteredActivities(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityRegisters retVal = this.EndGetRegisteredActivities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRegisteredActivitiesCompleted(object state) {
            if ((this.GetRegisteredActivitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRegisteredActivitiesCompleted(this, new GetRegisteredActivitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRegisteredActivitiesAsync(string server, string machine) {
            this.GetRegisteredActivitiesAsync(server, machine, null);
        }
        
        public void GetRegisteredActivitiesAsync(string server, string machine, object userState) {
            if ((this.onBeginGetRegisteredActivitiesDelegate == null)) {
                this.onBeginGetRegisteredActivitiesDelegate = new BeginOperationDelegate(this.OnBeginGetRegisteredActivities);
            }
            if ((this.onEndGetRegisteredActivitiesDelegate == null)) {
                this.onEndGetRegisteredActivitiesDelegate = new EndOperationDelegate(this.OnEndGetRegisteredActivities);
            }
            if ((this.onGetRegisteredActivitiesCompletedDelegate == null)) {
                this.onGetRegisteredActivitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRegisteredActivitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetRegisteredActivitiesDelegate, new object[] {
                        server,
                        machine}, this.onEndGetRegisteredActivitiesDelegate, this.onGetRegisteredActivitiesCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityRegisters GetRegisteredActiveActivities(string server, string machine) {
            return base.Channel.GetRegisteredActiveActivities(server, machine);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRegisteredActiveActivities(string server, string machine, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRegisteredActiveActivities(server, machine, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityRegisters EndGetRegisteredActiveActivities(System.IAsyncResult result) {
            return base.Channel.EndGetRegisteredActiveActivities(result);
        }
        
        private System.IAsyncResult OnBeginGetRegisteredActiveActivities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string server = ((string)(inValues[0]));
            string machine = ((string)(inValues[1]));
            return this.BeginGetRegisteredActiveActivities(server, machine, callback, asyncState);
        }
        
        private object[] OnEndGetRegisteredActiveActivities(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityRegisters retVal = this.EndGetRegisteredActiveActivities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRegisteredActiveActivitiesCompleted(object state) {
            if ((this.GetRegisteredActiveActivitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRegisteredActiveActivitiesCompleted(this, new GetRegisteredActiveActivitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRegisteredActiveActivitiesAsync(string server, string machine) {
            this.GetRegisteredActiveActivitiesAsync(server, machine, null);
        }
        
        public void GetRegisteredActiveActivitiesAsync(string server, string machine, object userState) {
            if ((this.onBeginGetRegisteredActiveActivitiesDelegate == null)) {
                this.onBeginGetRegisteredActiveActivitiesDelegate = new BeginOperationDelegate(this.OnBeginGetRegisteredActiveActivities);
            }
            if ((this.onEndGetRegisteredActiveActivitiesDelegate == null)) {
                this.onEndGetRegisteredActiveActivitiesDelegate = new EndOperationDelegate(this.OnEndGetRegisteredActiveActivities);
            }
            if ((this.onGetRegisteredActiveActivitiesCompletedDelegate == null)) {
                this.onGetRegisteredActiveActivitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRegisteredActiveActivitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetRegisteredActiveActivitiesDelegate, new object[] {
                        server,
                        machine}, this.onEndGetRegisteredActiveActivitiesDelegate, this.onGetRegisteredActiveActivitiesCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityHours GetActivityHours(string machine) {
            return base.Channel.GetActivityHours(machine);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetActivityHours(string machine, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActivityHours(machine, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityHours EndGetActivityHours(System.IAsyncResult result) {
            return base.Channel.EndGetActivityHours(result);
        }
        
        private System.IAsyncResult OnBeginGetActivityHours(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string machine = ((string)(inValues[0]));
            return this.BeginGetActivityHours(machine, callback, asyncState);
        }
        
        private object[] OnEndGetActivityHours(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityHours retVal = this.EndGetActivityHours(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActivityHoursCompleted(object state) {
            if ((this.GetActivityHoursCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActivityHoursCompleted(this, new GetActivityHoursCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActivityHoursAsync(string machine) {
            this.GetActivityHoursAsync(machine, null);
        }
        
        public void GetActivityHoursAsync(string machine, object userState) {
            if ((this.onBeginGetActivityHoursDelegate == null)) {
                this.onBeginGetActivityHoursDelegate = new BeginOperationDelegate(this.OnBeginGetActivityHours);
            }
            if ((this.onEndGetActivityHoursDelegate == null)) {
                this.onEndGetActivityHoursDelegate = new EndOperationDelegate(this.OnEndGetActivityHours);
            }
            if ((this.onGetActivityHoursCompletedDelegate == null)) {
                this.onGetActivityHoursCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActivityHoursCompleted);
            }
            base.InvokeAsync(this.onBeginGetActivityHoursDelegate, new object[] {
                        machine}, this.onEndGetActivityHoursDelegate, this.onGetActivityHoursCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.RepositorySchemaDefinitions GetRepositorySchemaDefinitions() {
            return base.Channel.GetRepositorySchemaDefinitions();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRepositorySchemaDefinitions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRepositorySchemaDefinitions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.RepositorySchemaDefinitions EndGetRepositorySchemaDefinitions(System.IAsyncResult result) {
            return base.Channel.EndGetRepositorySchemaDefinitions(result);
        }
        
        private System.IAsyncResult OnBeginGetRepositorySchemaDefinitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetRepositorySchemaDefinitions(callback, asyncState);
        }
        
        private object[] OnEndGetRepositorySchemaDefinitions(System.IAsyncResult result) {
            BatCheese.Data.BatchService.RepositorySchemaDefinitions retVal = this.EndGetRepositorySchemaDefinitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRepositorySchemaDefinitionsCompleted(object state) {
            if ((this.GetRepositorySchemaDefinitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRepositorySchemaDefinitionsCompleted(this, new GetRepositorySchemaDefinitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRepositorySchemaDefinitionsAsync() {
            this.GetRepositorySchemaDefinitionsAsync(null);
        }
        
        public void GetRepositorySchemaDefinitionsAsync(object userState) {
            if ((this.onBeginGetRepositorySchemaDefinitionsDelegate == null)) {
                this.onBeginGetRepositorySchemaDefinitionsDelegate = new BeginOperationDelegate(this.OnBeginGetRepositorySchemaDefinitions);
            }
            if ((this.onEndGetRepositorySchemaDefinitionsDelegate == null)) {
                this.onEndGetRepositorySchemaDefinitionsDelegate = new EndOperationDelegate(this.OnEndGetRepositorySchemaDefinitions);
            }
            if ((this.onGetRepositorySchemaDefinitionsCompletedDelegate == null)) {
                this.onGetRepositorySchemaDefinitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRepositorySchemaDefinitionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRepositorySchemaDefinitionsDelegate, null, this.onEndGetRepositorySchemaDefinitionsDelegate, this.onGetRepositorySchemaDefinitionsCompletedDelegate, userState);
        }
        
        public bool CheckRepositoryDefinition(string docClassURL) {
            return base.Channel.CheckRepositoryDefinition(docClassURL);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckRepositoryDefinition(string docClassURL, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckRepositoryDefinition(docClassURL, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckRepositoryDefinition(System.IAsyncResult result) {
            return base.Channel.EndCheckRepositoryDefinition(result);
        }
        
        private System.IAsyncResult OnBeginCheckRepositoryDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string docClassURL = ((string)(inValues[0]));
            return this.BeginCheckRepositoryDefinition(docClassURL, callback, asyncState);
        }
        
        private object[] OnEndCheckRepositoryDefinition(System.IAsyncResult result) {
            bool retVal = this.EndCheckRepositoryDefinition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckRepositoryDefinitionCompleted(object state) {
            if ((this.CheckRepositoryDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckRepositoryDefinitionCompleted(this, new CheckRepositoryDefinitionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckRepositoryDefinitionAsync(string docClassURL) {
            this.CheckRepositoryDefinitionAsync(docClassURL, null);
        }
        
        public void CheckRepositoryDefinitionAsync(string docClassURL, object userState) {
            if ((this.onBeginCheckRepositoryDefinitionDelegate == null)) {
                this.onBeginCheckRepositoryDefinitionDelegate = new BeginOperationDelegate(this.OnBeginCheckRepositoryDefinition);
            }
            if ((this.onEndCheckRepositoryDefinitionDelegate == null)) {
                this.onEndCheckRepositoryDefinitionDelegate = new EndOperationDelegate(this.OnEndCheckRepositoryDefinition);
            }
            if ((this.onCheckRepositoryDefinitionCompletedDelegate == null)) {
                this.onCheckRepositoryDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckRepositoryDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginCheckRepositoryDefinitionDelegate, new object[] {
                        docClassURL}, this.onEndCheckRepositoryDefinitionDelegate, this.onCheckRepositoryDefinitionCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.RepositoryDefinitions GetRepositoryDefinitions() {
            return base.Channel.GetRepositoryDefinitions();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRepositoryDefinitions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRepositoryDefinitions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.RepositoryDefinitions EndGetRepositoryDefinitions(System.IAsyncResult result) {
            return base.Channel.EndGetRepositoryDefinitions(result);
        }
        
        private System.IAsyncResult OnBeginGetRepositoryDefinitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetRepositoryDefinitions(callback, asyncState);
        }
        
        private object[] OnEndGetRepositoryDefinitions(System.IAsyncResult result) {
            BatCheese.Data.BatchService.RepositoryDefinitions retVal = this.EndGetRepositoryDefinitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRepositoryDefinitionsCompleted(object state) {
            if ((this.GetRepositoryDefinitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRepositoryDefinitionsCompleted(this, new GetRepositoryDefinitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRepositoryDefinitionsAsync() {
            this.GetRepositoryDefinitionsAsync(null);
        }
        
        public void GetRepositoryDefinitionsAsync(object userState) {
            if ((this.onBeginGetRepositoryDefinitionsDelegate == null)) {
                this.onBeginGetRepositoryDefinitionsDelegate = new BeginOperationDelegate(this.OnBeginGetRepositoryDefinitions);
            }
            if ((this.onEndGetRepositoryDefinitionsDelegate == null)) {
                this.onEndGetRepositoryDefinitionsDelegate = new EndOperationDelegate(this.OnEndGetRepositoryDefinitions);
            }
            if ((this.onGetRepositoryDefinitionsCompletedDelegate == null)) {
                this.onGetRepositoryDefinitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRepositoryDefinitionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRepositoryDefinitionsDelegate, null, this.onEndGetRepositoryDefinitionsDelegate, this.onGetRepositoryDefinitionsCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.RepositoryDefinition GetRepositoryDefinition(int repositoryId) {
            return base.Channel.GetRepositoryDefinition(repositoryId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRepositoryDefinition(int repositoryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRepositoryDefinition(repositoryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.RepositoryDefinition EndGetRepositoryDefinition(System.IAsyncResult result) {
            return base.Channel.EndGetRepositoryDefinition(result);
        }
        
        private System.IAsyncResult OnBeginGetRepositoryDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int repositoryId = ((int)(inValues[0]));
            return this.BeginGetRepositoryDefinition(repositoryId, callback, asyncState);
        }
        
        private object[] OnEndGetRepositoryDefinition(System.IAsyncResult result) {
            BatCheese.Data.BatchService.RepositoryDefinition retVal = this.EndGetRepositoryDefinition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRepositoryDefinitionCompleted(object state) {
            if ((this.GetRepositoryDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRepositoryDefinitionCompleted(this, new GetRepositoryDefinitionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRepositoryDefinitionAsync(int repositoryId) {
            this.GetRepositoryDefinitionAsync(repositoryId, null);
        }
        
        public void GetRepositoryDefinitionAsync(int repositoryId, object userState) {
            if ((this.onBeginGetRepositoryDefinitionDelegate == null)) {
                this.onBeginGetRepositoryDefinitionDelegate = new BeginOperationDelegate(this.OnBeginGetRepositoryDefinition);
            }
            if ((this.onEndGetRepositoryDefinitionDelegate == null)) {
                this.onEndGetRepositoryDefinitionDelegate = new EndOperationDelegate(this.OnEndGetRepositoryDefinition);
            }
            if ((this.onGetRepositoryDefinitionCompletedDelegate == null)) {
                this.onGetRepositoryDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRepositoryDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginGetRepositoryDefinitionDelegate, new object[] {
                        repositoryId}, this.onEndGetRepositoryDefinitionDelegate, this.onGetRepositoryDefinitionCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.RepositoryDefinition GetRepositoryDefinitionByURL(string siteURL) {
            return base.Channel.GetRepositoryDefinitionByURL(siteURL);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRepositoryDefinitionByURL(string siteURL, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRepositoryDefinitionByURL(siteURL, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.RepositoryDefinition EndGetRepositoryDefinitionByURL(System.IAsyncResult result) {
            return base.Channel.EndGetRepositoryDefinitionByURL(result);
        }
        
        private System.IAsyncResult OnBeginGetRepositoryDefinitionByURL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string siteURL = ((string)(inValues[0]));
            return this.BeginGetRepositoryDefinitionByURL(siteURL, callback, asyncState);
        }
        
        private object[] OnEndGetRepositoryDefinitionByURL(System.IAsyncResult result) {
            BatCheese.Data.BatchService.RepositoryDefinition retVal = this.EndGetRepositoryDefinitionByURL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRepositoryDefinitionByURLCompleted(object state) {
            if ((this.GetRepositoryDefinitionByURLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRepositoryDefinitionByURLCompleted(this, new GetRepositoryDefinitionByURLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRepositoryDefinitionByURLAsync(string siteURL) {
            this.GetRepositoryDefinitionByURLAsync(siteURL, null);
        }
        
        public void GetRepositoryDefinitionByURLAsync(string siteURL, object userState) {
            if ((this.onBeginGetRepositoryDefinitionByURLDelegate == null)) {
                this.onBeginGetRepositoryDefinitionByURLDelegate = new BeginOperationDelegate(this.OnBeginGetRepositoryDefinitionByURL);
            }
            if ((this.onEndGetRepositoryDefinitionByURLDelegate == null)) {
                this.onEndGetRepositoryDefinitionByURLDelegate = new EndOperationDelegate(this.OnEndGetRepositoryDefinitionByURL);
            }
            if ((this.onGetRepositoryDefinitionByURLCompletedDelegate == null)) {
                this.onGetRepositoryDefinitionByURLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRepositoryDefinitionByURLCompleted);
            }
            base.InvokeAsync(this.onBeginGetRepositoryDefinitionByURLDelegate, new object[] {
                        siteURL}, this.onEndGetRepositoryDefinitionByURLDelegate, this.onGetRepositoryDefinitionByURLCompletedDelegate, userState);
        }
        
        public void SaveRepositoryDefinition(BatCheese.Data.BatchService.RepositoryDefinition rd) {
            base.Channel.SaveRepositoryDefinition(rd);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveRepositoryDefinition(BatCheese.Data.BatchService.RepositoryDefinition rd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveRepositoryDefinition(rd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveRepositoryDefinition(System.IAsyncResult result) {
            base.Channel.EndSaveRepositoryDefinition(result);
        }
        
        private System.IAsyncResult OnBeginSaveRepositoryDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            BatCheese.Data.BatchService.RepositoryDefinition rd = ((BatCheese.Data.BatchService.RepositoryDefinition)(inValues[0]));
            return this.BeginSaveRepositoryDefinition(rd, callback, asyncState);
        }
        
        private object[] OnEndSaveRepositoryDefinition(System.IAsyncResult result) {
            this.EndSaveRepositoryDefinition(result);
            return null;
        }
        
        private void OnSaveRepositoryDefinitionCompleted(object state) {
            if ((this.SaveRepositoryDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveRepositoryDefinitionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveRepositoryDefinitionAsync(BatCheese.Data.BatchService.RepositoryDefinition rd) {
            this.SaveRepositoryDefinitionAsync(rd, null);
        }
        
        public void SaveRepositoryDefinitionAsync(BatCheese.Data.BatchService.RepositoryDefinition rd, object userState) {
            if ((this.onBeginSaveRepositoryDefinitionDelegate == null)) {
                this.onBeginSaveRepositoryDefinitionDelegate = new BeginOperationDelegate(this.OnBeginSaveRepositoryDefinition);
            }
            if ((this.onEndSaveRepositoryDefinitionDelegate == null)) {
                this.onEndSaveRepositoryDefinitionDelegate = new EndOperationDelegate(this.OnEndSaveRepositoryDefinition);
            }
            if ((this.onSaveRepositoryDefinitionCompletedDelegate == null)) {
                this.onSaveRepositoryDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveRepositoryDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginSaveRepositoryDefinitionDelegate, new object[] {
                        rd}, this.onEndSaveRepositoryDefinitionDelegate, this.onSaveRepositoryDefinitionCompletedDelegate, userState);
        }
        
        public void DeleteRepositoryDefinition(int repositoryId) {
            base.Channel.DeleteRepositoryDefinition(repositoryId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteRepositoryDefinition(int repositoryId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRepositoryDefinition(repositoryId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteRepositoryDefinition(System.IAsyncResult result) {
            base.Channel.EndDeleteRepositoryDefinition(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRepositoryDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int repositoryId = ((int)(inValues[0]));
            return this.BeginDeleteRepositoryDefinition(repositoryId, callback, asyncState);
        }
        
        private object[] OnEndDeleteRepositoryDefinition(System.IAsyncResult result) {
            this.EndDeleteRepositoryDefinition(result);
            return null;
        }
        
        private void OnDeleteRepositoryDefinitionCompleted(object state) {
            if ((this.DeleteRepositoryDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRepositoryDefinitionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRepositoryDefinitionAsync(int repositoryId) {
            this.DeleteRepositoryDefinitionAsync(repositoryId, null);
        }
        
        public void DeleteRepositoryDefinitionAsync(int repositoryId, object userState) {
            if ((this.onBeginDeleteRepositoryDefinitionDelegate == null)) {
                this.onBeginDeleteRepositoryDefinitionDelegate = new BeginOperationDelegate(this.OnBeginDeleteRepositoryDefinition);
            }
            if ((this.onEndDeleteRepositoryDefinitionDelegate == null)) {
                this.onEndDeleteRepositoryDefinitionDelegate = new EndOperationDelegate(this.OnEndDeleteRepositoryDefinition);
            }
            if ((this.onDeleteRepositoryDefinitionCompletedDelegate == null)) {
                this.onDeleteRepositoryDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRepositoryDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRepositoryDefinitionDelegate, new object[] {
                        repositoryId}, this.onEndDeleteRepositoryDefinitionDelegate, this.onDeleteRepositoryDefinitionCompletedDelegate, userState);
        }
        
        public bool DeleteRepositoryDefinitionByURL(string siteURL) {
            return base.Channel.DeleteRepositoryDefinitionByURL(siteURL);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteRepositoryDefinitionByURL(string siteURL, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRepositoryDefinitionByURL(siteURL, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteRepositoryDefinitionByURL(System.IAsyncResult result) {
            return base.Channel.EndDeleteRepositoryDefinitionByURL(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRepositoryDefinitionByURL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string siteURL = ((string)(inValues[0]));
            return this.BeginDeleteRepositoryDefinitionByURL(siteURL, callback, asyncState);
        }
        
        private object[] OnEndDeleteRepositoryDefinitionByURL(System.IAsyncResult result) {
            bool retVal = this.EndDeleteRepositoryDefinitionByURL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteRepositoryDefinitionByURLCompleted(object state) {
            if ((this.DeleteRepositoryDefinitionByURLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRepositoryDefinitionByURLCompleted(this, new DeleteRepositoryDefinitionByURLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRepositoryDefinitionByURLAsync(string siteURL) {
            this.DeleteRepositoryDefinitionByURLAsync(siteURL, null);
        }
        
        public void DeleteRepositoryDefinitionByURLAsync(string siteURL, object userState) {
            if ((this.onBeginDeleteRepositoryDefinitionByURLDelegate == null)) {
                this.onBeginDeleteRepositoryDefinitionByURLDelegate = new BeginOperationDelegate(this.OnBeginDeleteRepositoryDefinitionByURL);
            }
            if ((this.onEndDeleteRepositoryDefinitionByURLDelegate == null)) {
                this.onEndDeleteRepositoryDefinitionByURLDelegate = new EndOperationDelegate(this.OnEndDeleteRepositoryDefinitionByURL);
            }
            if ((this.onDeleteRepositoryDefinitionByURLCompletedDelegate == null)) {
                this.onDeleteRepositoryDefinitionByURLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRepositoryDefinitionByURLCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRepositoryDefinitionByURLDelegate, new object[] {
                        siteURL}, this.onEndDeleteRepositoryDefinitionByURLDelegate, this.onDeleteRepositoryDefinitionByURLCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ProcessDefinitions GetProcessDefinitions() {
            return base.Channel.GetProcessDefinitions();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProcessDefinitions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProcessDefinitions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ProcessDefinitions EndGetProcessDefinitions(System.IAsyncResult result) {
            return base.Channel.EndGetProcessDefinitions(result);
        }
        
        private System.IAsyncResult OnBeginGetProcessDefinitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetProcessDefinitions(callback, asyncState);
        }
        
        private object[] OnEndGetProcessDefinitions(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ProcessDefinitions retVal = this.EndGetProcessDefinitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProcessDefinitionsCompleted(object state) {
            if ((this.GetProcessDefinitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProcessDefinitionsCompleted(this, new GetProcessDefinitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProcessDefinitionsAsync() {
            this.GetProcessDefinitionsAsync(null);
        }
        
        public void GetProcessDefinitionsAsync(object userState) {
            if ((this.onBeginGetProcessDefinitionsDelegate == null)) {
                this.onBeginGetProcessDefinitionsDelegate = new BeginOperationDelegate(this.OnBeginGetProcessDefinitions);
            }
            if ((this.onEndGetProcessDefinitionsDelegate == null)) {
                this.onEndGetProcessDefinitionsDelegate = new EndOperationDelegate(this.OnEndGetProcessDefinitions);
            }
            if ((this.onGetProcessDefinitionsCompletedDelegate == null)) {
                this.onGetProcessDefinitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProcessDefinitionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetProcessDefinitionsDelegate, null, this.onEndGetProcessDefinitionsDelegate, this.onGetProcessDefinitionsCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ProcessDefinition GetProcessDefinition(string processName) {
            return base.Channel.GetProcessDefinition(processName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProcessDefinition(string processName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProcessDefinition(processName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ProcessDefinition EndGetProcessDefinition(System.IAsyncResult result) {
            return base.Channel.EndGetProcessDefinition(result);
        }
        
        private System.IAsyncResult OnBeginGetProcessDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string processName = ((string)(inValues[0]));
            return this.BeginGetProcessDefinition(processName, callback, asyncState);
        }
        
        private object[] OnEndGetProcessDefinition(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ProcessDefinition retVal = this.EndGetProcessDefinition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProcessDefinitionCompleted(object state) {
            if ((this.GetProcessDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProcessDefinitionCompleted(this, new GetProcessDefinitionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProcessDefinitionAsync(string processName) {
            this.GetProcessDefinitionAsync(processName, null);
        }
        
        public void GetProcessDefinitionAsync(string processName, object userState) {
            if ((this.onBeginGetProcessDefinitionDelegate == null)) {
                this.onBeginGetProcessDefinitionDelegate = new BeginOperationDelegate(this.OnBeginGetProcessDefinition);
            }
            if ((this.onEndGetProcessDefinitionDelegate == null)) {
                this.onEndGetProcessDefinitionDelegate = new EndOperationDelegate(this.OnEndGetProcessDefinition);
            }
            if ((this.onGetProcessDefinitionCompletedDelegate == null)) {
                this.onGetProcessDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProcessDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginGetProcessDefinitionDelegate, new object[] {
                        processName}, this.onEndGetProcessDefinitionDelegate, this.onGetProcessDefinitionCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityDefinitions GetDefaultActivityDefinitions() {
            return base.Channel.GetDefaultActivityDefinitions();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDefaultActivityDefinitions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDefaultActivityDefinitions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityDefinitions EndGetDefaultActivityDefinitions(System.IAsyncResult result) {
            return base.Channel.EndGetDefaultActivityDefinitions(result);
        }
        
        private System.IAsyncResult OnBeginGetDefaultActivityDefinitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetDefaultActivityDefinitions(callback, asyncState);
        }
        
        private object[] OnEndGetDefaultActivityDefinitions(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityDefinitions retVal = this.EndGetDefaultActivityDefinitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDefaultActivityDefinitionsCompleted(object state) {
            if ((this.GetDefaultActivityDefinitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDefaultActivityDefinitionsCompleted(this, new GetDefaultActivityDefinitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDefaultActivityDefinitionsAsync() {
            this.GetDefaultActivityDefinitionsAsync(null);
        }
        
        public void GetDefaultActivityDefinitionsAsync(object userState) {
            if ((this.onBeginGetDefaultActivityDefinitionsDelegate == null)) {
                this.onBeginGetDefaultActivityDefinitionsDelegate = new BeginOperationDelegate(this.OnBeginGetDefaultActivityDefinitions);
            }
            if ((this.onEndGetDefaultActivityDefinitionsDelegate == null)) {
                this.onEndGetDefaultActivityDefinitionsDelegate = new EndOperationDelegate(this.OnEndGetDefaultActivityDefinitions);
            }
            if ((this.onGetDefaultActivityDefinitionsCompletedDelegate == null)) {
                this.onGetDefaultActivityDefinitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDefaultActivityDefinitionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetDefaultActivityDefinitionsDelegate, null, this.onEndGetDefaultActivityDefinitionsDelegate, this.onGetDefaultActivityDefinitionsCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityDesigners GetActivityDesigners() {
            return base.Channel.GetActivityDesigners();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetActivityDesigners(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetActivityDesigners(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityDesigners EndGetActivityDesigners(System.IAsyncResult result) {
            return base.Channel.EndGetActivityDesigners(result);
        }
        
        private System.IAsyncResult OnBeginGetActivityDesigners(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetActivityDesigners(callback, asyncState);
        }
        
        private object[] OnEndGetActivityDesigners(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityDesigners retVal = this.EndGetActivityDesigners(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetActivityDesignersCompleted(object state) {
            if ((this.GetActivityDesignersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetActivityDesignersCompleted(this, new GetActivityDesignersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetActivityDesignersAsync() {
            this.GetActivityDesignersAsync(null);
        }
        
        public void GetActivityDesignersAsync(object userState) {
            if ((this.onBeginGetActivityDesignersDelegate == null)) {
                this.onBeginGetActivityDesignersDelegate = new BeginOperationDelegate(this.OnBeginGetActivityDesigners);
            }
            if ((this.onEndGetActivityDesignersDelegate == null)) {
                this.onEndGetActivityDesignersDelegate = new EndOperationDelegate(this.OnEndGetActivityDesigners);
            }
            if ((this.onGetActivityDesignersCompletedDelegate == null)) {
                this.onGetActivityDesignersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetActivityDesignersCompleted);
            }
            base.InvokeAsync(this.onBeginGetActivityDesignersDelegate, null, this.onEndGetActivityDesignersDelegate, this.onGetActivityDesignersCompletedDelegate, userState);
        }
        
        public BatCheese.Data.BatchService.ActivityDesigners GetLocActivityDesigners(string culture) {
            return base.Channel.GetLocActivityDesigners(culture);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLocActivityDesigners(string culture, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLocActivityDesigners(culture, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public BatCheese.Data.BatchService.ActivityDesigners EndGetLocActivityDesigners(System.IAsyncResult result) {
            return base.Channel.EndGetLocActivityDesigners(result);
        }
        
        private System.IAsyncResult OnBeginGetLocActivityDesigners(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string culture = ((string)(inValues[0]));
            return this.BeginGetLocActivityDesigners(culture, callback, asyncState);
        }
        
        private object[] OnEndGetLocActivityDesigners(System.IAsyncResult result) {
            BatCheese.Data.BatchService.ActivityDesigners retVal = this.EndGetLocActivityDesigners(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLocActivityDesignersCompleted(object state) {
            if ((this.GetLocActivityDesignersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLocActivityDesignersCompleted(this, new GetLocActivityDesignersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLocActivityDesignersAsync(string culture) {
            this.GetLocActivityDesignersAsync(culture, null);
        }
        
        public void GetLocActivityDesignersAsync(string culture, object userState) {
            if ((this.onBeginGetLocActivityDesignersDelegate == null)) {
                this.onBeginGetLocActivityDesignersDelegate = new BeginOperationDelegate(this.OnBeginGetLocActivityDesigners);
            }
            if ((this.onEndGetLocActivityDesignersDelegate == null)) {
                this.onEndGetLocActivityDesignersDelegate = new EndOperationDelegate(this.OnEndGetLocActivityDesigners);
            }
            if ((this.onGetLocActivityDesignersCompletedDelegate == null)) {
                this.onGetLocActivityDesignersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLocActivityDesignersCompleted);
            }
            base.InvokeAsync(this.onBeginGetLocActivityDesignersDelegate, new object[] {
                        culture}, this.onEndGetLocActivityDesignersDelegate, this.onGetLocActivityDesignersCompletedDelegate, userState);
        }
        
        public void SaveActivityDesigners(BatCheese.Data.BatchService.ActivityDesigners designers) {
            base.Channel.SaveActivityDesigners(designers);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveActivityDesigners(BatCheese.Data.BatchService.ActivityDesigners designers, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveActivityDesigners(designers, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveActivityDesigners(System.IAsyncResult result) {
            base.Channel.EndSaveActivityDesigners(result);
        }
        
        private System.IAsyncResult OnBeginSaveActivityDesigners(object[] inValues, System.AsyncCallback callback, object asyncState) {
            BatCheese.Data.BatchService.ActivityDesigners designers = ((BatCheese.Data.BatchService.ActivityDesigners)(inValues[0]));
            return this.BeginSaveActivityDesigners(designers, callback, asyncState);
        }
        
        private object[] OnEndSaveActivityDesigners(System.IAsyncResult result) {
            this.EndSaveActivityDesigners(result);
            return null;
        }
        
        private void OnSaveActivityDesignersCompleted(object state) {
            if ((this.SaveActivityDesignersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveActivityDesignersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveActivityDesignersAsync(BatCheese.Data.BatchService.ActivityDesigners designers) {
            this.SaveActivityDesignersAsync(designers, null);
        }
        
        public void SaveActivityDesignersAsync(BatCheese.Data.BatchService.ActivityDesigners designers, object userState) {
            if ((this.onBeginSaveActivityDesignersDelegate == null)) {
                this.onBeginSaveActivityDesignersDelegate = new BeginOperationDelegate(this.OnBeginSaveActivityDesigners);
            }
            if ((this.onEndSaveActivityDesignersDelegate == null)) {
                this.onEndSaveActivityDesignersDelegate = new EndOperationDelegate(this.OnEndSaveActivityDesigners);
            }
            if ((this.onSaveActivityDesignersCompletedDelegate == null)) {
                this.onSaveActivityDesignersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveActivityDesignersCompleted);
            }
            base.InvokeAsync(this.onBeginSaveActivityDesignersDelegate, new object[] {
                        designers}, this.onEndSaveActivityDesignersDelegate, this.onSaveActivityDesignersCompletedDelegate, userState);
        }
        
        public void SaveActivity(BatCheese.Data.BatchService.ActivityRegister activity) {
            base.Channel.SaveActivity(activity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveActivity(BatCheese.Data.BatchService.ActivityRegister activity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveActivity(activity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveActivity(System.IAsyncResult result) {
            base.Channel.EndSaveActivity(result);
        }
        
        private System.IAsyncResult OnBeginSaveActivity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            BatCheese.Data.BatchService.ActivityRegister activity = ((BatCheese.Data.BatchService.ActivityRegister)(inValues[0]));
            return this.BeginSaveActivity(activity, callback, asyncState);
        }
        
        private object[] OnEndSaveActivity(System.IAsyncResult result) {
            this.EndSaveActivity(result);
            return null;
        }
        
        private void OnSaveActivityCompleted(object state) {
            if ((this.SaveActivityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveActivityAsync(BatCheese.Data.BatchService.ActivityRegister activity) {
            this.SaveActivityAsync(activity, null);
        }
        
        public void SaveActivityAsync(BatCheese.Data.BatchService.ActivityRegister activity, object userState) {
            if ((this.onBeginSaveActivityDelegate == null)) {
                this.onBeginSaveActivityDelegate = new BeginOperationDelegate(this.OnBeginSaveActivity);
            }
            if ((this.onEndSaveActivityDelegate == null)) {
                this.onEndSaveActivityDelegate = new EndOperationDelegate(this.OnEndSaveActivity);
            }
            if ((this.onSaveActivityCompletedDelegate == null)) {
                this.onSaveActivityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveActivityCompleted);
            }
            base.InvokeAsync(this.onBeginSaveActivityDelegate, new object[] {
                        activity}, this.onEndSaveActivityDelegate, this.onSaveActivityCompletedDelegate, userState);
        }
        
        public void DeleteActivityRegistration(int activityId) {
            base.Channel.DeleteActivityRegistration(activityId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteActivityRegistration(int activityId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteActivityRegistration(activityId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteActivityRegistration(System.IAsyncResult result) {
            base.Channel.EndDeleteActivityRegistration(result);
        }
        
        private System.IAsyncResult OnBeginDeleteActivityRegistration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int activityId = ((int)(inValues[0]));
            return this.BeginDeleteActivityRegistration(activityId, callback, asyncState);
        }
        
        private object[] OnEndDeleteActivityRegistration(System.IAsyncResult result) {
            this.EndDeleteActivityRegistration(result);
            return null;
        }
        
        private void OnDeleteActivityRegistrationCompleted(object state) {
            if ((this.DeleteActivityRegistrationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteActivityRegistrationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteActivityRegistrationAsync(int activityId) {
            this.DeleteActivityRegistrationAsync(activityId, null);
        }
        
        public void DeleteActivityRegistrationAsync(int activityId, object userState) {
            if ((this.onBeginDeleteActivityRegistrationDelegate == null)) {
                this.onBeginDeleteActivityRegistrationDelegate = new BeginOperationDelegate(this.OnBeginDeleteActivityRegistration);
            }
            if ((this.onEndDeleteActivityRegistrationDelegate == null)) {
                this.onEndDeleteActivityRegistrationDelegate = new EndOperationDelegate(this.OnEndDeleteActivityRegistration);
            }
            if ((this.onDeleteActivityRegistrationCompletedDelegate == null)) {
                this.onDeleteActivityRegistrationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteActivityRegistrationCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteActivityRegistrationDelegate, new object[] {
                        activityId}, this.onEndDeleteActivityRegistrationDelegate, this.onDeleteActivityRegistrationCompletedDelegate, userState);
        }
        
        public string GenerateUniqueBatchName(string scannerID) {
            return base.Channel.GenerateUniqueBatchName(scannerID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenerateUniqueBatchName(string scannerID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenerateUniqueBatchName(scannerID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGenerateUniqueBatchName(System.IAsyncResult result) {
            return base.Channel.EndGenerateUniqueBatchName(result);
        }
        
        private System.IAsyncResult OnBeginGenerateUniqueBatchName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string scannerID = ((string)(inValues[0]));
            return this.BeginGenerateUniqueBatchName(scannerID, callback, asyncState);
        }
        
        private object[] OnEndGenerateUniqueBatchName(System.IAsyncResult result) {
            string retVal = this.EndGenerateUniqueBatchName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenerateUniqueBatchNameCompleted(object state) {
            if ((this.GenerateUniqueBatchNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenerateUniqueBatchNameCompleted(this, new GenerateUniqueBatchNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenerateUniqueBatchNameAsync(string scannerID) {
            this.GenerateUniqueBatchNameAsync(scannerID, null);
        }
        
        public void GenerateUniqueBatchNameAsync(string scannerID, object userState) {
            if ((this.onBeginGenerateUniqueBatchNameDelegate == null)) {
                this.onBeginGenerateUniqueBatchNameDelegate = new BeginOperationDelegate(this.OnBeginGenerateUniqueBatchName);
            }
            if ((this.onEndGenerateUniqueBatchNameDelegate == null)) {
                this.onEndGenerateUniqueBatchNameDelegate = new EndOperationDelegate(this.OnEndGenerateUniqueBatchName);
            }
            if ((this.onGenerateUniqueBatchNameCompletedDelegate == null)) {
                this.onGenerateUniqueBatchNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenerateUniqueBatchNameCompleted);
            }
            base.InvokeAsync(this.onBeginGenerateUniqueBatchNameDelegate, new object[] {
                        scannerID}, this.onEndGenerateUniqueBatchNameDelegate, this.onGenerateUniqueBatchNameCompletedDelegate, userState);
        }
        
        public bool IsBatchLockedOrErrored(string batchname, string cachepath, string activityToProcessId) {
            return base.Channel.IsBatchLockedOrErrored(batchname, cachepath, activityToProcessId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsBatchLockedOrErrored(string batchname, string cachepath, string activityToProcessId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsBatchLockedOrErrored(batchname, cachepath, activityToProcessId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIsBatchLockedOrErrored(System.IAsyncResult result) {
            return base.Channel.EndIsBatchLockedOrErrored(result);
        }
        
        private System.IAsyncResult OnBeginIsBatchLockedOrErrored(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            string activityToProcessId = ((string)(inValues[2]));
            return this.BeginIsBatchLockedOrErrored(batchname, cachepath, activityToProcessId, callback, asyncState);
        }
        
        private object[] OnEndIsBatchLockedOrErrored(System.IAsyncResult result) {
            bool retVal = this.EndIsBatchLockedOrErrored(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsBatchLockedOrErroredCompleted(object state) {
            if ((this.IsBatchLockedOrErroredCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsBatchLockedOrErroredCompleted(this, new IsBatchLockedOrErroredCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsBatchLockedOrErroredAsync(string batchname, string cachepath, string activityToProcessId) {
            this.IsBatchLockedOrErroredAsync(batchname, cachepath, activityToProcessId, null);
        }
        
        public void IsBatchLockedOrErroredAsync(string batchname, string cachepath, string activityToProcessId, object userState) {
            if ((this.onBeginIsBatchLockedOrErroredDelegate == null)) {
                this.onBeginIsBatchLockedOrErroredDelegate = new BeginOperationDelegate(this.OnBeginIsBatchLockedOrErrored);
            }
            if ((this.onEndIsBatchLockedOrErroredDelegate == null)) {
                this.onEndIsBatchLockedOrErroredDelegate = new EndOperationDelegate(this.OnEndIsBatchLockedOrErrored);
            }
            if ((this.onIsBatchLockedOrErroredCompletedDelegate == null)) {
                this.onIsBatchLockedOrErroredCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsBatchLockedOrErroredCompleted);
            }
            base.InvokeAsync(this.onBeginIsBatchLockedOrErroredDelegate, new object[] {
                        batchname,
                        cachepath,
                        activityToProcessId}, this.onEndIsBatchLockedOrErroredDelegate, this.onIsBatchLockedOrErroredCompletedDelegate, userState);
        }
        
        public void AddClientCache(string cachePath) {
            base.Channel.AddClientCache(cachePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddClientCache(string cachePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddClientCache(cachePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddClientCache(System.IAsyncResult result) {
            base.Channel.EndAddClientCache(result);
        }
        
        private System.IAsyncResult OnBeginAddClientCache(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cachePath = ((string)(inValues[0]));
            return this.BeginAddClientCache(cachePath, callback, asyncState);
        }
        
        private object[] OnEndAddClientCache(System.IAsyncResult result) {
            this.EndAddClientCache(result);
            return null;
        }
        
        private void OnAddClientCacheCompleted(object state) {
            if ((this.AddClientCacheCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddClientCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddClientCacheAsync(string cachePath) {
            this.AddClientCacheAsync(cachePath, null);
        }
        
        public void AddClientCacheAsync(string cachePath, object userState) {
            if ((this.onBeginAddClientCacheDelegate == null)) {
                this.onBeginAddClientCacheDelegate = new BeginOperationDelegate(this.OnBeginAddClientCache);
            }
            if ((this.onEndAddClientCacheDelegate == null)) {
                this.onEndAddClientCacheDelegate = new EndOperationDelegate(this.OnEndAddClientCache);
            }
            if ((this.onAddClientCacheCompletedDelegate == null)) {
                this.onAddClientCacheCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddClientCacheCompleted);
            }
            base.InvokeAsync(this.onBeginAddClientCacheDelegate, new object[] {
                        cachePath}, this.onEndAddClientCacheDelegate, this.onAddClientCacheCompletedDelegate, userState);
        }
        
        public void RemoveClientCache(string cachePath) {
            base.Channel.RemoveClientCache(cachePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveClientCache(string cachePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveClientCache(cachePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveClientCache(System.IAsyncResult result) {
            base.Channel.EndRemoveClientCache(result);
        }
        
        private System.IAsyncResult OnBeginRemoveClientCache(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cachePath = ((string)(inValues[0]));
            return this.BeginRemoveClientCache(cachePath, callback, asyncState);
        }
        
        private object[] OnEndRemoveClientCache(System.IAsyncResult result) {
            this.EndRemoveClientCache(result);
            return null;
        }
        
        private void OnRemoveClientCacheCompleted(object state) {
            if ((this.RemoveClientCacheCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveClientCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveClientCacheAsync(string cachePath) {
            this.RemoveClientCacheAsync(cachePath, null);
        }
        
        public void RemoveClientCacheAsync(string cachePath, object userState) {
            if ((this.onBeginRemoveClientCacheDelegate == null)) {
                this.onBeginRemoveClientCacheDelegate = new BeginOperationDelegate(this.OnBeginRemoveClientCache);
            }
            if ((this.onEndRemoveClientCacheDelegate == null)) {
                this.onEndRemoveClientCacheDelegate = new EndOperationDelegate(this.OnEndRemoveClientCache);
            }
            if ((this.onRemoveClientCacheCompletedDelegate == null)) {
                this.onRemoveClientCacheCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveClientCacheCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveClientCacheDelegate, new object[] {
                        cachePath}, this.onEndRemoveClientCacheDelegate, this.onRemoveClientCacheCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> GetClientCache() {
            return base.Channel.GetClientCache();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetClientCache(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientCache(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndGetClientCache(System.IAsyncResult result) {
            return base.Channel.EndGetClientCache(result);
        }
        
        private System.IAsyncResult OnBeginGetClientCache(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetClientCache(callback, asyncState);
        }
        
        private object[] OnEndGetClientCache(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndGetClientCache(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientCacheCompleted(object state) {
            if ((this.GetClientCacheCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientCacheCompleted(this, new GetClientCacheCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientCacheAsync() {
            this.GetClientCacheAsync(null);
        }
        
        public void GetClientCacheAsync(object userState) {
            if ((this.onBeginGetClientCacheDelegate == null)) {
                this.onBeginGetClientCacheDelegate = new BeginOperationDelegate(this.OnBeginGetClientCache);
            }
            if ((this.onEndGetClientCacheDelegate == null)) {
                this.onEndGetClientCacheDelegate = new EndOperationDelegate(this.OnEndGetClientCache);
            }
            if ((this.onGetClientCacheCompletedDelegate == null)) {
                this.onGetClientCacheCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientCacheCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientCacheDelegate, null, this.onEndGetClientCacheDelegate, this.onGetClientCacheCompletedDelegate, userState);
        }
        
        public void UpdateBatchPaths(string batchName, string newCachePath) {
            base.Channel.UpdateBatchPaths(batchName, newCachePath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateBatchPaths(string batchName, string newCachePath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateBatchPaths(batchName, newCachePath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateBatchPaths(System.IAsyncResult result) {
            base.Channel.EndUpdateBatchPaths(result);
        }
        
        private System.IAsyncResult OnBeginUpdateBatchPaths(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchName = ((string)(inValues[0]));
            string newCachePath = ((string)(inValues[1]));
            return this.BeginUpdateBatchPaths(batchName, newCachePath, callback, asyncState);
        }
        
        private object[] OnEndUpdateBatchPaths(System.IAsyncResult result) {
            this.EndUpdateBatchPaths(result);
            return null;
        }
        
        private void OnUpdateBatchPathsCompleted(object state) {
            if ((this.UpdateBatchPathsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateBatchPathsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateBatchPathsAsync(string batchName, string newCachePath) {
            this.UpdateBatchPathsAsync(batchName, newCachePath, null);
        }
        
        public void UpdateBatchPathsAsync(string batchName, string newCachePath, object userState) {
            if ((this.onBeginUpdateBatchPathsDelegate == null)) {
                this.onBeginUpdateBatchPathsDelegate = new BeginOperationDelegate(this.OnBeginUpdateBatchPaths);
            }
            if ((this.onEndUpdateBatchPathsDelegate == null)) {
                this.onEndUpdateBatchPathsDelegate = new EndOperationDelegate(this.OnEndUpdateBatchPaths);
            }
            if ((this.onUpdateBatchPathsCompletedDelegate == null)) {
                this.onUpdateBatchPathsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateBatchPathsCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateBatchPathsDelegate, new object[] {
                        batchName,
                        newCachePath}, this.onEndUpdateBatchPathsDelegate, this.onUpdateBatchPathsCompletedDelegate, userState);
        }
        
        public bool IncrementRetry(long activityToProcessId, int currentRetryCount) {
            return base.Channel.IncrementRetry(activityToProcessId, currentRetryCount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncrementRetry(long activityToProcessId, int currentRetryCount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncrementRetry(activityToProcessId, currentRetryCount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndIncrementRetry(System.IAsyncResult result) {
            return base.Channel.EndIncrementRetry(result);
        }
        
        private System.IAsyncResult OnBeginIncrementRetry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activityToProcessId = ((long)(inValues[0]));
            int currentRetryCount = ((int)(inValues[1]));
            return this.BeginIncrementRetry(activityToProcessId, currentRetryCount, callback, asyncState);
        }
        
        private object[] OnEndIncrementRetry(System.IAsyncResult result) {
            bool retVal = this.EndIncrementRetry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncrementRetryCompleted(object state) {
            if ((this.IncrementRetryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IncrementRetryCompleted(this, new IncrementRetryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IncrementRetryAsync(long activityToProcessId, int currentRetryCount) {
            this.IncrementRetryAsync(activityToProcessId, currentRetryCount, null);
        }
        
        public void IncrementRetryAsync(long activityToProcessId, int currentRetryCount, object userState) {
            if ((this.onBeginIncrementRetryDelegate == null)) {
                this.onBeginIncrementRetryDelegate = new BeginOperationDelegate(this.OnBeginIncrementRetry);
            }
            if ((this.onEndIncrementRetryDelegate == null)) {
                this.onEndIncrementRetryDelegate = new EndOperationDelegate(this.OnEndIncrementRetry);
            }
            if ((this.onIncrementRetryCompletedDelegate == null)) {
                this.onIncrementRetryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncrementRetryCompleted);
            }
            base.InvokeAsync(this.onBeginIncrementRetryDelegate, new object[] {
                        activityToProcessId,
                        currentRetryCount}, this.onEndIncrementRetryDelegate, this.onIncrementRetryCompletedDelegate, userState);
        }
        
        public bool ClearRetries(long activityToProcessId) {
            return base.Channel.ClearRetries(activityToProcessId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClearRetries(long activityToProcessId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearRetries(activityToProcessId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndClearRetries(System.IAsyncResult result) {
            return base.Channel.EndClearRetries(result);
        }
        
        private System.IAsyncResult OnBeginClearRetries(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long activityToProcessId = ((long)(inValues[0]));
            return this.BeginClearRetries(activityToProcessId, callback, asyncState);
        }
        
        private object[] OnEndClearRetries(System.IAsyncResult result) {
            bool retVal = this.EndClearRetries(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClearRetriesCompleted(object state) {
            if ((this.ClearRetriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearRetriesCompleted(this, new ClearRetriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearRetriesAsync(long activityToProcessId) {
            this.ClearRetriesAsync(activityToProcessId, null);
        }
        
        public void ClearRetriesAsync(long activityToProcessId, object userState) {
            if ((this.onBeginClearRetriesDelegate == null)) {
                this.onBeginClearRetriesDelegate = new BeginOperationDelegate(this.OnBeginClearRetries);
            }
            if ((this.onEndClearRetriesDelegate == null)) {
                this.onEndClearRetriesDelegate = new EndOperationDelegate(this.OnEndClearRetries);
            }
            if ((this.onClearRetriesCompletedDelegate == null)) {
                this.onClearRetriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearRetriesCompleted);
            }
            base.InvokeAsync(this.onBeginClearRetriesDelegate, new object[] {
                        activityToProcessId}, this.onEndClearRetriesDelegate, this.onClearRetriesCompletedDelegate, userState);
        }
        
        public void SynchronizeBatchPriorityWithDatabase(string batchname, string cachepath) {
            base.Channel.SynchronizeBatchPriorityWithDatabase(batchname, cachepath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSynchronizeBatchPriorityWithDatabase(string batchname, string cachepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSynchronizeBatchPriorityWithDatabase(batchname, cachepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSynchronizeBatchPriorityWithDatabase(System.IAsyncResult result) {
            base.Channel.EndSynchronizeBatchPriorityWithDatabase(result);
        }
        
        private System.IAsyncResult OnBeginSynchronizeBatchPriorityWithDatabase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchname = ((string)(inValues[0]));
            string cachepath = ((string)(inValues[1]));
            return this.BeginSynchronizeBatchPriorityWithDatabase(batchname, cachepath, callback, asyncState);
        }
        
        private object[] OnEndSynchronizeBatchPriorityWithDatabase(System.IAsyncResult result) {
            this.EndSynchronizeBatchPriorityWithDatabase(result);
            return null;
        }
        
        private void OnSynchronizeBatchPriorityWithDatabaseCompleted(object state) {
            if ((this.SynchronizeBatchPriorityWithDatabaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SynchronizeBatchPriorityWithDatabaseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SynchronizeBatchPriorityWithDatabaseAsync(string batchname, string cachepath) {
            this.SynchronizeBatchPriorityWithDatabaseAsync(batchname, cachepath, null);
        }
        
        public void SynchronizeBatchPriorityWithDatabaseAsync(string batchname, string cachepath, object userState) {
            if ((this.onBeginSynchronizeBatchPriorityWithDatabaseDelegate == null)) {
                this.onBeginSynchronizeBatchPriorityWithDatabaseDelegate = new BeginOperationDelegate(this.OnBeginSynchronizeBatchPriorityWithDatabase);
            }
            if ((this.onEndSynchronizeBatchPriorityWithDatabaseDelegate == null)) {
                this.onEndSynchronizeBatchPriorityWithDatabaseDelegate = new EndOperationDelegate(this.OnEndSynchronizeBatchPriorityWithDatabase);
            }
            if ((this.onSynchronizeBatchPriorityWithDatabaseCompletedDelegate == null)) {
                this.onSynchronizeBatchPriorityWithDatabaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSynchronizeBatchPriorityWithDatabaseCompleted);
            }
            base.InvokeAsync(this.onBeginSynchronizeBatchPriorityWithDatabaseDelegate, new object[] {
                        batchname,
                        cachepath}, this.onEndSynchronizeBatchPriorityWithDatabaseDelegate, this.onSynchronizeBatchPriorityWithDatabaseCompletedDelegate, userState);
        }
        
        public int UpdateInProcessPriority(string processName, int priority) {
            return base.Channel.UpdateInProcessPriority(processName, priority);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateInProcessPriority(string processName, int priority, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateInProcessPriority(processName, priority, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndUpdateInProcessPriority(System.IAsyncResult result) {
            return base.Channel.EndUpdateInProcessPriority(result);
        }
        
        private System.IAsyncResult OnBeginUpdateInProcessPriority(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string processName = ((string)(inValues[0]));
            int priority = ((int)(inValues[1]));
            return this.BeginUpdateInProcessPriority(processName, priority, callback, asyncState);
        }
        
        private object[] OnEndUpdateInProcessPriority(System.IAsyncResult result) {
            int retVal = this.EndUpdateInProcessPriority(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateInProcessPriorityCompleted(object state) {
            if ((this.UpdateInProcessPriorityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateInProcessPriorityCompleted(this, new UpdateInProcessPriorityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateInProcessPriorityAsync(string processName, int priority) {
            this.UpdateInProcessPriorityAsync(processName, priority, null);
        }
        
        public void UpdateInProcessPriorityAsync(string processName, int priority, object userState) {
            if ((this.onBeginUpdateInProcessPriorityDelegate == null)) {
                this.onBeginUpdateInProcessPriorityDelegate = new BeginOperationDelegate(this.OnBeginUpdateInProcessPriority);
            }
            if ((this.onEndUpdateInProcessPriorityDelegate == null)) {
                this.onEndUpdateInProcessPriorityDelegate = new EndOperationDelegate(this.OnEndUpdateInProcessPriority);
            }
            if ((this.onUpdateInProcessPriorityCompletedDelegate == null)) {
                this.onUpdateInProcessPriorityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateInProcessPriorityCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateInProcessPriorityDelegate, new object[] {
                        processName,
                        priority}, this.onEndUpdateInProcessPriorityDelegate, this.onUpdateInProcessPriorityCompletedDelegate, userState);
        }
        
        public bool SetProcessPriority(string processName, int priority) {
            return base.Channel.SetProcessPriority(processName, priority);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetProcessPriority(string processName, int priority, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetProcessPriority(processName, priority, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSetProcessPriority(System.IAsyncResult result) {
            return base.Channel.EndSetProcessPriority(result);
        }
        
        private System.IAsyncResult OnBeginSetProcessPriority(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string processName = ((string)(inValues[0]));
            int priority = ((int)(inValues[1]));
            return this.BeginSetProcessPriority(processName, priority, callback, asyncState);
        }
        
        private object[] OnEndSetProcessPriority(System.IAsyncResult result) {
            bool retVal = this.EndSetProcessPriority(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetProcessPriorityCompleted(object state) {
            if ((this.SetProcessPriorityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetProcessPriorityCompleted(this, new SetProcessPriorityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetProcessPriorityAsync(string processName, int priority) {
            this.SetProcessPriorityAsync(processName, priority, null);
        }
        
        public void SetProcessPriorityAsync(string processName, int priority, object userState) {
            if ((this.onBeginSetProcessPriorityDelegate == null)) {
                this.onBeginSetProcessPriorityDelegate = new BeginOperationDelegate(this.OnBeginSetProcessPriority);
            }
            if ((this.onEndSetProcessPriorityDelegate == null)) {
                this.onEndSetProcessPriorityDelegate = new EndOperationDelegate(this.OnEndSetProcessPriority);
            }
            if ((this.onSetProcessPriorityCompletedDelegate == null)) {
                this.onSetProcessPriorityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetProcessPriorityCompleted);
            }
            base.InvokeAsync(this.onBeginSetProcessPriorityDelegate, new object[] {
                        processName,
                        priority}, this.onEndSetProcessPriorityDelegate, this.onSetProcessPriorityCompletedDelegate, userState);
        }
        
        public bool UpdateBatchPriority(string batchName, int priority) {
            return base.Channel.UpdateBatchPriority(batchName, priority);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateBatchPriority(string batchName, int priority, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateBatchPriority(batchName, priority, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateBatchPriority(System.IAsyncResult result) {
            return base.Channel.EndUpdateBatchPriority(result);
        }
        
        private System.IAsyncResult OnBeginUpdateBatchPriority(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchName = ((string)(inValues[0]));
            int priority = ((int)(inValues[1]));
            return this.BeginUpdateBatchPriority(batchName, priority, callback, asyncState);
        }
        
        private object[] OnEndUpdateBatchPriority(System.IAsyncResult result) {
            bool retVal = this.EndUpdateBatchPriority(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateBatchPriorityCompleted(object state) {
            if ((this.UpdateBatchPriorityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateBatchPriorityCompleted(this, new UpdateBatchPriorityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateBatchPriorityAsync(string batchName, int priority) {
            this.UpdateBatchPriorityAsync(batchName, priority, null);
        }
        
        public void UpdateBatchPriorityAsync(string batchName, int priority, object userState) {
            if ((this.onBeginUpdateBatchPriorityDelegate == null)) {
                this.onBeginUpdateBatchPriorityDelegate = new BeginOperationDelegate(this.OnBeginUpdateBatchPriority);
            }
            if ((this.onEndUpdateBatchPriorityDelegate == null)) {
                this.onEndUpdateBatchPriorityDelegate = new EndOperationDelegate(this.OnEndUpdateBatchPriority);
            }
            if ((this.onUpdateBatchPriorityCompletedDelegate == null)) {
                this.onUpdateBatchPriorityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateBatchPriorityCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateBatchPriorityDelegate, new object[] {
                        batchName,
                        priority}, this.onEndUpdateBatchPriorityDelegate, this.onUpdateBatchPriorityCompletedDelegate, userState);
        }
        
        public bool CreateActivitiesToProcess(string batchName, string cachePath, string processName, System.Nullable<int> priorityOverride) {
            return base.Channel.CreateActivitiesToProcess(batchName, cachePath, processName, priorityOverride);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateActivitiesToProcess(string batchName, string cachePath, string processName, System.Nullable<int> priorityOverride, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateActivitiesToProcess(batchName, cachePath, processName, priorityOverride, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCreateActivitiesToProcess(System.IAsyncResult result) {
            return base.Channel.EndCreateActivitiesToProcess(result);
        }
        
        private System.IAsyncResult OnBeginCreateActivitiesToProcess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string batchName = ((string)(inValues[0]));
            string cachePath = ((string)(inValues[1]));
            string processName = ((string)(inValues[2]));
            System.Nullable<int> priorityOverride = ((System.Nullable<int>)(inValues[3]));
            return this.BeginCreateActivitiesToProcess(batchName, cachePath, processName, priorityOverride, callback, asyncState);
        }
        
        private object[] OnEndCreateActivitiesToProcess(System.IAsyncResult result) {
            bool retVal = this.EndCreateActivitiesToProcess(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateActivitiesToProcessCompleted(object state) {
            if ((this.CreateActivitiesToProcessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateActivitiesToProcessCompleted(this, new CreateActivitiesToProcessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateActivitiesToProcessAsync(string batchName, string cachePath, string processName, System.Nullable<int> priorityOverride) {
            this.CreateActivitiesToProcessAsync(batchName, cachePath, processName, priorityOverride, null);
        }
        
        public void CreateActivitiesToProcessAsync(string batchName, string cachePath, string processName, System.Nullable<int> priorityOverride, object userState) {
            if ((this.onBeginCreateActivitiesToProcessDelegate == null)) {
                this.onBeginCreateActivitiesToProcessDelegate = new BeginOperationDelegate(this.OnBeginCreateActivitiesToProcess);
            }
            if ((this.onEndCreateActivitiesToProcessDelegate == null)) {
                this.onEndCreateActivitiesToProcessDelegate = new EndOperationDelegate(this.OnEndCreateActivitiesToProcess);
            }
            if ((this.onCreateActivitiesToProcessCompletedDelegate == null)) {
                this.onCreateActivitiesToProcessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateActivitiesToProcessCompleted);
            }
            base.InvokeAsync(this.onBeginCreateActivitiesToProcessDelegate, new object[] {
                        batchName,
                        cachePath,
                        processName,
                        priorityOverride}, this.onEndCreateActivitiesToProcessDelegate, this.onCreateActivitiesToProcessCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> GetAllProcessNameMappings() {
            return base.Channel.GetAllProcessNameMappings();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllProcessNameMappings(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllProcessNameMappings(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> EndGetAllProcessNameMappings(System.IAsyncResult result) {
            return base.Channel.EndGetAllProcessNameMappings(result);
        }
        
        private System.IAsyncResult OnBeginGetAllProcessNameMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetAllProcessNameMappings(callback, asyncState);
        }
        
        private object[] OnEndGetAllProcessNameMappings(System.IAsyncResult result) {
            System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> retVal = this.EndGetAllProcessNameMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllProcessNameMappingsCompleted(object state) {
            if ((this.GetAllProcessNameMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllProcessNameMappingsCompleted(this, new GetAllProcessNameMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllProcessNameMappingsAsync() {
            this.GetAllProcessNameMappingsAsync(null);
        }
        
        public void GetAllProcessNameMappingsAsync(object userState) {
            if ((this.onBeginGetAllProcessNameMappingsDelegate == null)) {
                this.onBeginGetAllProcessNameMappingsDelegate = new BeginOperationDelegate(this.OnBeginGetAllProcessNameMappings);
            }
            if ((this.onEndGetAllProcessNameMappingsDelegate == null)) {
                this.onEndGetAllProcessNameMappingsDelegate = new EndOperationDelegate(this.OnEndGetAllProcessNameMappings);
            }
            if ((this.onGetAllProcessNameMappingsCompletedDelegate == null)) {
                this.onGetAllProcessNameMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllProcessNameMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllProcessNameMappingsDelegate, null, this.onEndGetAllProcessNameMappingsDelegate, this.onGetAllProcessNameMappingsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> GetProcessNameMappings(System.Collections.Generic.List<string> documentClassNames) {
            return base.Channel.GetProcessNameMappings(documentClassNames);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetProcessNameMappings(System.Collections.Generic.List<string> documentClassNames, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProcessNameMappings(documentClassNames, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> EndGetProcessNameMappings(System.IAsyncResult result) {
            return base.Channel.EndGetProcessNameMappings(result);
        }
        
        private System.IAsyncResult OnBeginGetProcessNameMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> documentClassNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginGetProcessNameMappings(documentClassNames, callback, asyncState);
        }
        
        private object[] OnEndGetProcessNameMappings(System.IAsyncResult result) {
            System.Collections.Generic.List<BatCheese.Data.BatchService.ProcessNameMapping> retVal = this.EndGetProcessNameMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProcessNameMappingsCompleted(object state) {
            if ((this.GetProcessNameMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProcessNameMappingsCompleted(this, new GetProcessNameMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProcessNameMappingsAsync(System.Collections.Generic.List<string> documentClassNames) {
            this.GetProcessNameMappingsAsync(documentClassNames, null);
        }
        
        public void GetProcessNameMappingsAsync(System.Collections.Generic.List<string> documentClassNames, object userState) {
            if ((this.onBeginGetProcessNameMappingsDelegate == null)) {
                this.onBeginGetProcessNameMappingsDelegate = new BeginOperationDelegate(this.OnBeginGetProcessNameMappings);
            }
            if ((this.onEndGetProcessNameMappingsDelegate == null)) {
                this.onEndGetProcessNameMappingsDelegate = new EndOperationDelegate(this.OnEndGetProcessNameMappings);
            }
            if ((this.onGetProcessNameMappingsCompletedDelegate == null)) {
                this.onGetProcessNameMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProcessNameMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetProcessNameMappingsDelegate, new object[] {
                        documentClassNames}, this.onEndGetProcessNameMappingsDelegate, this.onGetProcessNameMappingsCompletedDelegate, userState);
        }
    }
}
