//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BatCheese.Data.AgentService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Services", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="Service")]
    [System.SerializableAttribute()]
    public class Services : System.Collections.Generic.List<BatCheese.Data.AgentService.Service> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class Service : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRunningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceManagerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShouldRunField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunning {
            get {
                return this.IsRunningField;
            }
            set {
                if ((this.IsRunningField.Equals(value) != true)) {
                    this.IsRunningField = value;
                    this.RaisePropertyChanged("IsRunning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceManagerID {
            get {
                return this.ServiceManagerIDField;
            }
            set {
                if ((this.ServiceManagerIDField.Equals(value) != true)) {
                    this.ServiceManagerIDField = value;
                    this.RaisePropertyChanged("ServiceManagerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName {
            get {
                return this.ServiceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceNameField, value) != true)) {
                    this.ServiceNameField = value;
                    this.RaisePropertyChanged("ServiceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ShouldRun {
            get {
                return this.ShouldRunField;
            }
            set {
                if ((this.ShouldRunField.Equals(value) != true)) {
                    this.ShouldRunField = value;
                    this.RaisePropertyChanged("ShouldRun");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ActivityRegisters", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ActivityRegister")]
    [System.SerializableAttribute()]
    public class ActivityRegisters : System.Collections.Generic.List<BatCheese.Data.AgentService.ActivityRegister> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityRegister", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ActivityRegister : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatCheese.Data.AgentService.ActivityMode TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityID {
            get {
                return this.ActivityIDField;
            }
            set {
                if ((this.ActivityIDField.Equals(value) != true)) {
                    this.ActivityIDField = value;
                    this.RaisePropertyChanged("ActivityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Class {
            get {
                return this.ClassField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassField, value) != true)) {
                    this.ClassField = value;
                    this.RaisePropertyChanged("Class");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Library {
            get {
                return this.LibraryField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryField, value) != true)) {
                    this.LibraryField = value;
                    this.RaisePropertyChanged("Library");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Machine {
            get {
                return this.MachineField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineField, value) != true)) {
                    this.MachineField = value;
                    this.RaisePropertyChanged("Machine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Server {
            get {
                return this.ServerField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerField, value) != true)) {
                    this.ServerField = value;
                    this.RaisePropertyChanged("Server");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatCheese.Data.AgentService.ActivityMode Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityMode", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    public enum ActivityMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Automatic = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ActivitiesToProcess", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ActivityToProcess")]
    [System.SerializableAttribute()]
    public class ActivitiesToProcess : System.Collections.Generic.List<BatCheese.Data.AgentService.ActivityToProcess> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityToProcess", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ActivityToProcess : BatCheese.Data.AgentService.ActivityDefinition {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActivityCompleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActivityFinishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityLockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActivityStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ActivityToProcessIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BatchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CachePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FailCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastFailTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ActivityComplete {
            get {
                return this.ActivityCompleteField;
            }
            set {
                if ((this.ActivityCompleteField.Equals(value) != true)) {
                    this.ActivityCompleteField = value;
                    this.RaisePropertyChanged("ActivityComplete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityError {
            get {
                return this.ActivityErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityErrorField, value) != true)) {
                    this.ActivityErrorField = value;
                    this.RaisePropertyChanged("ActivityError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActivityFinish {
            get {
                return this.ActivityFinishField;
            }
            set {
                if ((this.ActivityFinishField.Equals(value) != true)) {
                    this.ActivityFinishField = value;
                    this.RaisePropertyChanged("ActivityFinish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityLock {
            get {
                return this.ActivityLockField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityLockField, value) != true)) {
                    this.ActivityLockField = value;
                    this.RaisePropertyChanged("ActivityLock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActivityStart {
            get {
                return this.ActivityStartField;
            }
            set {
                if ((this.ActivityStartField.Equals(value) != true)) {
                    this.ActivityStartField = value;
                    this.RaisePropertyChanged("ActivityStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ActivityToProcessID {
            get {
                return this.ActivityToProcessIDField;
            }
            set {
                if ((this.ActivityToProcessIDField.Equals(value) != true)) {
                    this.ActivityToProcessIDField = value;
                    this.RaisePropertyChanged("ActivityToProcessID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BatchName {
            get {
                return this.BatchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BatchNameField, value) != true)) {
                    this.BatchNameField = value;
                    this.RaisePropertyChanged("BatchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CachePath {
            get {
                return this.CachePathField;
            }
            set {
                if ((object.ReferenceEquals(this.CachePathField, value) != true)) {
                    this.CachePathField = value;
                    this.RaisePropertyChanged("CachePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FailCount {
            get {
                return this.FailCountField;
            }
            set {
                if ((this.FailCountField.Equals(value) != true)) {
                    this.FailCountField = value;
                    this.RaisePropertyChanged("FailCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastFailTime {
            get {
                return this.LastFailTimeField;
            }
            set {
                if ((this.LastFailTimeField.Equals(value) != true)) {
                    this.LastFailTimeField = value;
                    this.RaisePropertyChanged("LastFailTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityDefinition", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BatCheese.Data.AgentService.ActivityToProcess))]
    public partial class ActivityDefinition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityLibraryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActivityManualField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfigurationDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentClassContentTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentClassLibraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentClassURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxRetryCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinRetryIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BatCheese.Data.AgentService.KLCredential SiteCredentialsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SiteTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SiteUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityClass {
            get {
                return this.ActivityClassField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityClassField, value) != true)) {
                    this.ActivityClassField = value;
                    this.RaisePropertyChanged("ActivityClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityDescription {
            get {
                return this.ActivityDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityDescriptionField, value) != true)) {
                    this.ActivityDescriptionField = value;
                    this.RaisePropertyChanged("ActivityDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityLibrary {
            get {
                return this.ActivityLibraryField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityLibraryField, value) != true)) {
                    this.ActivityLibraryField = value;
                    this.RaisePropertyChanged("ActivityLibrary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ActivityManual {
            get {
                return this.ActivityManualField;
            }
            set {
                if ((this.ActivityManualField.Equals(value) != true)) {
                    this.ActivityManualField = value;
                    this.RaisePropertyChanged("ActivityManual");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName {
            get {
                return this.ActivityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityNameField, value) != true)) {
                    this.ActivityNameField = value;
                    this.RaisePropertyChanged("ActivityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityNumber {
            get {
                return this.ActivityNumberField;
            }
            set {
                if ((this.ActivityNumberField.Equals(value) != true)) {
                    this.ActivityNumberField = value;
                    this.RaisePropertyChanged("ActivityNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfigurationData {
            get {
                return this.ConfigurationDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigurationDataField, value) != true)) {
                    this.ConfigurationDataField = value;
                    this.RaisePropertyChanged("ConfigurationData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentClass {
            get {
                return this.DocumentClassField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentClassField, value) != true)) {
                    this.DocumentClassField = value;
                    this.RaisePropertyChanged("DocumentClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentClassContentType {
            get {
                return this.DocumentClassContentTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentClassContentTypeField, value) != true)) {
                    this.DocumentClassContentTypeField = value;
                    this.RaisePropertyChanged("DocumentClassContentType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentClassLibraryName {
            get {
                return this.DocumentClassLibraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentClassLibraryNameField, value) != true)) {
                    this.DocumentClassLibraryNameField = value;
                    this.RaisePropertyChanged("DocumentClassLibraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentClassURL {
            get {
                return this.DocumentClassURLField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentClassURLField, value) != true)) {
                    this.DocumentClassURLField = value;
                    this.RaisePropertyChanged("DocumentClassURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxRetryCount {
            get {
                return this.MaxRetryCountField;
            }
            set {
                if ((this.MaxRetryCountField.Equals(value) != true)) {
                    this.MaxRetryCountField = value;
                    this.RaisePropertyChanged("MaxRetryCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinRetryInterval {
            get {
                return this.MinRetryIntervalField;
            }
            set {
                if ((this.MinRetryIntervalField.Equals(value) != true)) {
                    this.MinRetryIntervalField = value;
                    this.RaisePropertyChanged("MinRetryInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessName {
            get {
                return this.ProcessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessNameField, value) != true)) {
                    this.ProcessNameField = value;
                    this.RaisePropertyChanged("ProcessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BatCheese.Data.AgentService.KLCredential SiteCredentials {
            get {
                return this.SiteCredentialsField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteCredentialsField, value) != true)) {
                    this.SiteCredentialsField = value;
                    this.RaisePropertyChanged("SiteCredentials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SiteType {
            get {
                return this.SiteTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteTypeField, value) != true)) {
                    this.SiteTypeField = value;
                    this.RaisePropertyChanged("SiteType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SiteUrl {
            get {
                return this.SiteUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteUrlField, value) != true)) {
                    this.SiteUrlField = value;
                    this.RaisePropertyChanged("SiteUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KLCredential", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class KLCredential : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string _domainField;
        
        private bool _isOffice365Field;
        
        private string _passwordField;
        
        private string _userNameField;
        
        private string AdfsUrlk__BackingFieldField;
        
        private BatCheese.Data.AgentService.CredentialType Typek__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _domain {
            get {
                return this._domainField;
            }
            set {
                if ((object.ReferenceEquals(this._domainField, value) != true)) {
                    this._domainField = value;
                    this.RaisePropertyChanged("_domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool _isOffice365 {
            get {
                return this._isOffice365Field;
            }
            set {
                if ((this._isOffice365Field.Equals(value) != true)) {
                    this._isOffice365Field = value;
                    this.RaisePropertyChanged("_isOffice365");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _password {
            get {
                return this._passwordField;
            }
            set {
                if ((object.ReferenceEquals(this._passwordField, value) != true)) {
                    this._passwordField = value;
                    this.RaisePropertyChanged("_password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string _userName {
            get {
                return this._userNameField;
            }
            set {
                if ((object.ReferenceEquals(this._userNameField, value) != true)) {
                    this._userNameField = value;
                    this.RaisePropertyChanged("_userName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<AdfsUrl>k__BackingField", IsRequired=true)]
        public string AdfsUrlk__BackingField {
            get {
                return this.AdfsUrlk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.AdfsUrlk__BackingFieldField, value) != true)) {
                    this.AdfsUrlk__BackingFieldField = value;
                    this.RaisePropertyChanged("AdfsUrlk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Type>k__BackingField", IsRequired=true)]
        public BatCheese.Data.AgentService.CredentialType Typek__BackingField {
            get {
                return this.Typek__BackingFieldField;
            }
            set {
                if ((this.Typek__BackingFieldField.Equals(value) != true)) {
                    this.Typek__BackingFieldField = value;
                    this.RaisePropertyChanged("Typek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CredentialType", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    public enum CredentialType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Windows = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Forms = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Claims = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ActivityHours", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ActivityHour")]
    [System.SerializableAttribute()]
    public class ActivityHours : System.Collections.Generic.List<BatCheese.Data.AgentService.ActivityHour> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivityHour", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ActivityHour : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityHourIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActivityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, bool> HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityHourID {
            get {
                return this.ActivityHourIDField;
            }
            set {
                if ((this.ActivityHourIDField.Equals(value) != true)) {
                    this.ActivityHourIDField = value;
                    this.RaisePropertyChanged("ActivityHourID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityID {
            get {
                return this.ActivityIDField;
            }
            set {
                if ((this.ActivityIDField.Equals(value) != true)) {
                    this.ActivityIDField = value;
                    this.RaisePropertyChanged("ActivityID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActivityName {
            get {
                return this.ActivityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ActivityNameField, value) != true)) {
                    this.ActivityNameField = value;
                    this.RaisePropertyChanged("ActivityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, bool> Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((object.ReferenceEquals(this.HoursField, value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AgentService.IAgentService")]
    public interface IAgentService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/ServiceShouldRun", ReplyAction="http://tempuri.org/IAgentService/ServiceShouldRunResponse")]
        bool ServiceShouldRun(string servicename, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/ServiceShouldRun", ReplyAction="http://tempuri.org/IAgentService/ServiceShouldRunResponse")]
        System.Threading.Tasks.Task<bool> ServiceShouldRunAsync(string servicename, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SetIsRunning", ReplyAction="http://tempuri.org/IAgentService/SetIsRunningResponse")]
        void SetIsRunning(string servicename, string machinename, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SetIsRunning", ReplyAction="http://tempuri.org/IAgentService/SetIsRunningResponse")]
        System.Threading.Tasks.Task SetIsRunningAsync(string servicename, string machinename, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetServicesStatus", ReplyAction="http://tempuri.org/IAgentService/GetServicesStatusResponse")]
        System.Collections.Generic.Dictionary<string, bool> GetServicesStatus(string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetServicesStatus", ReplyAction="http://tempuri.org/IAgentService/GetServicesStatusResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> GetServicesStatusAsync(string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SetService", ReplyAction="http://tempuri.org/IAgentService/SetServiceResponse")]
        void SetService(string servicename, string machinename, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SetService", ReplyAction="http://tempuri.org/IAgentService/SetServiceResponse")]
        System.Threading.Tasks.Task SetServiceAsync(string servicename, string machinename, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SetServiceByID", ReplyAction="http://tempuri.org/IAgentService/SetServiceByIDResponse")]
        void SetServiceByID(int serviceid, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SetServiceByID", ReplyAction="http://tempuri.org/IAgentService/SetServiceByIDResponse")]
        System.Threading.Tasks.Task SetServiceByIDAsync(int serviceid, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetServices", ReplyAction="http://tempuri.org/IAgentService/GetServicesResponse")]
        BatCheese.Data.AgentService.Services GetServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetServices", ReplyAction="http://tempuri.org/IAgentService/GetServicesResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.AgentService.Services> GetServicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetLocServices", ReplyAction="http://tempuri.org/IAgentService/GetLocServicesResponse")]
        BatCheese.Data.AgentService.Services GetLocServices(string culture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetLocServices", ReplyAction="http://tempuri.org/IAgentService/GetLocServicesResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.AgentService.Services> GetLocServicesAsync(string culture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetActivities", ReplyAction="http://tempuri.org/IAgentService/GetActivitiesResponse")]
        BatCheese.Data.AgentService.ActivityRegisters GetActivities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetActivities", ReplyAction="http://tempuri.org/IAgentService/GetActivitiesResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.AgentService.ActivityRegisters> GetActivitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetLocActivities", ReplyAction="http://tempuri.org/IAgentService/GetLocActivitiesResponse")]
        BatCheese.Data.AgentService.ActivityRegisters GetLocActivities(string culture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetLocActivities", ReplyAction="http://tempuri.org/IAgentService/GetLocActivitiesResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.AgentService.ActivityRegisters> GetLocActivitiesAsync(string culture);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SetActivity", ReplyAction="http://tempuri.org/IAgentService/SetActivityResponse")]
        void SetActivity(int activityid, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SetActivity", ReplyAction="http://tempuri.org/IAgentService/SetActivityResponse")]
        System.Threading.Tasks.Task SetActivityAsync(int activityid, bool status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetBatchesInProcess", ReplyAction="http://tempuri.org/IAgentService/GetBatchesInProcessResponse")]
        BatCheese.Data.AgentService.ActivitiesToProcess GetBatchesInProcess();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetBatchesInProcess", ReplyAction="http://tempuri.org/IAgentService/GetBatchesInProcessResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.AgentService.ActivitiesToProcess> GetBatchesInProcessAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetErrorBatches", ReplyAction="http://tempuri.org/IAgentService/GetErrorBatchesResponse")]
        BatCheese.Data.AgentService.ActivitiesToProcess GetErrorBatches();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetErrorBatches", ReplyAction="http://tempuri.org/IAgentService/GetErrorBatchesResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.AgentService.ActivitiesToProcess> GetErrorBatchesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetTotalBatches", ReplyAction="http://tempuri.org/IAgentService/GetTotalBatchesResponse")]
        int GetTotalBatches();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetTotalBatches", ReplyAction="http://tempuri.org/IAgentService/GetTotalBatchesResponse")]
        System.Threading.Tasks.Task<int> GetTotalBatchesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/ResubmitBatch", ReplyAction="http://tempuri.org/IAgentService/ResubmitBatchResponse")]
        void ResubmitBatch(long activitytoprocessid, int activitynumber, string activityname, string batchname, string cachepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/ResubmitBatch", ReplyAction="http://tempuri.org/IAgentService/ResubmitBatchResponse")]
        System.Threading.Tasks.Task ResubmitBatchAsync(long activitytoprocessid, int activitynumber, string activityname, string batchname, string cachepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/DeleteBatch", ReplyAction="http://tempuri.org/IAgentService/DeleteBatchResponse")]
        void DeleteBatch(string batchname, string cachepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/DeleteBatch", ReplyAction="http://tempuri.org/IAgentService/DeleteBatchResponse")]
        System.Threading.Tasks.Task DeleteBatchAsync(string batchname, string cachepath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetActivityHours", ReplyAction="http://tempuri.org/IAgentService/GetActivityHoursResponse")]
        BatCheese.Data.AgentService.ActivityHours GetActivityHours();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/GetActivityHours", ReplyAction="http://tempuri.org/IAgentService/GetActivityHoursResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.AgentService.ActivityHours> GetActivityHoursAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SaveActivityHour", ReplyAction="http://tempuri.org/IAgentService/SaveActivityHourResponse")]
        void SaveActivityHour(BatCheese.Data.AgentService.ActivityHour hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/SaveActivityHour", ReplyAction="http://tempuri.org/IAgentService/SaveActivityHourResponse")]
        System.Threading.Tasks.Task SaveActivityHourAsync(BatCheese.Data.AgentService.ActivityHour hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/RemoveService", ReplyAction="http://tempuri.org/IAgentService/RemoveServiceResponse")]
        void RemoveService(string servicename, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/RemoveService", ReplyAction="http://tempuri.org/IAgentService/RemoveServiceResponse")]
        System.Threading.Tasks.Task RemoveServiceAsync(string servicename, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/ServiceEntryExists", ReplyAction="http://tempuri.org/IAgentService/ServiceEntryExistsResponse")]
        bool ServiceEntryExists(string servicename, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/ServiceEntryExists", ReplyAction="http://tempuri.org/IAgentService/ServiceEntryExistsResponse")]
        System.Threading.Tasks.Task<bool> ServiceEntryExistsAsync(string servicename, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/InsertService", ReplyAction="http://tempuri.org/IAgentService/InsertServiceResponse")]
        void InsertService(string servicename, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/InsertService", ReplyAction="http://tempuri.org/IAgentService/InsertServiceResponse")]
        System.Threading.Tasks.Task InsertServiceAsync(string servicename, string machinename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/IsDbAvailable", ReplyAction="http://tempuri.org/IAgentService/IsDbAvailableResponse")]
        bool IsDbAvailable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAgentService/IsDbAvailable", ReplyAction="http://tempuri.org/IAgentService/IsDbAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsDbAvailableAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAgentServiceChannel : BatCheese.Data.AgentService.IAgentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AgentServiceClient : System.ServiceModel.ClientBase<BatCheese.Data.AgentService.IAgentService>, BatCheese.Data.AgentService.IAgentService {
        
        public AgentServiceClient() {
        }
        
        public AgentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AgentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AgentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AgentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ServiceShouldRun(string servicename, string machinename) {
            return base.Channel.ServiceShouldRun(servicename, machinename);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceShouldRunAsync(string servicename, string machinename) {
            return base.Channel.ServiceShouldRunAsync(servicename, machinename);
        }
        
        public void SetIsRunning(string servicename, string machinename, bool status) {
            base.Channel.SetIsRunning(servicename, machinename, status);
        }
        
        public System.Threading.Tasks.Task SetIsRunningAsync(string servicename, string machinename, bool status) {
            return base.Channel.SetIsRunningAsync(servicename, machinename, status);
        }
        
        public System.Collections.Generic.Dictionary<string, bool> GetServicesStatus(string machinename) {
            return base.Channel.GetServicesStatus(machinename);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> GetServicesStatusAsync(string machinename) {
            return base.Channel.GetServicesStatusAsync(machinename);
        }
        
        public void SetService(string servicename, string machinename, bool status) {
            base.Channel.SetService(servicename, machinename, status);
        }
        
        public System.Threading.Tasks.Task SetServiceAsync(string servicename, string machinename, bool status) {
            return base.Channel.SetServiceAsync(servicename, machinename, status);
        }
        
        public void SetServiceByID(int serviceid, bool status) {
            base.Channel.SetServiceByID(serviceid, status);
        }
        
        public System.Threading.Tasks.Task SetServiceByIDAsync(int serviceid, bool status) {
            return base.Channel.SetServiceByIDAsync(serviceid, status);
        }
        
        public BatCheese.Data.AgentService.Services GetServices() {
            return base.Channel.GetServices();
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.AgentService.Services> GetServicesAsync() {
            return base.Channel.GetServicesAsync();
        }
        
        public BatCheese.Data.AgentService.Services GetLocServices(string culture) {
            return base.Channel.GetLocServices(culture);
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.AgentService.Services> GetLocServicesAsync(string culture) {
            return base.Channel.GetLocServicesAsync(culture);
        }
        
        public BatCheese.Data.AgentService.ActivityRegisters GetActivities() {
            return base.Channel.GetActivities();
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.AgentService.ActivityRegisters> GetActivitiesAsync() {
            return base.Channel.GetActivitiesAsync();
        }
        
        public BatCheese.Data.AgentService.ActivityRegisters GetLocActivities(string culture) {
            return base.Channel.GetLocActivities(culture);
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.AgentService.ActivityRegisters> GetLocActivitiesAsync(string culture) {
            return base.Channel.GetLocActivitiesAsync(culture);
        }
        
        public void SetActivity(int activityid, bool status) {
            base.Channel.SetActivity(activityid, status);
        }
        
        public System.Threading.Tasks.Task SetActivityAsync(int activityid, bool status) {
            return base.Channel.SetActivityAsync(activityid, status);
        }
        
        public BatCheese.Data.AgentService.ActivitiesToProcess GetBatchesInProcess() {
            return base.Channel.GetBatchesInProcess();
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.AgentService.ActivitiesToProcess> GetBatchesInProcessAsync() {
            return base.Channel.GetBatchesInProcessAsync();
        }
        
        public BatCheese.Data.AgentService.ActivitiesToProcess GetErrorBatches() {
            return base.Channel.GetErrorBatches();
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.AgentService.ActivitiesToProcess> GetErrorBatchesAsync() {
            return base.Channel.GetErrorBatchesAsync();
        }
        
        public int GetTotalBatches() {
            return base.Channel.GetTotalBatches();
        }
        
        public System.Threading.Tasks.Task<int> GetTotalBatchesAsync() {
            return base.Channel.GetTotalBatchesAsync();
        }
        
        public void ResubmitBatch(long activitytoprocessid, int activitynumber, string activityname, string batchname, string cachepath) {
            base.Channel.ResubmitBatch(activitytoprocessid, activitynumber, activityname, batchname, cachepath);
        }
        
        public System.Threading.Tasks.Task ResubmitBatchAsync(long activitytoprocessid, int activitynumber, string activityname, string batchname, string cachepath) {
            return base.Channel.ResubmitBatchAsync(activitytoprocessid, activitynumber, activityname, batchname, cachepath);
        }
        
        public void DeleteBatch(string batchname, string cachepath) {
            base.Channel.DeleteBatch(batchname, cachepath);
        }
        
        public System.Threading.Tasks.Task DeleteBatchAsync(string batchname, string cachepath) {
            return base.Channel.DeleteBatchAsync(batchname, cachepath);
        }
        
        public BatCheese.Data.AgentService.ActivityHours GetActivityHours() {
            return base.Channel.GetActivityHours();
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.AgentService.ActivityHours> GetActivityHoursAsync() {
            return base.Channel.GetActivityHoursAsync();
        }
        
        public void SaveActivityHour(BatCheese.Data.AgentService.ActivityHour hour) {
            base.Channel.SaveActivityHour(hour);
        }
        
        public System.Threading.Tasks.Task SaveActivityHourAsync(BatCheese.Data.AgentService.ActivityHour hour) {
            return base.Channel.SaveActivityHourAsync(hour);
        }
        
        public void RemoveService(string servicename, string machinename) {
            base.Channel.RemoveService(servicename, machinename);
        }
        
        public System.Threading.Tasks.Task RemoveServiceAsync(string servicename, string machinename) {
            return base.Channel.RemoveServiceAsync(servicename, machinename);
        }
        
        public bool ServiceEntryExists(string servicename, string machinename) {
            return base.Channel.ServiceEntryExists(servicename, machinename);
        }
        
        public System.Threading.Tasks.Task<bool> ServiceEntryExistsAsync(string servicename, string machinename) {
            return base.Channel.ServiceEntryExistsAsync(servicename, machinename);
        }
        
        public void InsertService(string servicename, string machinename) {
            base.Channel.InsertService(servicename, machinename);
        }
        
        public System.Threading.Tasks.Task InsertServiceAsync(string servicename, string machinename) {
            return base.Channel.InsertServiceAsync(servicename, machinename);
        }
        
        public bool IsDbAvailable() {
            return base.Channel.IsDbAvailable();
        }
        
        public System.Threading.Tasks.Task<bool> IsDbAvailableAsync() {
            return base.Channel.IsDbAvailableAsync();
        }
    }
}
