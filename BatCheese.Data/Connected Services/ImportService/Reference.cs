//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BatCheese.Data.ImportService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchImport", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class BatchImport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRunNowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid JobIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastConfigUpdateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastRunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XmlConfigField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunNow {
            get {
                return this.IsRunNowField;
            }
            set {
                if ((this.IsRunNowField.Equals(value) != true)) {
                    this.IsRunNowField = value;
                    this.RaisePropertyChanged("IsRunNow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid JobId {
            get {
                return this.JobIdField;
            }
            set {
                if ((this.JobIdField.Equals(value) != true)) {
                    this.JobIdField = value;
                    this.RaisePropertyChanged("JobId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobName {
            get {
                return this.JobNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNameField, value) != true)) {
                    this.JobNameField = value;
                    this.RaisePropertyChanged("JobName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastConfigUpdate {
            get {
                return this.LastConfigUpdateField;
            }
            set {
                if ((this.LastConfigUpdateField.Equals(value) != true)) {
                    this.LastConfigUpdateField = value;
                    this.RaisePropertyChanged("LastConfigUpdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastRun {
            get {
                return this.LastRunField;
            }
            set {
                if ((this.LastRunField.Equals(value) != true)) {
                    this.LastRunField = value;
                    this.RaisePropertyChanged("LastRun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XmlConfig {
            get {
                return this.XmlConfigField;
            }
            set {
                if ((object.ReferenceEquals(this.XmlConfigField, value) != true)) {
                    this.XmlConfigField = value;
                    this.RaisePropertyChanged("XmlConfig");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="BatchImports", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="BatchImport")]
    [System.SerializableAttribute()]
    public class BatchImports : System.Collections.Generic.List<BatCheese.Data.ImportService.BatchImport> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ImportHours", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="ImportHour")]
    [System.SerializableAttribute()]
    public class ImportHours : System.Collections.Generic.List<BatCheese.Data.ImportService.ImportHour> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImportHour", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class ImportHour : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HourIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, bool> HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImportIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HourID {
            get {
                return this.HourIDField;
            }
            set {
                if ((this.HourIDField.Equals(value) != true)) {
                    this.HourIDField = value;
                    this.RaisePropertyChanged("HourID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, bool> Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((object.ReferenceEquals(this.HoursField, value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImportID {
            get {
                return this.ImportIDField;
            }
            set {
                if ((this.ImportIDField.Equals(value) != true)) {
                    this.ImportIDField = value;
                    this.RaisePropertyChanged("ImportID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="Branches", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common", ItemName="Branch")]
    [System.SerializableAttribute()]
    public class Branches : System.Collections.Generic.List<BatCheese.Data.ImportService.Branch> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Branch", Namespace="http://schemas.datacontract.org/2004/07/KnowledgeLake.Capture.Server.Common")]
    [System.SerializableAttribute()]
    public partial class Branch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BatchesInTransitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BranchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HealthInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] HoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastHeartbeatUTCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte MinutesBetweenHeartbeatsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SecondsToPauseForField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpeedLimitBytesPerSecondField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BatchesInTransit {
            get {
                return this.BatchesInTransitField;
            }
            set {
                if ((this.BatchesInTransitField.Equals(value) != true)) {
                    this.BatchesInTransitField = value;
                    this.RaisePropertyChanged("BatchesInTransit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BranchName {
            get {
                return this.BranchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BranchNameField, value) != true)) {
                    this.BranchNameField = value;
                    this.RaisePropertyChanged("BranchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HealthInfo {
            get {
                return this.HealthInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.HealthInfoField, value) != true)) {
                    this.HealthInfoField = value;
                    this.RaisePropertyChanged("HealthInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Hours {
            get {
                return this.HoursField;
            }
            set {
                if ((object.ReferenceEquals(this.HoursField, value) != true)) {
                    this.HoursField = value;
                    this.RaisePropertyChanged("Hours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastHeartbeatUTC {
            get {
                return this.LastHeartbeatUTCField;
            }
            set {
                if ((this.LastHeartbeatUTCField.Equals(value) != true)) {
                    this.LastHeartbeatUTCField = value;
                    this.RaisePropertyChanged("LastHeartbeatUTC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte MinutesBetweenHeartbeats {
            get {
                return this.MinutesBetweenHeartbeatsField;
            }
            set {
                if ((this.MinutesBetweenHeartbeatsField.Equals(value) != true)) {
                    this.MinutesBetweenHeartbeatsField = value;
                    this.RaisePropertyChanged("MinutesBetweenHeartbeats");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SecondsToPauseFor {
            get {
                return this.SecondsToPauseForField;
            }
            set {
                if ((this.SecondsToPauseForField.Equals(value) != true)) {
                    this.SecondsToPauseForField = value;
                    this.RaisePropertyChanged("SecondsToPauseFor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SpeedLimitBytesPerSecond {
            get {
                return this.SpeedLimitBytesPerSecondField;
            }
            set {
                if ((this.SpeedLimitBytesPerSecondField.Equals(value) != true)) {
                    this.SpeedLimitBytesPerSecondField = value;
                    this.RaisePropertyChanged("SpeedLimitBytesPerSecond");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ImportService.IImportService")]
    public interface IImportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/UpdateBatchImport", ReplyAction="http://tempuri.org/IImportService/UpdateBatchImportResponse")]
        void UpdateBatchImport(BatCheese.Data.ImportService.BatchImport batchImport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/UpdateBatchImport", ReplyAction="http://tempuri.org/IImportService/UpdateBatchImportResponse")]
        System.Threading.Tasks.Task UpdateBatchImportAsync(BatCheese.Data.ImportService.BatchImport batchImport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetAllBatchImports", ReplyAction="http://tempuri.org/IImportService/GetAllBatchImportsResponse")]
        BatCheese.Data.ImportService.BatchImports GetAllBatchImports();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetAllBatchImports", ReplyAction="http://tempuri.org/IImportService/GetAllBatchImportsResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.ImportService.BatchImports> GetAllBatchImportsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBatchImports", ReplyAction="http://tempuri.org/IImportService/GetBatchImportsResponse")]
        BatCheese.Data.ImportService.BatchImports GetBatchImports(string MachineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBatchImports", ReplyAction="http://tempuri.org/IImportService/GetBatchImportsResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.ImportService.BatchImports> GetBatchImportsAsync(string MachineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBatchImport", ReplyAction="http://tempuri.org/IImportService/GetBatchImportResponse")]
        BatCheese.Data.ImportService.BatchImport GetBatchImport(System.Guid JobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBatchImport", ReplyAction="http://tempuri.org/IImportService/GetBatchImportResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.ImportService.BatchImport> GetBatchImportAsync(System.Guid JobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SetBatchImportMachineActive", ReplyAction="http://tempuri.org/IImportService/SetBatchImportMachineActiveResponse")]
        void SetBatchImportMachineActive(string MachineName, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SetBatchImportMachineActive", ReplyAction="http://tempuri.org/IImportService/SetBatchImportMachineActiveResponse")]
        System.Threading.Tasks.Task SetBatchImportMachineActiveAsync(string MachineName, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SetBatchImportLastRun", ReplyAction="http://tempuri.org/IImportService/SetBatchImportLastRunResponse")]
        void SetBatchImportLastRun(System.Guid JobId, System.DateTime lastRunDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SetBatchImportLastRun", ReplyAction="http://tempuri.org/IImportService/SetBatchImportLastRunResponse")]
        System.Threading.Tasks.Task SetBatchImportLastRunAsync(System.Guid JobId, System.DateTime lastRunDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBatchImportUpdateDate", ReplyAction="http://tempuri.org/IImportService/GetBatchImportUpdateDateResponse")]
        System.Nullable<System.DateTime> GetBatchImportUpdateDate(System.Guid JobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBatchImportUpdateDate", ReplyAction="http://tempuri.org/IImportService/GetBatchImportUpdateDateResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.DateTime>> GetBatchImportUpdateDateAsync(System.Guid JobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/DeleteBatchImport", ReplyAction="http://tempuri.org/IImportService/DeleteBatchImportResponse")]
        void DeleteBatchImport(System.Guid JobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/DeleteBatchImport", ReplyAction="http://tempuri.org/IImportService/DeleteBatchImportResponse")]
        System.Threading.Tasks.Task DeleteBatchImportAsync(System.Guid JobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SetBatchImportIsRunNow", ReplyAction="http://tempuri.org/IImportService/SetBatchImportIsRunNowResponse")]
        void SetBatchImportIsRunNow(System.Guid JobId, bool IsRunNow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SetBatchImportIsRunNow", ReplyAction="http://tempuri.org/IImportService/SetBatchImportIsRunNowResponse")]
        System.Threading.Tasks.Task SetBatchImportIsRunNowAsync(System.Guid JobId, bool IsRunNow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBatchImportIsRunNow", ReplyAction="http://tempuri.org/IImportService/GetBatchImportIsRunNowResponse")]
        System.Collections.Generic.List<System.Guid> GetBatchImportIsRunNow(string MachineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBatchImportIsRunNow", ReplyAction="http://tempuri.org/IImportService/GetBatchImportIsRunNowResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<System.Guid>> GetBatchImportIsRunNowAsync(string MachineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SetBatchImportError", ReplyAction="http://tempuri.org/IImportService/SetBatchImportErrorResponse")]
        void SetBatchImportError(System.Guid JobId, string Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SetBatchImportError", ReplyAction="http://tempuri.org/IImportService/SetBatchImportErrorResponse")]
        System.Threading.Tasks.Task SetBatchImportErrorAsync(System.Guid JobId, string Error);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBatchImportError", ReplyAction="http://tempuri.org/IImportService/GetBatchImportErrorResponse")]
        string GetBatchImportError(System.Guid JobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBatchImportError", ReplyAction="http://tempuri.org/IImportService/GetBatchImportErrorResponse")]
        System.Threading.Tasks.Task<string> GetBatchImportErrorAsync(System.Guid JobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetImportHours", ReplyAction="http://tempuri.org/IImportService/GetImportHoursResponse")]
        BatCheese.Data.ImportService.ImportHours GetImportHours();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetImportHours", ReplyAction="http://tempuri.org/IImportService/GetImportHoursResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.ImportService.ImportHours> GetImportHoursAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SaveImportHour", ReplyAction="http://tempuri.org/IImportService/SaveImportHourResponse")]
        void SaveImportHour(BatCheese.Data.ImportService.ImportHour hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SaveImportHour", ReplyAction="http://tempuri.org/IImportService/SaveImportHourResponse")]
        System.Threading.Tasks.Task SaveImportHourAsync(BatCheese.Data.ImportService.ImportHour hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBranches", ReplyAction="http://tempuri.org/IImportService/GetBranchesResponse")]
        BatCheese.Data.ImportService.Branches GetBranches(System.DateTime currentdatetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/GetBranches", ReplyAction="http://tempuri.org/IImportService/GetBranchesResponse")]
        System.Threading.Tasks.Task<BatCheese.Data.ImportService.Branches> GetBranchesAsync(System.DateTime currentdatetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SaveBranchConfig", ReplyAction="http://tempuri.org/IImportService/SaveBranchConfigResponse")]
        void SaveBranchConfig(BatCheese.Data.ImportService.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/SaveBranchConfig", ReplyAction="http://tempuri.org/IImportService/SaveBranchConfigResponse")]
        System.Threading.Tasks.Task SaveBranchConfigAsync(BatCheese.Data.ImportService.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/UpdateBranchHealthStatus", ReplyAction="http://tempuri.org/IImportService/UpdateBranchHealthStatusResponse")]
        void UpdateBranchHealthStatus(BatCheese.Data.ImportService.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/UpdateBranchHealthStatus", ReplyAction="http://tempuri.org/IImportService/UpdateBranchHealthStatusResponse")]
        System.Threading.Tasks.Task UpdateBranchHealthStatusAsync(BatCheese.Data.ImportService.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/AddBranch", ReplyAction="http://tempuri.org/IImportService/AddBranchResponse")]
        void AddBranch(BatCheese.Data.ImportService.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/AddBranch", ReplyAction="http://tempuri.org/IImportService/AddBranchResponse")]
        System.Threading.Tasks.Task AddBranchAsync(BatCheese.Data.ImportService.Branch branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/RemoveBranch", ReplyAction="http://tempuri.org/IImportService/RemoveBranchResponse")]
        void RemoveBranch(string branchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImportService/RemoveBranch", ReplyAction="http://tempuri.org/IImportService/RemoveBranchResponse")]
        System.Threading.Tasks.Task RemoveBranchAsync(string branchName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImportServiceChannel : BatCheese.Data.ImportService.IImportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportServiceClient : System.ServiceModel.ClientBase<BatCheese.Data.ImportService.IImportService>, BatCheese.Data.ImportService.IImportService {
        
        public ImportServiceClient() {
        }
        
        public ImportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UpdateBatchImport(BatCheese.Data.ImportService.BatchImport batchImport) {
            base.Channel.UpdateBatchImport(batchImport);
        }
        
        public System.Threading.Tasks.Task UpdateBatchImportAsync(BatCheese.Data.ImportService.BatchImport batchImport) {
            return base.Channel.UpdateBatchImportAsync(batchImport);
        }
        
        public BatCheese.Data.ImportService.BatchImports GetAllBatchImports() {
            return base.Channel.GetAllBatchImports();
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.ImportService.BatchImports> GetAllBatchImportsAsync() {
            return base.Channel.GetAllBatchImportsAsync();
        }
        
        public BatCheese.Data.ImportService.BatchImports GetBatchImports(string MachineName) {
            return base.Channel.GetBatchImports(MachineName);
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.ImportService.BatchImports> GetBatchImportsAsync(string MachineName) {
            return base.Channel.GetBatchImportsAsync(MachineName);
        }
        
        public BatCheese.Data.ImportService.BatchImport GetBatchImport(System.Guid JobId) {
            return base.Channel.GetBatchImport(JobId);
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.ImportService.BatchImport> GetBatchImportAsync(System.Guid JobId) {
            return base.Channel.GetBatchImportAsync(JobId);
        }
        
        public void SetBatchImportMachineActive(string MachineName, bool isActive) {
            base.Channel.SetBatchImportMachineActive(MachineName, isActive);
        }
        
        public System.Threading.Tasks.Task SetBatchImportMachineActiveAsync(string MachineName, bool isActive) {
            return base.Channel.SetBatchImportMachineActiveAsync(MachineName, isActive);
        }
        
        public void SetBatchImportLastRun(System.Guid JobId, System.DateTime lastRunDate) {
            base.Channel.SetBatchImportLastRun(JobId, lastRunDate);
        }
        
        public System.Threading.Tasks.Task SetBatchImportLastRunAsync(System.Guid JobId, System.DateTime lastRunDate) {
            return base.Channel.SetBatchImportLastRunAsync(JobId, lastRunDate);
        }
        
        public System.Nullable<System.DateTime> GetBatchImportUpdateDate(System.Guid JobId) {
            return base.Channel.GetBatchImportUpdateDate(JobId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.DateTime>> GetBatchImportUpdateDateAsync(System.Guid JobId) {
            return base.Channel.GetBatchImportUpdateDateAsync(JobId);
        }
        
        public void DeleteBatchImport(System.Guid JobId) {
            base.Channel.DeleteBatchImport(JobId);
        }
        
        public System.Threading.Tasks.Task DeleteBatchImportAsync(System.Guid JobId) {
            return base.Channel.DeleteBatchImportAsync(JobId);
        }
        
        public void SetBatchImportIsRunNow(System.Guid JobId, bool IsRunNow) {
            base.Channel.SetBatchImportIsRunNow(JobId, IsRunNow);
        }
        
        public System.Threading.Tasks.Task SetBatchImportIsRunNowAsync(System.Guid JobId, bool IsRunNow) {
            return base.Channel.SetBatchImportIsRunNowAsync(JobId, IsRunNow);
        }
        
        public System.Collections.Generic.List<System.Guid> GetBatchImportIsRunNow(string MachineName) {
            return base.Channel.GetBatchImportIsRunNow(MachineName);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<System.Guid>> GetBatchImportIsRunNowAsync(string MachineName) {
            return base.Channel.GetBatchImportIsRunNowAsync(MachineName);
        }
        
        public void SetBatchImportError(System.Guid JobId, string Error) {
            base.Channel.SetBatchImportError(JobId, Error);
        }
        
        public System.Threading.Tasks.Task SetBatchImportErrorAsync(System.Guid JobId, string Error) {
            return base.Channel.SetBatchImportErrorAsync(JobId, Error);
        }
        
        public string GetBatchImportError(System.Guid JobId) {
            return base.Channel.GetBatchImportError(JobId);
        }
        
        public System.Threading.Tasks.Task<string> GetBatchImportErrorAsync(System.Guid JobId) {
            return base.Channel.GetBatchImportErrorAsync(JobId);
        }
        
        public BatCheese.Data.ImportService.ImportHours GetImportHours() {
            return base.Channel.GetImportHours();
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.ImportService.ImportHours> GetImportHoursAsync() {
            return base.Channel.GetImportHoursAsync();
        }
        
        public void SaveImportHour(BatCheese.Data.ImportService.ImportHour hour) {
            base.Channel.SaveImportHour(hour);
        }
        
        public System.Threading.Tasks.Task SaveImportHourAsync(BatCheese.Data.ImportService.ImportHour hour) {
            return base.Channel.SaveImportHourAsync(hour);
        }
        
        public BatCheese.Data.ImportService.Branches GetBranches(System.DateTime currentdatetime) {
            return base.Channel.GetBranches(currentdatetime);
        }
        
        public System.Threading.Tasks.Task<BatCheese.Data.ImportService.Branches> GetBranchesAsync(System.DateTime currentdatetime) {
            return base.Channel.GetBranchesAsync(currentdatetime);
        }
        
        public void SaveBranchConfig(BatCheese.Data.ImportService.Branch branch) {
            base.Channel.SaveBranchConfig(branch);
        }
        
        public System.Threading.Tasks.Task SaveBranchConfigAsync(BatCheese.Data.ImportService.Branch branch) {
            return base.Channel.SaveBranchConfigAsync(branch);
        }
        
        public void UpdateBranchHealthStatus(BatCheese.Data.ImportService.Branch branch) {
            base.Channel.UpdateBranchHealthStatus(branch);
        }
        
        public System.Threading.Tasks.Task UpdateBranchHealthStatusAsync(BatCheese.Data.ImportService.Branch branch) {
            return base.Channel.UpdateBranchHealthStatusAsync(branch);
        }
        
        public void AddBranch(BatCheese.Data.ImportService.Branch branch) {
            base.Channel.AddBranch(branch);
        }
        
        public System.Threading.Tasks.Task AddBranchAsync(BatCheese.Data.ImportService.Branch branch) {
            return base.Channel.AddBranchAsync(branch);
        }
        
        public void RemoveBranch(string branchName) {
            base.Channel.RemoveBranch(branchName);
        }
        
        public System.Threading.Tasks.Task RemoveBranchAsync(string branchName) {
            return base.Channel.RemoveBranchAsync(branchName);
        }
    }
}
